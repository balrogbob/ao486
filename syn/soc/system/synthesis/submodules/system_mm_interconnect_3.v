// system_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2021.03.08.12:40:53

`timescale 1 ps / 1 ps
module system_mm_interconnect_3 (
		input  wire        clk_sound_clk_clk,                                    //                                  clk_sound_clk.clk
		input  wire        clk_sys_clk_clk,                                      //                                    clk_sys_clk.clk
		input  wire        driver_sound_reset_sound_reset_bridge_in_reset_reset, // driver_sound_reset_sound_reset_bridge_in_reset.reset
		input  wire        sound_reset_sink_reset_bridge_in_reset_reset,         //         sound_reset_sink_reset_bridge_in_reset.reset
		input  wire [2:0]  sound_sound_master_address,                           //                             sound_sound_master.address
		output wire        sound_sound_master_waitrequest,                       //                                               .waitrequest
		input  wire        sound_sound_master_write,                             //                                               .write
		input  wire [31:0] sound_sound_master_writedata,                         //                                               .writedata
		output wire        driver_sound_sound_slave_write,                       //                       driver_sound_sound_slave.write
		output wire [31:0] driver_sound_sound_slave_writedata                    //                                               .writedata
	);

	wire         sound_sound_master_translator_avalon_universal_master_0_waitrequest;   // sound_sound_master_agent:av_waitrequest -> sound_sound_master_translator:uav_waitrequest
	wire   [2:0] sound_sound_master_translator_avalon_universal_master_0_burstcount;    // sound_sound_master_translator:uav_burstcount -> sound_sound_master_agent:av_burstcount
	wire  [31:0] sound_sound_master_translator_avalon_universal_master_0_writedata;     // sound_sound_master_translator:uav_writedata -> sound_sound_master_agent:av_writedata
	wire   [2:0] sound_sound_master_translator_avalon_universal_master_0_address;       // sound_sound_master_translator:uav_address -> sound_sound_master_agent:av_address
	wire         sound_sound_master_translator_avalon_universal_master_0_lock;          // sound_sound_master_translator:uav_lock -> sound_sound_master_agent:av_lock
	wire         sound_sound_master_translator_avalon_universal_master_0_write;         // sound_sound_master_translator:uav_write -> sound_sound_master_agent:av_write
	wire         sound_sound_master_translator_avalon_universal_master_0_read;          // sound_sound_master_translator:uav_read -> sound_sound_master_agent:av_read
	wire  [31:0] sound_sound_master_translator_avalon_universal_master_0_readdata;      // sound_sound_master_agent:av_readdata -> sound_sound_master_translator:uav_readdata
	wire         sound_sound_master_translator_avalon_universal_master_0_debugaccess;   // sound_sound_master_translator:uav_debugaccess -> sound_sound_master_agent:av_debugaccess
	wire   [3:0] sound_sound_master_translator_avalon_universal_master_0_byteenable;    // sound_sound_master_translator:uav_byteenable -> sound_sound_master_agent:av_byteenable
	wire         sound_sound_master_translator_avalon_universal_master_0_readdatavalid; // sound_sound_master_agent:av_readdatavalid -> sound_sound_master_translator:uav_readdatavalid
	wire         rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> sound_sound_master_agent:rp_endofpacket
	wire         rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> sound_sound_master_agent:rp_valid
	wire         rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> sound_sound_master_agent:rp_startofpacket
	wire  [72:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> sound_sound_master_agent:rp_data
	wire   [0:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> sound_sound_master_agent:rp_channel
	wire         rsp_mux_src_ready;                                                     // sound_sound_master_agent:rp_ready -> rsp_mux:src_ready
	wire         driver_sound_sound_slave_agent_m0_waitrequest;                         // driver_sound_sound_slave_translator:uav_waitrequest -> driver_sound_sound_slave_agent:m0_waitrequest
	wire   [2:0] driver_sound_sound_slave_agent_m0_burstcount;                          // driver_sound_sound_slave_agent:m0_burstcount -> driver_sound_sound_slave_translator:uav_burstcount
	wire  [31:0] driver_sound_sound_slave_agent_m0_writedata;                           // driver_sound_sound_slave_agent:m0_writedata -> driver_sound_sound_slave_translator:uav_writedata
	wire   [2:0] driver_sound_sound_slave_agent_m0_address;                             // driver_sound_sound_slave_agent:m0_address -> driver_sound_sound_slave_translator:uav_address
	wire         driver_sound_sound_slave_agent_m0_write;                               // driver_sound_sound_slave_agent:m0_write -> driver_sound_sound_slave_translator:uav_write
	wire         driver_sound_sound_slave_agent_m0_lock;                                // driver_sound_sound_slave_agent:m0_lock -> driver_sound_sound_slave_translator:uav_lock
	wire         driver_sound_sound_slave_agent_m0_read;                                // driver_sound_sound_slave_agent:m0_read -> driver_sound_sound_slave_translator:uav_read
	wire  [31:0] driver_sound_sound_slave_agent_m0_readdata;                            // driver_sound_sound_slave_translator:uav_readdata -> driver_sound_sound_slave_agent:m0_readdata
	wire         driver_sound_sound_slave_agent_m0_readdatavalid;                       // driver_sound_sound_slave_translator:uav_readdatavalid -> driver_sound_sound_slave_agent:m0_readdatavalid
	wire         driver_sound_sound_slave_agent_m0_debugaccess;                         // driver_sound_sound_slave_agent:m0_debugaccess -> driver_sound_sound_slave_translator:uav_debugaccess
	wire   [3:0] driver_sound_sound_slave_agent_m0_byteenable;                          // driver_sound_sound_slave_agent:m0_byteenable -> driver_sound_sound_slave_translator:uav_byteenable
	wire         driver_sound_sound_slave_agent_rf_source_endofpacket;                  // driver_sound_sound_slave_agent:rf_source_endofpacket -> driver_sound_sound_slave_agent_rsp_fifo:in_endofpacket
	wire         driver_sound_sound_slave_agent_rf_source_valid;                        // driver_sound_sound_slave_agent:rf_source_valid -> driver_sound_sound_slave_agent_rsp_fifo:in_valid
	wire         driver_sound_sound_slave_agent_rf_source_startofpacket;                // driver_sound_sound_slave_agent:rf_source_startofpacket -> driver_sound_sound_slave_agent_rsp_fifo:in_startofpacket
	wire  [73:0] driver_sound_sound_slave_agent_rf_source_data;                         // driver_sound_sound_slave_agent:rf_source_data -> driver_sound_sound_slave_agent_rsp_fifo:in_data
	wire         driver_sound_sound_slave_agent_rf_source_ready;                        // driver_sound_sound_slave_agent_rsp_fifo:in_ready -> driver_sound_sound_slave_agent:rf_source_ready
	wire         driver_sound_sound_slave_agent_rsp_fifo_out_endofpacket;               // driver_sound_sound_slave_agent_rsp_fifo:out_endofpacket -> driver_sound_sound_slave_agent:rf_sink_endofpacket
	wire         driver_sound_sound_slave_agent_rsp_fifo_out_valid;                     // driver_sound_sound_slave_agent_rsp_fifo:out_valid -> driver_sound_sound_slave_agent:rf_sink_valid
	wire         driver_sound_sound_slave_agent_rsp_fifo_out_startofpacket;             // driver_sound_sound_slave_agent_rsp_fifo:out_startofpacket -> driver_sound_sound_slave_agent:rf_sink_startofpacket
	wire  [73:0] driver_sound_sound_slave_agent_rsp_fifo_out_data;                      // driver_sound_sound_slave_agent_rsp_fifo:out_data -> driver_sound_sound_slave_agent:rf_sink_data
	wire         driver_sound_sound_slave_agent_rsp_fifo_out_ready;                     // driver_sound_sound_slave_agent:rf_sink_ready -> driver_sound_sound_slave_agent_rsp_fifo:out_ready
	wire         driver_sound_sound_slave_agent_rdata_fifo_src_valid;                   // driver_sound_sound_slave_agent:rdata_fifo_src_valid -> driver_sound_sound_slave_agent_rdata_fifo:in_valid
	wire  [33:0] driver_sound_sound_slave_agent_rdata_fifo_src_data;                    // driver_sound_sound_slave_agent:rdata_fifo_src_data -> driver_sound_sound_slave_agent_rdata_fifo:in_data
	wire         driver_sound_sound_slave_agent_rdata_fifo_src_ready;                   // driver_sound_sound_slave_agent_rdata_fifo:in_ready -> driver_sound_sound_slave_agent:rdata_fifo_src_ready
	wire         driver_sound_sound_slave_agent_rdata_fifo_out_valid;                   // driver_sound_sound_slave_agent_rdata_fifo:out_valid -> driver_sound_sound_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] driver_sound_sound_slave_agent_rdata_fifo_out_data;                    // driver_sound_sound_slave_agent_rdata_fifo:out_data -> driver_sound_sound_slave_agent:rdata_fifo_sink_data
	wire         driver_sound_sound_slave_agent_rdata_fifo_out_ready;                   // driver_sound_sound_slave_agent:rdata_fifo_sink_ready -> driver_sound_sound_slave_agent_rdata_fifo:out_ready
	wire         cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> driver_sound_sound_slave_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> driver_sound_sound_slave_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> driver_sound_sound_slave_agent:cp_startofpacket
	wire  [72:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> driver_sound_sound_slave_agent:cp_data
	wire   [0:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> driver_sound_sound_slave_agent:cp_channel
	wire         cmd_mux_src_ready;                                                     // driver_sound_sound_slave_agent:cp_ready -> cmd_mux:src_ready
	wire         sound_sound_master_agent_cp_endofpacket;                               // sound_sound_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sound_sound_master_agent_cp_valid;                                     // sound_sound_master_agent:cp_valid -> router:sink_valid
	wire         sound_sound_master_agent_cp_startofpacket;                             // sound_sound_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [72:0] sound_sound_master_agent_cp_data;                                      // sound_sound_master_agent:cp_data -> router:sink_data
	wire         sound_sound_master_agent_cp_ready;                                     // router:sink_ready -> sound_sound_master_agent:cp_ready
	wire         router_src_endofpacket;                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         router_src_valid;                                                      // router:src_valid -> cmd_demux:sink_valid
	wire         router_src_startofpacket;                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [72:0] router_src_data;                                                       // router:src_data -> cmd_demux:sink_data
	wire   [0:0] router_src_channel;                                                    // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_ready;                                                      // cmd_demux:sink_ready -> router:src_ready
	wire         driver_sound_sound_slave_agent_rp_endofpacket;                         // driver_sound_sound_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         driver_sound_sound_slave_agent_rp_valid;                               // driver_sound_sound_slave_agent:rp_valid -> router_001:sink_valid
	wire         driver_sound_sound_slave_agent_rp_startofpacket;                       // driver_sound_sound_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [72:0] driver_sound_sound_slave_agent_rp_data;                                // driver_sound_sound_slave_agent:rp_data -> router_001:sink_data
	wire         driver_sound_sound_slave_agent_rp_ready;                               // router_001:sink_ready -> driver_sound_sound_slave_agent:rp_ready
	wire         router_001_src_endofpacket;                                            // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_001_src_valid;                                                  // router_001:src_valid -> rsp_demux:sink_valid
	wire         router_001_src_startofpacket;                                          // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [72:0] router_001_src_data;                                                   // router_001:src_data -> rsp_demux:sink_data
	wire   [0:0] router_001_src_channel;                                                // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_ready;                                                  // rsp_demux:sink_ready -> router_001:src_ready
	wire         cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire         cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire  [72:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire   [0:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire         crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire         crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [72:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire   [0:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire         rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire         rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_001:in_valid
	wire         rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [72:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_001:in_data
	wire   [0:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_src0_ready;                                                  // crosser_001:in_ready -> rsp_demux:src0_ready
	wire         crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         crosser_001_out_valid;                                                 // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire         crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [72:0] crosser_001_out_data;                                                  // crosser_001:out_data -> rsp_mux:sink0_data
	wire   [0:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire         crosser_001_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_001:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (3),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (3),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sound_sound_master_translator (
		.clk                      (clk_sys_clk_clk),                                                       //                       clk.clk
		.reset                    (sound_reset_sink_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address              (sound_sound_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sound_sound_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sound_sound_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sound_sound_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sound_sound_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sound_sound_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sound_sound_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sound_sound_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sound_sound_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sound_sound_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sound_sound_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sound_sound_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sound_sound_master_waitrequest),                                        //                          .waitrequest
		.av_write                 (sound_sound_master_write),                                              //                          .write
		.av_writedata             (sound_sound_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                  //               (terminated)
		.av_byteenable            (4'b1111),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                  //               (terminated)
		.av_begintransfer         (1'b0),                                                                  //               (terminated)
		.av_chipselect            (1'b0),                                                                  //               (terminated)
		.av_read                  (1'b0),                                                                  //               (terminated)
		.av_readdata              (),                                                                      //               (terminated)
		.av_readdatavalid         (),                                                                      //               (terminated)
		.av_lock                  (1'b0),                                                                  //               (terminated)
		.av_debugaccess           (1'b0),                                                                  //               (terminated)
		.uav_clken                (),                                                                      //               (terminated)
		.av_clken                 (1'b1),                                                                  //               (terminated)
		.uav_response             (2'b00),                                                                 //               (terminated)
		.av_response              (),                                                                      //               (terminated)
		.uav_writeresponserequest (),                                                                      //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                  //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid    ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (3),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) driver_sound_sound_slave_translator (
		.clk                      (clk_sound_clk_clk),                                    //                      clk.clk
		.reset                    (driver_sound_reset_sound_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (driver_sound_sound_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (driver_sound_sound_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (driver_sound_sound_slave_agent_m0_read),               //                         .read
		.uav_write                (driver_sound_sound_slave_agent_m0_write),              //                         .write
		.uav_waitrequest          (driver_sound_sound_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (driver_sound_sound_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (driver_sound_sound_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (driver_sound_sound_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (driver_sound_sound_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (driver_sound_sound_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (driver_sound_sound_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_write                 (driver_sound_sound_slave_write),                       //      avalon_anti_slave_0.write
		.av_writedata             (driver_sound_sound_slave_writedata),                   //                         .writedata
		.av_address               (),                                                     //              (terminated)
		.av_read                  (),                                                     //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),                 //              (terminated)
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_chipselect            (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (63),
		.PKT_PROTECTION_L          (61),
		.PKT_BEGIN_BURST           (56),
		.PKT_BURSTWRAP_H           (48),
		.PKT_BURSTWRAP_L           (48),
		.PKT_BURST_SIZE_H          (51),
		.PKT_BURST_SIZE_L          (49),
		.PKT_BURST_TYPE_H          (53),
		.PKT_BURST_TYPE_L          (52),
		.PKT_BYTE_CNT_H            (47),
		.PKT_BYTE_CNT_L            (45),
		.PKT_ADDR_H                (38),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (39),
		.PKT_TRANS_POSTED          (40),
		.PKT_TRANS_WRITE           (41),
		.PKT_TRANS_READ            (42),
		.PKT_TRANS_LOCK            (43),
		.PKT_TRANS_EXCLUSIVE       (44),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (58),
		.PKT_DEST_ID_H             (59),
		.PKT_DEST_ID_L             (59),
		.PKT_THREAD_ID_H           (60),
		.PKT_THREAD_ID_L           (60),
		.PKT_CACHE_H               (67),
		.PKT_CACHE_L               (64),
		.PKT_DATA_SIDEBAND_H       (55),
		.PKT_DATA_SIDEBAND_L       (55),
		.PKT_QOS_H                 (57),
		.PKT_QOS_L                 (57),
		.PKT_ADDR_SIDEBAND_H       (54),
		.PKT_ADDR_SIDEBAND_L       (54),
		.PKT_RESPONSE_STATUS_H     (69),
		.PKT_RESPONSE_STATUS_L     (68),
		.PKT_ORI_BURST_SIZE_L      (70),
		.PKT_ORI_BURST_SIZE_H      (72),
		.ST_DATA_W                 (73),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sound_sound_master_agent (
		.clk                     (clk_sys_clk_clk),                                                       //       clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address              (sound_sound_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sound_sound_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sound_sound_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sound_sound_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sound_sound_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sound_sound_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sound_sound_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sound_sound_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sound_sound_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sound_sound_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sound_sound_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sound_sound_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sound_sound_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sound_sound_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sound_sound_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sound_sound_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                     //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                      //          .data
		.rp_channel              (rsp_mux_src_channel),                                                   //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                     //          .ready
		.av_response             (),                                                                      // (terminated)
		.av_writeresponserequest (1'b0),                                                                  // (terminated)
		.av_writeresponsevalid   ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (56),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (38),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (39),
		.PKT_TRANS_POSTED          (40),
		.PKT_TRANS_WRITE           (41),
		.PKT_TRANS_READ            (42),
		.PKT_TRANS_LOCK            (43),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (58),
		.PKT_DEST_ID_H             (59),
		.PKT_DEST_ID_L             (59),
		.PKT_BURSTWRAP_H           (48),
		.PKT_BURSTWRAP_L           (48),
		.PKT_BYTE_CNT_H            (47),
		.PKT_BYTE_CNT_L            (45),
		.PKT_PROTECTION_H          (63),
		.PKT_PROTECTION_L          (61),
		.PKT_RESPONSE_STATUS_H     (69),
		.PKT_RESPONSE_STATUS_L     (68),
		.PKT_BURST_SIZE_H          (51),
		.PKT_BURST_SIZE_L          (49),
		.PKT_ORI_BURST_SIZE_L      (70),
		.PKT_ORI_BURST_SIZE_H      (72),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (73),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) driver_sound_sound_slave_agent (
		.clk                     (clk_sound_clk_clk),                                         //             clk.clk
		.reset                   (driver_sound_reset_sound_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (driver_sound_sound_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (driver_sound_sound_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (driver_sound_sound_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (driver_sound_sound_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (driver_sound_sound_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (driver_sound_sound_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (driver_sound_sound_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (driver_sound_sound_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (driver_sound_sound_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (driver_sound_sound_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (driver_sound_sound_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (driver_sound_sound_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (driver_sound_sound_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (driver_sound_sound_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (driver_sound_sound_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (driver_sound_sound_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (driver_sound_sound_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (driver_sound_sound_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (driver_sound_sound_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (driver_sound_sound_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (driver_sound_sound_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (driver_sound_sound_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (driver_sound_sound_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (driver_sound_sound_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (driver_sound_sound_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (driver_sound_sound_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (driver_sound_sound_slave_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (driver_sound_sound_slave_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (driver_sound_sound_slave_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (driver_sound_sound_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (driver_sound_sound_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (driver_sound_sound_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (74),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) driver_sound_sound_slave_agent_rsp_fifo (
		.clk               (clk_sound_clk_clk),                                         //       clk.clk
		.reset             (driver_sound_reset_sound_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (driver_sound_sound_slave_agent_rf_source_data),             //        in.data
		.in_valid          (driver_sound_sound_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (driver_sound_sound_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (driver_sound_sound_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (driver_sound_sound_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (driver_sound_sound_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (driver_sound_sound_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (driver_sound_sound_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (driver_sound_sound_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (driver_sound_sound_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) driver_sound_sound_slave_agent_rdata_fifo (
		.clk               (clk_sound_clk_clk),                                    //       clk.clk
		.reset             (driver_sound_reset_sound_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (driver_sound_sound_slave_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (driver_sound_sound_slave_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (driver_sound_sound_slave_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (driver_sound_sound_slave_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (driver_sound_sound_slave_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (driver_sound_sound_slave_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	system_mm_interconnect_3_router router (
		.sink_ready         (sound_sound_master_agent_cp_ready),            //      sink.ready
		.sink_valid         (sound_sound_master_agent_cp_valid),            //          .valid
		.sink_data          (sound_sound_master_agent_cp_data),             //          .data
		.sink_startofpacket (sound_sound_master_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sound_sound_master_agent_cp_endofpacket),      //          .endofpacket
		.clk                (clk_sys_clk_clk),                              //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (driver_sound_sound_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (driver_sound_sound_slave_agent_rp_valid),              //          .valid
		.sink_data          (driver_sound_sound_slave_agent_rp_data),               //          .data
		.sink_startofpacket (driver_sound_sound_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (driver_sound_sound_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_sound_clk_clk),                                    //       clk.clk
		.reset              (driver_sound_reset_sound_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	system_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (clk_sys_clk_clk),                              //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                             //      sink.ready
		.sink_channel       (router_src_channel),                           //          .channel
		.sink_data          (router_src_data),                              //          .data
		.sink_startofpacket (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk_sound_clk_clk),                                    //       clk.clk
		.reset               (driver_sound_reset_sound_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //          .valid
		.src_data            (cmd_mux_src_data),                                     //          .data
		.src_channel         (cmd_mux_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clk_sound_clk_clk),                                    //       clk.clk
		.reset              (driver_sound_reset_sound_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                 //      sink.ready
		.sink_channel       (router_001_src_channel),                               //          .channel
		.sink_data          (router_001_src_data),                                  //          .data
		.sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_001_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                            //          .endofpacket
	);

	system_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (clk_sys_clk_clk),                              //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                        //          .valid
		.sink0_channel       (crosser_001_out_channel),                      //          .channel
		.sink0_data          (crosser_001_out_data),                         //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                   //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (73),
		.BITS_PER_SYMBOL     (73),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_sys_clk_clk),                                      //        in_clk.clk
		.in_reset          (sound_reset_sink_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_sound_clk_clk),                                    //       out_clk.clk
		.out_reset         (driver_sound_reset_sound_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                               //              .channel
		.in_data           (cmd_demux_src0_data),                                  //              .data
		.out_ready         (crosser_out_ready),                                    //           out.ready
		.out_valid         (crosser_out_valid),                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                  //              .channel
		.out_data          (crosser_out_data),                                     //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (73),
		.BITS_PER_SYMBOL     (73),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_sound_clk_clk),                                    //        in_clk.clk
		.in_reset          (driver_sound_reset_sound_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_sys_clk_clk),                                      //       out_clk.clk
		.out_reset         (sound_reset_sink_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                 //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                 //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                           //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                               //              .channel
		.in_data           (rsp_demux_src0_data),                                  //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

endmodule
