// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2021.03.08.12:40:52

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        clk_sys_clk_clk,                              //                            clk_sys_clk.clk
		input  wire        clk_vga_clk_clk,                              //                            clk_vga_clk.clk
		input  wire        ao486_reset_sink_reset_bridge_in_reset_reset, // ao486_reset_sink_reset_bridge_in_reset.reset
		input  wire        nios2_reset_n_reset_bridge_in_reset_reset,    //    nios2_reset_n_reset_bridge_in_reset.reset
		input  wire        vga_reset_sink_reset_bridge_in_reset_reset,   //   vga_reset_sink_reset_bridge_in_reset.reset
		input  wire [15:0] ao486_avalon_io_address,                      //                        ao486_avalon_io.address
		output wire        ao486_avalon_io_waitrequest,                  //                                       .waitrequest
		input  wire [3:0]  ao486_avalon_io_byteenable,                   //                                       .byteenable
		input  wire        ao486_avalon_io_read,                         //                                       .read
		output wire [31:0] ao486_avalon_io_readdata,                     //                                       .readdata
		output wire        ao486_avalon_io_readdatavalid,                //                                       .readdatavalid
		input  wire        ao486_avalon_io_write,                        //                                       .write
		input  wire [31:0] ao486_avalon_io_writedata,                    //                                       .writedata
		input  wire [31:0] driver_sd_avalon_master_0_address,            //              driver_sd_avalon_master_0.address
		output wire        driver_sd_avalon_master_0_waitrequest,        //                                       .waitrequest
		input  wire        driver_sd_avalon_master_0_read,               //                                       .read
		output wire [31:0] driver_sd_avalon_master_0_readdata,           //                                       .readdata
		output wire        driver_sd_avalon_master_0_readdatavalid,      //                                       .readdatavalid
		input  wire        driver_sd_avalon_master_0_write,              //                                       .write
		input  wire [31:0] driver_sd_avalon_master_0_writedata,          //                                       .writedata
		input  wire [31:0] floppy_avalon_master_address,                 //                   floppy_avalon_master.address
		output wire        floppy_avalon_master_waitrequest,             //                                       .waitrequest
		input  wire        floppy_avalon_master_read,                    //                                       .read
		output wire [31:0] floppy_avalon_master_readdata,                //                                       .readdata
		output wire        floppy_avalon_master_readdatavalid,           //                                       .readdatavalid
		input  wire        floppy_avalon_master_write,                   //                                       .write
		input  wire [31:0] floppy_avalon_master_writedata,               //                                       .writedata
		input  wire [31:0] hdd_avalon_master_address,                    //                      hdd_avalon_master.address
		output wire        hdd_avalon_master_waitrequest,                //                                       .waitrequest
		input  wire        hdd_avalon_master_read,                       //                                       .read
		output wire [31:0] hdd_avalon_master_readdata,                   //                                       .readdata
		output wire        hdd_avalon_master_readdatavalid,              //                                       .readdatavalid
		input  wire        hdd_avalon_master_write,                      //                                       .write
		input  wire [31:0] hdd_avalon_master_writedata,                  //                                       .writedata
		input  wire [27:0] nios2_data_master_address,                    //                      nios2_data_master.address
		output wire        nios2_data_master_waitrequest,                //                                       .waitrequest
		input  wire [3:0]  nios2_data_master_byteenable,                 //                                       .byteenable
		input  wire        nios2_data_master_read,                       //                                       .read
		output wire [31:0] nios2_data_master_readdata,                   //                                       .readdata
		input  wire        nios2_data_master_write,                      //                                       .write
		input  wire [31:0] nios2_data_master_writedata,                  //                                       .writedata
		input  wire        nios2_data_master_debugaccess,                //                                       .debugaccess
		input  wire [16:0] nios2_instruction_master_address,             //               nios2_instruction_master.address
		output wire        nios2_instruction_master_waitrequest,         //                                       .waitrequest
		input  wire        nios2_instruction_master_read,                //                                       .read
		output wire [31:0] nios2_instruction_master_readdata,            //                                       .readdata
		input  wire [31:0] pc_bus_avalon_sdram_master_address,           //             pc_bus_avalon_sdram_master.address
		output wire        pc_bus_avalon_sdram_master_waitrequest,       //                                       .waitrequest
		input  wire [2:0]  pc_bus_avalon_sdram_master_burstcount,        //                                       .burstcount
		input  wire [3:0]  pc_bus_avalon_sdram_master_byteenable,        //                                       .byteenable
		input  wire        pc_bus_avalon_sdram_master_read,              //                                       .read
		output wire [31:0] pc_bus_avalon_sdram_master_readdata,          //                                       .readdata
		output wire        pc_bus_avalon_sdram_master_readdatavalid,     //                                       .readdatavalid
		input  wire        pc_bus_avalon_sdram_master_write,             //                                       .write
		input  wire [31:0] pc_bus_avalon_sdram_master_writedata,         //                                       .writedata
		input  wire [31:0] pc_dma_avalon_master_address,                 //                   pc_dma_avalon_master.address
		output wire        pc_dma_avalon_master_waitrequest,             //                                       .waitrequest
		input  wire        pc_dma_avalon_master_read,                    //                                       .read
		output wire [7:0]  pc_dma_avalon_master_readdata,                //                                       .readdata
		output wire        pc_dma_avalon_master_readdatavalid,           //                                       .readdatavalid
		input  wire        pc_dma_avalon_master_write,                   //                                       .write
		input  wire [7:0]  pc_dma_avalon_master_writedata,               //                                       .writedata
		output wire [1:0]  driver_sd_avalon_slave_0_address,             //               driver_sd_avalon_slave_0.address
		output wire        driver_sd_avalon_slave_0_write,               //                                       .write
		output wire        driver_sd_avalon_slave_0_read,                //                                       .read
		input  wire [31:0] driver_sd_avalon_slave_0_readdata,            //                                       .readdata
		output wire [31:0] driver_sd_avalon_slave_0_writedata,           //                                       .writedata
		output wire [2:0]  floppy_io_address,                            //                              floppy_io.address
		output wire        floppy_io_write,                              //                                       .write
		output wire        floppy_io_read,                               //                                       .read
		input  wire [7:0]  floppy_io_readdata,                           //                                       .readdata
		output wire [7:0]  floppy_io_writedata,                          //                                       .writedata
		output wire [3:0]  floppy_mgmt_address,                          //                            floppy_mgmt.address
		output wire        floppy_mgmt_write,                            //                                       .write
		output wire [31:0] floppy_mgmt_writedata,                        //                                       .writedata
		output wire [8:0]  floppy_sd_slave_address,                      //                        floppy_sd_slave.address
		output wire        floppy_sd_slave_write,                        //                                       .write
		output wire        floppy_sd_slave_read,                         //                                       .read
		input  wire [7:0]  floppy_sd_slave_readdata,                     //                                       .readdata
		output wire [7:0]  floppy_sd_slave_writedata,                    //                                       .writedata
		output wire [0:0]  hdd_io_address,                               //                                 hdd_io.address
		output wire        hdd_io_write,                                 //                                       .write
		output wire        hdd_io_read,                                  //                                       .read
		input  wire [31:0] hdd_io_readdata,                              //                                       .readdata
		output wire [31:0] hdd_io_writedata,                             //                                       .writedata
		output wire [3:0]  hdd_io_byteenable,                            //                                       .byteenable
		output wire [2:0]  hdd_mgmt_address,                             //                               hdd_mgmt.address
		output wire        hdd_mgmt_write,                               //                                       .write
		output wire [31:0] hdd_mgmt_writedata,                           //                                       .writedata
		output wire [8:0]  hdd_sd_slave_address,                         //                           hdd_sd_slave.address
		output wire        hdd_sd_slave_write,                           //                                       .write
		output wire        hdd_sd_slave_read,                            //                                       .read
		input  wire [31:0] hdd_sd_slave_readdata,                        //                                       .readdata
		output wire [31:0] hdd_sd_slave_writedata,                       //                                       .writedata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,          //            jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,            //                                       .write
		output wire        jtag_uart_avalon_jtag_slave_read,             //                                       .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,         //                                       .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,        //                                       .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,      //                                       .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,       //                                       .chipselect
		output wire [8:0]  nios2_jtag_debug_module_address,              //                nios2_jtag_debug_module.address
		output wire        nios2_jtag_debug_module_write,                //                                       .write
		output wire        nios2_jtag_debug_module_read,                 //                                       .read
		input  wire [31:0] nios2_jtag_debug_module_readdata,             //                                       .readdata
		output wire [31:0] nios2_jtag_debug_module_writedata,            //                                       .writedata
		output wire [3:0]  nios2_jtag_debug_module_byteenable,           //                                       .byteenable
		input  wire        nios2_jtag_debug_module_waitrequest,          //                                       .waitrequest
		output wire        nios2_jtag_debug_module_debugaccess,          //                                       .debugaccess
		output wire [12:0] onchip_for_nios2_s1_address,                  //                    onchip_for_nios2_s1.address
		output wire        onchip_for_nios2_s1_write,                    //                                       .write
		input  wire [31:0] onchip_for_nios2_s1_readdata,                 //                                       .readdata
		output wire [31:0] onchip_for_nios2_s1_writedata,                //                                       .writedata
		output wire [3:0]  onchip_for_nios2_s1_byteenable,               //                                       .byteenable
		output wire        onchip_for_nios2_s1_chipselect,               //                                       .chipselect
		output wire        onchip_for_nios2_s1_clken,                    //                                       .clken
		output wire [1:0]  pc_bus_ctrl_address,                          //                            pc_bus_ctrl.address
		output wire        pc_bus_ctrl_write,                            //                                       .write
		output wire [31:0] pc_bus_ctrl_writedata,                        //                                       .writedata
		output wire [4:0]  pc_dma_master_address,                        //                          pc_dma_master.address
		output wire        pc_dma_master_write,                          //                                       .write
		output wire        pc_dma_master_read,                           //                                       .read
		input  wire [7:0]  pc_dma_master_readdata,                       //                                       .readdata
		output wire [7:0]  pc_dma_master_writedata,                      //                                       .writedata
		output wire [3:0]  pc_dma_page_address,                          //                            pc_dma_page.address
		output wire        pc_dma_page_write,                            //                                       .write
		output wire        pc_dma_page_read,                             //                                       .read
		input  wire [7:0]  pc_dma_page_readdata,                         //                                       .readdata
		output wire [7:0]  pc_dma_page_writedata,                        //                                       .writedata
		output wire [3:0]  pc_dma_slave_address,                         //                           pc_dma_slave.address
		output wire        pc_dma_slave_write,                           //                                       .write
		output wire        pc_dma_slave_read,                            //                                       .read
		input  wire [7:0]  pc_dma_slave_readdata,                        //                                       .readdata
		output wire [7:0]  pc_dma_slave_writedata,                       //                                       .writedata
		output wire [0:0]  pic_master_address,                           //                             pic_master.address
		output wire        pic_master_write,                             //                                       .write
		output wire        pic_master_read,                              //                                       .read
		input  wire [7:0]  pic_master_readdata,                          //                                       .readdata
		output wire [7:0]  pic_master_writedata,                         //                                       .writedata
		output wire [0:0]  pic_slave_address,                            //                              pic_slave.address
		output wire        pic_slave_write,                              //                                       .write
		output wire        pic_slave_read,                               //                                       .read
		input  wire [7:0]  pic_slave_readdata,                           //                                       .readdata
		output wire [7:0]  pic_slave_writedata,                          //                                       .writedata
		output wire [1:0]  pio_input_s1_address,                         //                           pio_input_s1.address
		output wire        pio_input_s1_write,                           //                                       .write
		input  wire [31:0] pio_input_s1_readdata,                        //                                       .readdata
		output wire [31:0] pio_input_s1_writedata,                       //                                       .writedata
		output wire        pio_input_s1_chipselect,                      //                                       .chipselect
		output wire [1:0]  pio_output_s1_address,                        //                          pio_output_s1.address
		output wire        pio_output_s1_write,                          //                                       .write
		input  wire [31:0] pio_output_s1_readdata,                       //                                       .readdata
		output wire [31:0] pio_output_s1_writedata,                      //                                       .writedata
		output wire        pio_output_s1_chipselect,                     //                                       .chipselect
		output wire [1:0]  pit_io_address,                               //                                 pit_io.address
		output wire        pit_io_write,                                 //                                       .write
		output wire        pit_io_read,                                  //                                       .read
		input  wire [7:0]  pit_io_readdata,                              //                                       .readdata
		output wire [7:0]  pit_io_writedata,                             //                                       .writedata
		output wire [0:0]  pit_mgmt_address,                             //                               pit_mgmt.address
		output wire        pit_mgmt_write,                               //                                       .write
		output wire [31:0] pit_mgmt_writedata,                           //                                       .writedata
		output wire [2:0]  ps2_io_address,                               //                                 ps2_io.address
		output wire        ps2_io_write,                                 //                                       .write
		output wire        ps2_io_read,                                  //                                       .read
		input  wire [7:0]  ps2_io_readdata,                              //                                       .readdata
		output wire [7:0]  ps2_io_writedata,                             //                                       .writedata
		output wire [3:0]  ps2_sysctl_address,                           //                             ps2_sysctl.address
		output wire        ps2_sysctl_write,                             //                                       .write
		output wire        ps2_sysctl_read,                              //                                       .read
		input  wire [7:0]  ps2_sysctl_readdata,                          //                                       .readdata
		output wire [7:0]  ps2_sysctl_writedata,                         //                                       .writedata
		output wire [0:0]  rtc_io_address,                               //                                 rtc_io.address
		output wire        rtc_io_write,                                 //                                       .write
		output wire        rtc_io_read,                                  //                                       .read
		input  wire [7:0]  rtc_io_readdata,                              //                                       .readdata
		output wire [7:0]  rtc_io_writedata,                             //                                       .writedata
		output wire [7:0]  rtc_mgmt_address,                             //                               rtc_mgmt.address
		output wire        rtc_mgmt_write,                               //                                       .write
		output wire [31:0] rtc_mgmt_writedata,                           //                                       .writedata
		output wire [24:0] sdram_s1_address,                             //                               sdram_s1.address
		output wire        sdram_s1_write,                               //                                       .write
		output wire        sdram_s1_read,                                //                                       .read
		input  wire [31:0] sdram_s1_readdata,                            //                                       .readdata
		output wire [31:0] sdram_s1_writedata,                           //                                       .writedata
		output wire [3:0]  sdram_s1_byteenable,                          //                                       .byteenable
		input  wire        sdram_s1_readdatavalid,                       //                                       .readdatavalid
		input  wire        sdram_s1_waitrequest,                         //                                       .waitrequest
		output wire        sdram_s1_chipselect,                          //                                       .chipselect
		output wire [0:0]  sound_fm_address,                             //                               sound_fm.address
		output wire        sound_fm_write,                               //                                       .write
		output wire        sound_fm_read,                                //                                       .read
		input  wire [7:0]  sound_fm_readdata,                            //                                       .readdata
		output wire [7:0]  sound_fm_writedata,                           //                                       .writedata
		output wire [3:0]  sound_io_address,                             //                               sound_io.address
		output wire        sound_io_write,                               //                                       .write
		output wire        sound_io_read,                                //                                       .read
		input  wire [7:0]  sound_io_readdata,                            //                                       .readdata
		output wire [7:0]  sound_io_writedata,                           //                                       .writedata
		output wire [8:0]  sound_mgmt_address,                           //                             sound_mgmt.address
		output wire        sound_mgmt_write,                             //                                       .write
		output wire [31:0] sound_mgmt_writedata,                         //                                       .writedata
		output wire [3:0]  vga_io_b_address,                             //                               vga_io_b.address
		output wire        vga_io_b_write,                               //                                       .write
		output wire        vga_io_b_read,                                //                                       .read
		input  wire [7:0]  vga_io_b_readdata,                            //                                       .readdata
		output wire [7:0]  vga_io_b_writedata,                           //                                       .writedata
		output wire [3:0]  vga_io_c_address,                             //                               vga_io_c.address
		output wire        vga_io_c_write,                               //                                       .write
		output wire        vga_io_c_read,                                //                                       .read
		input  wire [7:0]  vga_io_c_readdata,                            //                                       .readdata
		output wire [7:0]  vga_io_c_writedata,                           //                                       .writedata
		output wire [3:0]  vga_io_d_address,                             //                               vga_io_d.address
		output wire        vga_io_d_write,                               //                                       .write
		output wire        vga_io_d_read,                                //                                       .read
		input  wire [7:0]  vga_io_d_readdata,                            //                                       .readdata
		output wire [7:0]  vga_io_d_writedata,                           //                                       .writedata
		output wire [7:0]  vga_sys_address,                              //                                vga_sys.address
		output wire        vga_sys_write,                                //                                       .write
		output wire        vga_sys_read,                                 //                                       .read
		input  wire [31:0] vga_sys_readdata,                             //                                       .readdata
		output wire [31:0] vga_sys_writedata                             //                                       .writedata
	);

	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;               // nios2_data_master_agent:av_waitrequest -> nios2_data_master_translator:uav_waitrequest
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;                // nios2_data_master_translator:uav_burstcount -> nios2_data_master_agent:av_burstcount
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;                 // nios2_data_master_translator:uav_writedata -> nios2_data_master_agent:av_writedata
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;                   // nios2_data_master_translator:uav_address -> nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                      // nios2_data_master_translator:uav_lock -> nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                     // nios2_data_master_translator:uav_write -> nios2_data_master_agent:av_write
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                      // nios2_data_master_translator:uav_read -> nios2_data_master_agent:av_read
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;                  // nios2_data_master_agent:av_readdata -> nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;               // nios2_data_master_translator:uav_debugaccess -> nios2_data_master_agent:av_debugaccess
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;                // nios2_data_master_translator:uav_byteenable -> nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;             // nios2_data_master_agent:av_readdatavalid -> nios2_data_master_translator:uav_readdatavalid
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> nios2_data_master_agent:rp_endofpacket
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> nios2_data_master_agent:rp_valid
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> nios2_data_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> nios2_data_master_agent:rp_data
	wire   [31:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> nios2_data_master_agent:rp_channel
	wire          rsp_mux_src_ready;                                                                // nios2_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire          floppy_avalon_master_translator_avalon_universal_master_0_waitrequest;            // floppy_avalon_master_agent:av_waitrequest -> floppy_avalon_master_translator:uav_waitrequest
	wire    [2:0] floppy_avalon_master_translator_avalon_universal_master_0_burstcount;             // floppy_avalon_master_translator:uav_burstcount -> floppy_avalon_master_agent:av_burstcount
	wire   [31:0] floppy_avalon_master_translator_avalon_universal_master_0_writedata;              // floppy_avalon_master_translator:uav_writedata -> floppy_avalon_master_agent:av_writedata
	wire   [31:0] floppy_avalon_master_translator_avalon_universal_master_0_address;                // floppy_avalon_master_translator:uav_address -> floppy_avalon_master_agent:av_address
	wire          floppy_avalon_master_translator_avalon_universal_master_0_lock;                   // floppy_avalon_master_translator:uav_lock -> floppy_avalon_master_agent:av_lock
	wire          floppy_avalon_master_translator_avalon_universal_master_0_write;                  // floppy_avalon_master_translator:uav_write -> floppy_avalon_master_agent:av_write
	wire          floppy_avalon_master_translator_avalon_universal_master_0_read;                   // floppy_avalon_master_translator:uav_read -> floppy_avalon_master_agent:av_read
	wire   [31:0] floppy_avalon_master_translator_avalon_universal_master_0_readdata;               // floppy_avalon_master_agent:av_readdata -> floppy_avalon_master_translator:uav_readdata
	wire          floppy_avalon_master_translator_avalon_universal_master_0_debugaccess;            // floppy_avalon_master_translator:uav_debugaccess -> floppy_avalon_master_agent:av_debugaccess
	wire    [3:0] floppy_avalon_master_translator_avalon_universal_master_0_byteenable;             // floppy_avalon_master_translator:uav_byteenable -> floppy_avalon_master_agent:av_byteenable
	wire          floppy_avalon_master_translator_avalon_universal_master_0_readdatavalid;          // floppy_avalon_master_agent:av_readdatavalid -> floppy_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> floppy_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> floppy_avalon_master_agent:rp_valid
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> floppy_avalon_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> floppy_avalon_master_agent:rp_data
	wire   [31:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> floppy_avalon_master_agent:rp_channel
	wire          rsp_mux_001_src_ready;                                                            // floppy_avalon_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire          hdd_avalon_master_translator_avalon_universal_master_0_waitrequest;               // hdd_avalon_master_agent:av_waitrequest -> hdd_avalon_master_translator:uav_waitrequest
	wire    [2:0] hdd_avalon_master_translator_avalon_universal_master_0_burstcount;                // hdd_avalon_master_translator:uav_burstcount -> hdd_avalon_master_agent:av_burstcount
	wire   [31:0] hdd_avalon_master_translator_avalon_universal_master_0_writedata;                 // hdd_avalon_master_translator:uav_writedata -> hdd_avalon_master_agent:av_writedata
	wire   [31:0] hdd_avalon_master_translator_avalon_universal_master_0_address;                   // hdd_avalon_master_translator:uav_address -> hdd_avalon_master_agent:av_address
	wire          hdd_avalon_master_translator_avalon_universal_master_0_lock;                      // hdd_avalon_master_translator:uav_lock -> hdd_avalon_master_agent:av_lock
	wire          hdd_avalon_master_translator_avalon_universal_master_0_write;                     // hdd_avalon_master_translator:uav_write -> hdd_avalon_master_agent:av_write
	wire          hdd_avalon_master_translator_avalon_universal_master_0_read;                      // hdd_avalon_master_translator:uav_read -> hdd_avalon_master_agent:av_read
	wire   [31:0] hdd_avalon_master_translator_avalon_universal_master_0_readdata;                  // hdd_avalon_master_agent:av_readdata -> hdd_avalon_master_translator:uav_readdata
	wire          hdd_avalon_master_translator_avalon_universal_master_0_debugaccess;               // hdd_avalon_master_translator:uav_debugaccess -> hdd_avalon_master_agent:av_debugaccess
	wire    [3:0] hdd_avalon_master_translator_avalon_universal_master_0_byteenable;                // hdd_avalon_master_translator:uav_byteenable -> hdd_avalon_master_agent:av_byteenable
	wire          hdd_avalon_master_translator_avalon_universal_master_0_readdatavalid;             // hdd_avalon_master_agent:av_readdatavalid -> hdd_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> hdd_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> hdd_avalon_master_agent:rp_valid
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> hdd_avalon_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> hdd_avalon_master_agent:rp_data
	wire   [31:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> hdd_avalon_master_agent:rp_channel
	wire          rsp_mux_002_src_ready;                                                            // hdd_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest;      // pc_bus_avalon_sdram_master_agent:av_waitrequest -> pc_bus_avalon_sdram_master_translator:uav_waitrequest
	wire    [4:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount;       // pc_bus_avalon_sdram_master_translator:uav_burstcount -> pc_bus_avalon_sdram_master_agent:av_burstcount
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata;        // pc_bus_avalon_sdram_master_translator:uav_writedata -> pc_bus_avalon_sdram_master_agent:av_writedata
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address;          // pc_bus_avalon_sdram_master_translator:uav_address -> pc_bus_avalon_sdram_master_agent:av_address
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock;             // pc_bus_avalon_sdram_master_translator:uav_lock -> pc_bus_avalon_sdram_master_agent:av_lock
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write;            // pc_bus_avalon_sdram_master_translator:uav_write -> pc_bus_avalon_sdram_master_agent:av_write
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read;             // pc_bus_avalon_sdram_master_translator:uav_read -> pc_bus_avalon_sdram_master_agent:av_read
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata;         // pc_bus_avalon_sdram_master_agent:av_readdata -> pc_bus_avalon_sdram_master_translator:uav_readdata
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess;      // pc_bus_avalon_sdram_master_translator:uav_debugaccess -> pc_bus_avalon_sdram_master_agent:av_debugaccess
	wire    [3:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable;       // pc_bus_avalon_sdram_master_translator:uav_byteenable -> pc_bus_avalon_sdram_master_agent:av_byteenable
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid;    // pc_bus_avalon_sdram_master_agent:av_readdatavalid -> pc_bus_avalon_sdram_master_translator:uav_readdatavalid
	wire          rsp_mux_003_src_endofpacket;                                                      // rsp_mux_003:src_endofpacket -> pc_bus_avalon_sdram_master_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                            // rsp_mux_003:src_valid -> pc_bus_avalon_sdram_master_agent:rp_valid
	wire          rsp_mux_003_src_startofpacket;                                                    // rsp_mux_003:src_startofpacket -> pc_bus_avalon_sdram_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_003_src_data;                                                             // rsp_mux_003:src_data -> pc_bus_avalon_sdram_master_agent:rp_data
	wire   [31:0] rsp_mux_003_src_channel;                                                          // rsp_mux_003:src_channel -> pc_bus_avalon_sdram_master_agent:rp_channel
	wire          rsp_mux_003_src_ready;                                                            // pc_bus_avalon_sdram_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest;            // pc_dma_avalon_master_agent:av_waitrequest -> pc_dma_avalon_master_translator:uav_waitrequest
	wire    [0:0] pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount;             // pc_dma_avalon_master_translator:uav_burstcount -> pc_dma_avalon_master_agent:av_burstcount
	wire    [7:0] pc_dma_avalon_master_translator_avalon_universal_master_0_writedata;              // pc_dma_avalon_master_translator:uav_writedata -> pc_dma_avalon_master_agent:av_writedata
	wire   [31:0] pc_dma_avalon_master_translator_avalon_universal_master_0_address;                // pc_dma_avalon_master_translator:uav_address -> pc_dma_avalon_master_agent:av_address
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_lock;                   // pc_dma_avalon_master_translator:uav_lock -> pc_dma_avalon_master_agent:av_lock
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_write;                  // pc_dma_avalon_master_translator:uav_write -> pc_dma_avalon_master_agent:av_write
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_read;                   // pc_dma_avalon_master_translator:uav_read -> pc_dma_avalon_master_agent:av_read
	wire    [7:0] pc_dma_avalon_master_translator_avalon_universal_master_0_readdata;               // pc_dma_avalon_master_agent:av_readdata -> pc_dma_avalon_master_translator:uav_readdata
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess;            // pc_dma_avalon_master_translator:uav_debugaccess -> pc_dma_avalon_master_agent:av_debugaccess
	wire    [0:0] pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable;             // pc_dma_avalon_master_translator:uav_byteenable -> pc_dma_avalon_master_agent:av_byteenable
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid;          // pc_dma_avalon_master_agent:av_readdatavalid -> pc_dma_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_004_src_endofpacket;                                                      // rsp_mux_004:src_endofpacket -> pc_dma_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                            // rsp_mux_004:src_valid -> pc_dma_avalon_master_agent:rp_valid
	wire          rsp_mux_004_src_startofpacket;                                                    // rsp_mux_004:src_startofpacket -> pc_dma_avalon_master_agent:rp_startofpacket
	wire   [86:0] rsp_mux_004_src_data;                                                             // rsp_mux_004:src_data -> pc_dma_avalon_master_agent:rp_data
	wire   [31:0] rsp_mux_004_src_channel;                                                          // rsp_mux_004:src_channel -> pc_dma_avalon_master_agent:rp_channel
	wire          rsp_mux_004_src_ready;                                                            // pc_dma_avalon_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_waitrequest;       // driver_sd_avalon_master_0_agent:av_waitrequest -> driver_sd_avalon_master_0_translator:uav_waitrequest
	wire    [2:0] driver_sd_avalon_master_0_translator_avalon_universal_master_0_burstcount;        // driver_sd_avalon_master_0_translator:uav_burstcount -> driver_sd_avalon_master_0_agent:av_burstcount
	wire   [31:0] driver_sd_avalon_master_0_translator_avalon_universal_master_0_writedata;         // driver_sd_avalon_master_0_translator:uav_writedata -> driver_sd_avalon_master_0_agent:av_writedata
	wire   [31:0] driver_sd_avalon_master_0_translator_avalon_universal_master_0_address;           // driver_sd_avalon_master_0_translator:uav_address -> driver_sd_avalon_master_0_agent:av_address
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_lock;              // driver_sd_avalon_master_0_translator:uav_lock -> driver_sd_avalon_master_0_agent:av_lock
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_write;             // driver_sd_avalon_master_0_translator:uav_write -> driver_sd_avalon_master_0_agent:av_write
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_read;              // driver_sd_avalon_master_0_translator:uav_read -> driver_sd_avalon_master_0_agent:av_read
	wire   [31:0] driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdata;          // driver_sd_avalon_master_0_agent:av_readdata -> driver_sd_avalon_master_0_translator:uav_readdata
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_debugaccess;       // driver_sd_avalon_master_0_translator:uav_debugaccess -> driver_sd_avalon_master_0_agent:av_debugaccess
	wire    [3:0] driver_sd_avalon_master_0_translator_avalon_universal_master_0_byteenable;        // driver_sd_avalon_master_0_translator:uav_byteenable -> driver_sd_avalon_master_0_agent:av_byteenable
	wire          driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdatavalid;     // driver_sd_avalon_master_0_agent:av_readdatavalid -> driver_sd_avalon_master_0_translator:uav_readdatavalid
	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;        // nios2_instruction_master_agent:av_waitrequest -> nios2_instruction_master_translator:uav_waitrequest
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;         // nios2_instruction_master_translator:uav_burstcount -> nios2_instruction_master_agent:av_burstcount
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;          // nios2_instruction_master_translator:uav_writedata -> nios2_instruction_master_agent:av_writedata
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;            // nios2_instruction_master_translator:uav_address -> nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;               // nios2_instruction_master_translator:uav_lock -> nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;              // nios2_instruction_master_translator:uav_write -> nios2_instruction_master_agent:av_write
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;               // nios2_instruction_master_translator:uav_read -> nios2_instruction_master_agent:av_read
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;           // nios2_instruction_master_agent:av_readdata -> nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;        // nios2_instruction_master_translator:uav_debugaccess -> nios2_instruction_master_agent:av_debugaccess
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;         // nios2_instruction_master_translator:uav_byteenable -> nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;      // nios2_instruction_master_agent:av_readdatavalid -> nios2_instruction_master_translator:uav_readdatavalid
	wire          rsp_mux_006_src_endofpacket;                                                      // rsp_mux_006:src_endofpacket -> nios2_instruction_master_agent:rp_endofpacket
	wire          rsp_mux_006_src_valid;                                                            // rsp_mux_006:src_valid -> nios2_instruction_master_agent:rp_valid
	wire          rsp_mux_006_src_startofpacket;                                                    // rsp_mux_006:src_startofpacket -> nios2_instruction_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_006_src_data;                                                             // rsp_mux_006:src_data -> nios2_instruction_master_agent:rp_data
	wire   [31:0] rsp_mux_006_src_channel;                                                          // rsp_mux_006:src_channel -> nios2_instruction_master_agent:rp_channel
	wire          rsp_mux_006_src_ready;                                                            // nios2_instruction_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire          ao486_avalon_io_translator_avalon_universal_master_0_waitrequest;                 // ao486_avalon_io_agent:av_waitrequest -> ao486_avalon_io_translator:uav_waitrequest
	wire    [2:0] ao486_avalon_io_translator_avalon_universal_master_0_burstcount;                  // ao486_avalon_io_translator:uav_burstcount -> ao486_avalon_io_agent:av_burstcount
	wire   [31:0] ao486_avalon_io_translator_avalon_universal_master_0_writedata;                   // ao486_avalon_io_translator:uav_writedata -> ao486_avalon_io_agent:av_writedata
	wire   [31:0] ao486_avalon_io_translator_avalon_universal_master_0_address;                     // ao486_avalon_io_translator:uav_address -> ao486_avalon_io_agent:av_address
	wire          ao486_avalon_io_translator_avalon_universal_master_0_lock;                        // ao486_avalon_io_translator:uav_lock -> ao486_avalon_io_agent:av_lock
	wire          ao486_avalon_io_translator_avalon_universal_master_0_write;                       // ao486_avalon_io_translator:uav_write -> ao486_avalon_io_agent:av_write
	wire          ao486_avalon_io_translator_avalon_universal_master_0_read;                        // ao486_avalon_io_translator:uav_read -> ao486_avalon_io_agent:av_read
	wire   [31:0] ao486_avalon_io_translator_avalon_universal_master_0_readdata;                    // ao486_avalon_io_agent:av_readdata -> ao486_avalon_io_translator:uav_readdata
	wire          ao486_avalon_io_translator_avalon_universal_master_0_debugaccess;                 // ao486_avalon_io_translator:uav_debugaccess -> ao486_avalon_io_agent:av_debugaccess
	wire    [3:0] ao486_avalon_io_translator_avalon_universal_master_0_byteenable;                  // ao486_avalon_io_translator:uav_byteenable -> ao486_avalon_io_agent:av_byteenable
	wire          ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid;               // ao486_avalon_io_agent:av_readdatavalid -> ao486_avalon_io_translator:uav_readdatavalid
	wire          nios2_jtag_debug_module_agent_m0_waitrequest;                                     // nios2_jtag_debug_module_translator:uav_waitrequest -> nios2_jtag_debug_module_agent:m0_waitrequest
	wire    [2:0] nios2_jtag_debug_module_agent_m0_burstcount;                                      // nios2_jtag_debug_module_agent:m0_burstcount -> nios2_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] nios2_jtag_debug_module_agent_m0_writedata;                                       // nios2_jtag_debug_module_agent:m0_writedata -> nios2_jtag_debug_module_translator:uav_writedata
	wire   [31:0] nios2_jtag_debug_module_agent_m0_address;                                         // nios2_jtag_debug_module_agent:m0_address -> nios2_jtag_debug_module_translator:uav_address
	wire          nios2_jtag_debug_module_agent_m0_write;                                           // nios2_jtag_debug_module_agent:m0_write -> nios2_jtag_debug_module_translator:uav_write
	wire          nios2_jtag_debug_module_agent_m0_lock;                                            // nios2_jtag_debug_module_agent:m0_lock -> nios2_jtag_debug_module_translator:uav_lock
	wire          nios2_jtag_debug_module_agent_m0_read;                                            // nios2_jtag_debug_module_agent:m0_read -> nios2_jtag_debug_module_translator:uav_read
	wire   [31:0] nios2_jtag_debug_module_agent_m0_readdata;                                        // nios2_jtag_debug_module_translator:uav_readdata -> nios2_jtag_debug_module_agent:m0_readdata
	wire          nios2_jtag_debug_module_agent_m0_readdatavalid;                                   // nios2_jtag_debug_module_translator:uav_readdatavalid -> nios2_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_jtag_debug_module_agent_m0_debugaccess;                                     // nios2_jtag_debug_module_agent:m0_debugaccess -> nios2_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] nios2_jtag_debug_module_agent_m0_byteenable;                                      // nios2_jtag_debug_module_agent:m0_byteenable -> nios2_jtag_debug_module_translator:uav_byteenable
	wire          nios2_jtag_debug_module_agent_rf_source_endofpacket;                              // nios2_jtag_debug_module_agent:rf_source_endofpacket -> nios2_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_jtag_debug_module_agent_rf_source_valid;                                    // nios2_jtag_debug_module_agent:rf_source_valid -> nios2_jtag_debug_module_agent_rsp_fifo:in_valid
	wire          nios2_jtag_debug_module_agent_rf_source_startofpacket;                            // nios2_jtag_debug_module_agent:rf_source_startofpacket -> nios2_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [114:0] nios2_jtag_debug_module_agent_rf_source_data;                                     // nios2_jtag_debug_module_agent:rf_source_data -> nios2_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_jtag_debug_module_agent_rf_source_ready;                                    // nios2_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_jtag_debug_module_agent:rf_source_ready
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                           // nios2_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_jtag_debug_module_agent:rf_sink_endofpacket
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_valid;                                 // nios2_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_jtag_debug_module_agent:rf_sink_valid
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                         // nios2_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [114:0] nios2_jtag_debug_module_agent_rsp_fifo_out_data;                                  // nios2_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_jtag_debug_module_agent:rf_sink_data
	wire          nios2_jtag_debug_module_agent_rsp_fifo_out_ready;                                 // nios2_jtag_debug_module_agent:rf_sink_ready -> nios2_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_jtag_debug_module_agent_rdata_fifo_src_valid;                               // nios2_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] nios2_jtag_debug_module_agent_rdata_fifo_src_data;                                // nios2_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          nios2_jtag_debug_module_agent_rdata_fifo_src_ready;                               // nios2_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> nios2_jtag_debug_module_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> nios2_jtag_debug_module_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> nios2_jtag_debug_module_agent:cp_startofpacket
	wire  [113:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> nios2_jtag_debug_module_agent:cp_data
	wire   [31:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> nios2_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_src_ready;                                                                // nios2_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire          onchip_for_nios2_s1_agent_m0_waitrequest;                                         // onchip_for_nios2_s1_translator:uav_waitrequest -> onchip_for_nios2_s1_agent:m0_waitrequest
	wire    [2:0] onchip_for_nios2_s1_agent_m0_burstcount;                                          // onchip_for_nios2_s1_agent:m0_burstcount -> onchip_for_nios2_s1_translator:uav_burstcount
	wire   [31:0] onchip_for_nios2_s1_agent_m0_writedata;                                           // onchip_for_nios2_s1_agent:m0_writedata -> onchip_for_nios2_s1_translator:uav_writedata
	wire   [31:0] onchip_for_nios2_s1_agent_m0_address;                                             // onchip_for_nios2_s1_agent:m0_address -> onchip_for_nios2_s1_translator:uav_address
	wire          onchip_for_nios2_s1_agent_m0_write;                                               // onchip_for_nios2_s1_agent:m0_write -> onchip_for_nios2_s1_translator:uav_write
	wire          onchip_for_nios2_s1_agent_m0_lock;                                                // onchip_for_nios2_s1_agent:m0_lock -> onchip_for_nios2_s1_translator:uav_lock
	wire          onchip_for_nios2_s1_agent_m0_read;                                                // onchip_for_nios2_s1_agent:m0_read -> onchip_for_nios2_s1_translator:uav_read
	wire   [31:0] onchip_for_nios2_s1_agent_m0_readdata;                                            // onchip_for_nios2_s1_translator:uav_readdata -> onchip_for_nios2_s1_agent:m0_readdata
	wire          onchip_for_nios2_s1_agent_m0_readdatavalid;                                       // onchip_for_nios2_s1_translator:uav_readdatavalid -> onchip_for_nios2_s1_agent:m0_readdatavalid
	wire          onchip_for_nios2_s1_agent_m0_debugaccess;                                         // onchip_for_nios2_s1_agent:m0_debugaccess -> onchip_for_nios2_s1_translator:uav_debugaccess
	wire    [3:0] onchip_for_nios2_s1_agent_m0_byteenable;                                          // onchip_for_nios2_s1_agent:m0_byteenable -> onchip_for_nios2_s1_translator:uav_byteenable
	wire          onchip_for_nios2_s1_agent_rf_source_endofpacket;                                  // onchip_for_nios2_s1_agent:rf_source_endofpacket -> onchip_for_nios2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_for_nios2_s1_agent_rf_source_valid;                                        // onchip_for_nios2_s1_agent:rf_source_valid -> onchip_for_nios2_s1_agent_rsp_fifo:in_valid
	wire          onchip_for_nios2_s1_agent_rf_source_startofpacket;                                // onchip_for_nios2_s1_agent:rf_source_startofpacket -> onchip_for_nios2_s1_agent_rsp_fifo:in_startofpacket
	wire  [114:0] onchip_for_nios2_s1_agent_rf_source_data;                                         // onchip_for_nios2_s1_agent:rf_source_data -> onchip_for_nios2_s1_agent_rsp_fifo:in_data
	wire          onchip_for_nios2_s1_agent_rf_source_ready;                                        // onchip_for_nios2_s1_agent_rsp_fifo:in_ready -> onchip_for_nios2_s1_agent:rf_source_ready
	wire          onchip_for_nios2_s1_agent_rsp_fifo_out_endofpacket;                               // onchip_for_nios2_s1_agent_rsp_fifo:out_endofpacket -> onchip_for_nios2_s1_agent:rf_sink_endofpacket
	wire          onchip_for_nios2_s1_agent_rsp_fifo_out_valid;                                     // onchip_for_nios2_s1_agent_rsp_fifo:out_valid -> onchip_for_nios2_s1_agent:rf_sink_valid
	wire          onchip_for_nios2_s1_agent_rsp_fifo_out_startofpacket;                             // onchip_for_nios2_s1_agent_rsp_fifo:out_startofpacket -> onchip_for_nios2_s1_agent:rf_sink_startofpacket
	wire  [114:0] onchip_for_nios2_s1_agent_rsp_fifo_out_data;                                      // onchip_for_nios2_s1_agent_rsp_fifo:out_data -> onchip_for_nios2_s1_agent:rf_sink_data
	wire          onchip_for_nios2_s1_agent_rsp_fifo_out_ready;                                     // onchip_for_nios2_s1_agent:rf_sink_ready -> onchip_for_nios2_s1_agent_rsp_fifo:out_ready
	wire          onchip_for_nios2_s1_agent_rdata_fifo_src_valid;                                   // onchip_for_nios2_s1_agent:rdata_fifo_src_valid -> onchip_for_nios2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_for_nios2_s1_agent_rdata_fifo_src_data;                                    // onchip_for_nios2_s1_agent:rdata_fifo_src_data -> onchip_for_nios2_s1_agent:rdata_fifo_sink_data
	wire          onchip_for_nios2_s1_agent_rdata_fifo_src_ready;                                   // onchip_for_nios2_s1_agent:rdata_fifo_sink_ready -> onchip_for_nios2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> onchip_for_nios2_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> onchip_for_nios2_s1_agent:cp_valid
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> onchip_for_nios2_s1_agent:cp_startofpacket
	wire  [113:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> onchip_for_nios2_s1_agent:cp_data
	wire   [31:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> onchip_for_nios2_s1_agent:cp_channel
	wire          cmd_mux_001_src_ready;                                                            // onchip_for_nios2_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire          pc_bus_ctrl_agent_m0_waitrequest;                                                 // pc_bus_ctrl_translator:uav_waitrequest -> pc_bus_ctrl_agent:m0_waitrequest
	wire    [2:0] pc_bus_ctrl_agent_m0_burstcount;                                                  // pc_bus_ctrl_agent:m0_burstcount -> pc_bus_ctrl_translator:uav_burstcount
	wire   [31:0] pc_bus_ctrl_agent_m0_writedata;                                                   // pc_bus_ctrl_agent:m0_writedata -> pc_bus_ctrl_translator:uav_writedata
	wire   [31:0] pc_bus_ctrl_agent_m0_address;                                                     // pc_bus_ctrl_agent:m0_address -> pc_bus_ctrl_translator:uav_address
	wire          pc_bus_ctrl_agent_m0_write;                                                       // pc_bus_ctrl_agent:m0_write -> pc_bus_ctrl_translator:uav_write
	wire          pc_bus_ctrl_agent_m0_lock;                                                        // pc_bus_ctrl_agent:m0_lock -> pc_bus_ctrl_translator:uav_lock
	wire          pc_bus_ctrl_agent_m0_read;                                                        // pc_bus_ctrl_agent:m0_read -> pc_bus_ctrl_translator:uav_read
	wire   [31:0] pc_bus_ctrl_agent_m0_readdata;                                                    // pc_bus_ctrl_translator:uav_readdata -> pc_bus_ctrl_agent:m0_readdata
	wire          pc_bus_ctrl_agent_m0_readdatavalid;                                               // pc_bus_ctrl_translator:uav_readdatavalid -> pc_bus_ctrl_agent:m0_readdatavalid
	wire          pc_bus_ctrl_agent_m0_debugaccess;                                                 // pc_bus_ctrl_agent:m0_debugaccess -> pc_bus_ctrl_translator:uav_debugaccess
	wire    [3:0] pc_bus_ctrl_agent_m0_byteenable;                                                  // pc_bus_ctrl_agent:m0_byteenable -> pc_bus_ctrl_translator:uav_byteenable
	wire          pc_bus_ctrl_agent_rf_source_endofpacket;                                          // pc_bus_ctrl_agent:rf_source_endofpacket -> pc_bus_ctrl_agent_rsp_fifo:in_endofpacket
	wire          pc_bus_ctrl_agent_rf_source_valid;                                                // pc_bus_ctrl_agent:rf_source_valid -> pc_bus_ctrl_agent_rsp_fifo:in_valid
	wire          pc_bus_ctrl_agent_rf_source_startofpacket;                                        // pc_bus_ctrl_agent:rf_source_startofpacket -> pc_bus_ctrl_agent_rsp_fifo:in_startofpacket
	wire  [114:0] pc_bus_ctrl_agent_rf_source_data;                                                 // pc_bus_ctrl_agent:rf_source_data -> pc_bus_ctrl_agent_rsp_fifo:in_data
	wire          pc_bus_ctrl_agent_rf_source_ready;                                                // pc_bus_ctrl_agent_rsp_fifo:in_ready -> pc_bus_ctrl_agent:rf_source_ready
	wire          pc_bus_ctrl_agent_rsp_fifo_out_endofpacket;                                       // pc_bus_ctrl_agent_rsp_fifo:out_endofpacket -> pc_bus_ctrl_agent:rf_sink_endofpacket
	wire          pc_bus_ctrl_agent_rsp_fifo_out_valid;                                             // pc_bus_ctrl_agent_rsp_fifo:out_valid -> pc_bus_ctrl_agent:rf_sink_valid
	wire          pc_bus_ctrl_agent_rsp_fifo_out_startofpacket;                                     // pc_bus_ctrl_agent_rsp_fifo:out_startofpacket -> pc_bus_ctrl_agent:rf_sink_startofpacket
	wire  [114:0] pc_bus_ctrl_agent_rsp_fifo_out_data;                                              // pc_bus_ctrl_agent_rsp_fifo:out_data -> pc_bus_ctrl_agent:rf_sink_data
	wire          pc_bus_ctrl_agent_rsp_fifo_out_ready;                                             // pc_bus_ctrl_agent:rf_sink_ready -> pc_bus_ctrl_agent_rsp_fifo:out_ready
	wire          pc_bus_ctrl_agent_rdata_fifo_src_valid;                                           // pc_bus_ctrl_agent:rdata_fifo_src_valid -> pc_bus_ctrl_agent:rdata_fifo_sink_valid
	wire   [33:0] pc_bus_ctrl_agent_rdata_fifo_src_data;                                            // pc_bus_ctrl_agent:rdata_fifo_src_data -> pc_bus_ctrl_agent:rdata_fifo_sink_data
	wire          pc_bus_ctrl_agent_rdata_fifo_src_ready;                                           // pc_bus_ctrl_agent:rdata_fifo_sink_ready -> pc_bus_ctrl_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> pc_bus_ctrl_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> pc_bus_ctrl_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> pc_bus_ctrl_agent:cp_startofpacket
	wire  [113:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> pc_bus_ctrl_agent:cp_data
	wire   [31:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> pc_bus_ctrl_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                            // pc_bus_ctrl_agent:cp_ready -> cmd_mux_002:src_ready
	wire          vga_sys_agent_m0_waitrequest;                                                     // vga_sys_translator:uav_waitrequest -> vga_sys_agent:m0_waitrequest
	wire    [2:0] vga_sys_agent_m0_burstcount;                                                      // vga_sys_agent:m0_burstcount -> vga_sys_translator:uav_burstcount
	wire   [31:0] vga_sys_agent_m0_writedata;                                                       // vga_sys_agent:m0_writedata -> vga_sys_translator:uav_writedata
	wire   [31:0] vga_sys_agent_m0_address;                                                         // vga_sys_agent:m0_address -> vga_sys_translator:uav_address
	wire          vga_sys_agent_m0_write;                                                           // vga_sys_agent:m0_write -> vga_sys_translator:uav_write
	wire          vga_sys_agent_m0_lock;                                                            // vga_sys_agent:m0_lock -> vga_sys_translator:uav_lock
	wire          vga_sys_agent_m0_read;                                                            // vga_sys_agent:m0_read -> vga_sys_translator:uav_read
	wire   [31:0] vga_sys_agent_m0_readdata;                                                        // vga_sys_translator:uav_readdata -> vga_sys_agent:m0_readdata
	wire          vga_sys_agent_m0_readdatavalid;                                                   // vga_sys_translator:uav_readdatavalid -> vga_sys_agent:m0_readdatavalid
	wire          vga_sys_agent_m0_debugaccess;                                                     // vga_sys_agent:m0_debugaccess -> vga_sys_translator:uav_debugaccess
	wire    [3:0] vga_sys_agent_m0_byteenable;                                                      // vga_sys_agent:m0_byteenable -> vga_sys_translator:uav_byteenable
	wire          vga_sys_agent_rf_source_endofpacket;                                              // vga_sys_agent:rf_source_endofpacket -> vga_sys_agent_rsp_fifo:in_endofpacket
	wire          vga_sys_agent_rf_source_valid;                                                    // vga_sys_agent:rf_source_valid -> vga_sys_agent_rsp_fifo:in_valid
	wire          vga_sys_agent_rf_source_startofpacket;                                            // vga_sys_agent:rf_source_startofpacket -> vga_sys_agent_rsp_fifo:in_startofpacket
	wire  [114:0] vga_sys_agent_rf_source_data;                                                     // vga_sys_agent:rf_source_data -> vga_sys_agent_rsp_fifo:in_data
	wire          vga_sys_agent_rf_source_ready;                                                    // vga_sys_agent_rsp_fifo:in_ready -> vga_sys_agent:rf_source_ready
	wire          vga_sys_agent_rsp_fifo_out_endofpacket;                                           // vga_sys_agent_rsp_fifo:out_endofpacket -> vga_sys_agent:rf_sink_endofpacket
	wire          vga_sys_agent_rsp_fifo_out_valid;                                                 // vga_sys_agent_rsp_fifo:out_valid -> vga_sys_agent:rf_sink_valid
	wire          vga_sys_agent_rsp_fifo_out_startofpacket;                                         // vga_sys_agent_rsp_fifo:out_startofpacket -> vga_sys_agent:rf_sink_startofpacket
	wire  [114:0] vga_sys_agent_rsp_fifo_out_data;                                                  // vga_sys_agent_rsp_fifo:out_data -> vga_sys_agent:rf_sink_data
	wire          vga_sys_agent_rsp_fifo_out_ready;                                                 // vga_sys_agent:rf_sink_ready -> vga_sys_agent_rsp_fifo:out_ready
	wire          vga_sys_agent_rdata_fifo_src_valid;                                               // vga_sys_agent:rdata_fifo_src_valid -> vga_sys_agent_rdata_fifo:in_valid
	wire   [33:0] vga_sys_agent_rdata_fifo_src_data;                                                // vga_sys_agent:rdata_fifo_src_data -> vga_sys_agent_rdata_fifo:in_data
	wire          vga_sys_agent_rdata_fifo_src_ready;                                               // vga_sys_agent_rdata_fifo:in_ready -> vga_sys_agent:rdata_fifo_src_ready
	wire          vga_sys_agent_rdata_fifo_out_valid;                                               // vga_sys_agent_rdata_fifo:out_valid -> vga_sys_agent:rdata_fifo_sink_valid
	wire   [33:0] vga_sys_agent_rdata_fifo_out_data;                                                // vga_sys_agent_rdata_fifo:out_data -> vga_sys_agent:rdata_fifo_sink_data
	wire          vga_sys_agent_rdata_fifo_out_ready;                                               // vga_sys_agent:rdata_fifo_sink_ready -> vga_sys_agent_rdata_fifo:out_ready
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> vga_sys_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> vga_sys_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> vga_sys_agent:cp_startofpacket
	wire  [113:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> vga_sys_agent:cp_data
	wire   [31:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> vga_sys_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                            // vga_sys_agent:cp_ready -> cmd_mux_003:src_ready
	wire          sound_mgmt_agent_m0_waitrequest;                                                  // sound_mgmt_translator:uav_waitrequest -> sound_mgmt_agent:m0_waitrequest
	wire    [2:0] sound_mgmt_agent_m0_burstcount;                                                   // sound_mgmt_agent:m0_burstcount -> sound_mgmt_translator:uav_burstcount
	wire   [31:0] sound_mgmt_agent_m0_writedata;                                                    // sound_mgmt_agent:m0_writedata -> sound_mgmt_translator:uav_writedata
	wire   [31:0] sound_mgmt_agent_m0_address;                                                      // sound_mgmt_agent:m0_address -> sound_mgmt_translator:uav_address
	wire          sound_mgmt_agent_m0_write;                                                        // sound_mgmt_agent:m0_write -> sound_mgmt_translator:uav_write
	wire          sound_mgmt_agent_m0_lock;                                                         // sound_mgmt_agent:m0_lock -> sound_mgmt_translator:uav_lock
	wire          sound_mgmt_agent_m0_read;                                                         // sound_mgmt_agent:m0_read -> sound_mgmt_translator:uav_read
	wire   [31:0] sound_mgmt_agent_m0_readdata;                                                     // sound_mgmt_translator:uav_readdata -> sound_mgmt_agent:m0_readdata
	wire          sound_mgmt_agent_m0_readdatavalid;                                                // sound_mgmt_translator:uav_readdatavalid -> sound_mgmt_agent:m0_readdatavalid
	wire          sound_mgmt_agent_m0_debugaccess;                                                  // sound_mgmt_agent:m0_debugaccess -> sound_mgmt_translator:uav_debugaccess
	wire    [3:0] sound_mgmt_agent_m0_byteenable;                                                   // sound_mgmt_agent:m0_byteenable -> sound_mgmt_translator:uav_byteenable
	wire          sound_mgmt_agent_rf_source_endofpacket;                                           // sound_mgmt_agent:rf_source_endofpacket -> sound_mgmt_agent_rsp_fifo:in_endofpacket
	wire          sound_mgmt_agent_rf_source_valid;                                                 // sound_mgmt_agent:rf_source_valid -> sound_mgmt_agent_rsp_fifo:in_valid
	wire          sound_mgmt_agent_rf_source_startofpacket;                                         // sound_mgmt_agent:rf_source_startofpacket -> sound_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [114:0] sound_mgmt_agent_rf_source_data;                                                  // sound_mgmt_agent:rf_source_data -> sound_mgmt_agent_rsp_fifo:in_data
	wire          sound_mgmt_agent_rf_source_ready;                                                 // sound_mgmt_agent_rsp_fifo:in_ready -> sound_mgmt_agent:rf_source_ready
	wire          sound_mgmt_agent_rsp_fifo_out_endofpacket;                                        // sound_mgmt_agent_rsp_fifo:out_endofpacket -> sound_mgmt_agent:rf_sink_endofpacket
	wire          sound_mgmt_agent_rsp_fifo_out_valid;                                              // sound_mgmt_agent_rsp_fifo:out_valid -> sound_mgmt_agent:rf_sink_valid
	wire          sound_mgmt_agent_rsp_fifo_out_startofpacket;                                      // sound_mgmt_agent_rsp_fifo:out_startofpacket -> sound_mgmt_agent:rf_sink_startofpacket
	wire  [114:0] sound_mgmt_agent_rsp_fifo_out_data;                                               // sound_mgmt_agent_rsp_fifo:out_data -> sound_mgmt_agent:rf_sink_data
	wire          sound_mgmt_agent_rsp_fifo_out_ready;                                              // sound_mgmt_agent:rf_sink_ready -> sound_mgmt_agent_rsp_fifo:out_ready
	wire          sound_mgmt_agent_rdata_fifo_src_valid;                                            // sound_mgmt_agent:rdata_fifo_src_valid -> sound_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] sound_mgmt_agent_rdata_fifo_src_data;                                             // sound_mgmt_agent:rdata_fifo_src_data -> sound_mgmt_agent:rdata_fifo_sink_data
	wire          sound_mgmt_agent_rdata_fifo_src_ready;                                            // sound_mgmt_agent:rdata_fifo_sink_ready -> sound_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> sound_mgmt_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> sound_mgmt_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> sound_mgmt_agent:cp_startofpacket
	wire  [113:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> sound_mgmt_agent:cp_data
	wire   [31:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> sound_mgmt_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                            // sound_mgmt_agent:cp_ready -> cmd_mux_004:src_ready
	wire          rtc_mgmt_agent_m0_waitrequest;                                                    // rtc_mgmt_translator:uav_waitrequest -> rtc_mgmt_agent:m0_waitrequest
	wire    [2:0] rtc_mgmt_agent_m0_burstcount;                                                     // rtc_mgmt_agent:m0_burstcount -> rtc_mgmt_translator:uav_burstcount
	wire   [31:0] rtc_mgmt_agent_m0_writedata;                                                      // rtc_mgmt_agent:m0_writedata -> rtc_mgmt_translator:uav_writedata
	wire   [31:0] rtc_mgmt_agent_m0_address;                                                        // rtc_mgmt_agent:m0_address -> rtc_mgmt_translator:uav_address
	wire          rtc_mgmt_agent_m0_write;                                                          // rtc_mgmt_agent:m0_write -> rtc_mgmt_translator:uav_write
	wire          rtc_mgmt_agent_m0_lock;                                                           // rtc_mgmt_agent:m0_lock -> rtc_mgmt_translator:uav_lock
	wire          rtc_mgmt_agent_m0_read;                                                           // rtc_mgmt_agent:m0_read -> rtc_mgmt_translator:uav_read
	wire   [31:0] rtc_mgmt_agent_m0_readdata;                                                       // rtc_mgmt_translator:uav_readdata -> rtc_mgmt_agent:m0_readdata
	wire          rtc_mgmt_agent_m0_readdatavalid;                                                  // rtc_mgmt_translator:uav_readdatavalid -> rtc_mgmt_agent:m0_readdatavalid
	wire          rtc_mgmt_agent_m0_debugaccess;                                                    // rtc_mgmt_agent:m0_debugaccess -> rtc_mgmt_translator:uav_debugaccess
	wire    [3:0] rtc_mgmt_agent_m0_byteenable;                                                     // rtc_mgmt_agent:m0_byteenable -> rtc_mgmt_translator:uav_byteenable
	wire          rtc_mgmt_agent_rf_source_endofpacket;                                             // rtc_mgmt_agent:rf_source_endofpacket -> rtc_mgmt_agent_rsp_fifo:in_endofpacket
	wire          rtc_mgmt_agent_rf_source_valid;                                                   // rtc_mgmt_agent:rf_source_valid -> rtc_mgmt_agent_rsp_fifo:in_valid
	wire          rtc_mgmt_agent_rf_source_startofpacket;                                           // rtc_mgmt_agent:rf_source_startofpacket -> rtc_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [114:0] rtc_mgmt_agent_rf_source_data;                                                    // rtc_mgmt_agent:rf_source_data -> rtc_mgmt_agent_rsp_fifo:in_data
	wire          rtc_mgmt_agent_rf_source_ready;                                                   // rtc_mgmt_agent_rsp_fifo:in_ready -> rtc_mgmt_agent:rf_source_ready
	wire          rtc_mgmt_agent_rsp_fifo_out_endofpacket;                                          // rtc_mgmt_agent_rsp_fifo:out_endofpacket -> rtc_mgmt_agent:rf_sink_endofpacket
	wire          rtc_mgmt_agent_rsp_fifo_out_valid;                                                // rtc_mgmt_agent_rsp_fifo:out_valid -> rtc_mgmt_agent:rf_sink_valid
	wire          rtc_mgmt_agent_rsp_fifo_out_startofpacket;                                        // rtc_mgmt_agent_rsp_fifo:out_startofpacket -> rtc_mgmt_agent:rf_sink_startofpacket
	wire  [114:0] rtc_mgmt_agent_rsp_fifo_out_data;                                                 // rtc_mgmt_agent_rsp_fifo:out_data -> rtc_mgmt_agent:rf_sink_data
	wire          rtc_mgmt_agent_rsp_fifo_out_ready;                                                // rtc_mgmt_agent:rf_sink_ready -> rtc_mgmt_agent_rsp_fifo:out_ready
	wire          rtc_mgmt_agent_rdata_fifo_src_valid;                                              // rtc_mgmt_agent:rdata_fifo_src_valid -> rtc_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] rtc_mgmt_agent_rdata_fifo_src_data;                                               // rtc_mgmt_agent:rdata_fifo_src_data -> rtc_mgmt_agent:rdata_fifo_sink_data
	wire          rtc_mgmt_agent_rdata_fifo_src_ready;                                              // rtc_mgmt_agent:rdata_fifo_sink_ready -> rtc_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> rtc_mgmt_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> rtc_mgmt_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> rtc_mgmt_agent:cp_startofpacket
	wire  [113:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> rtc_mgmt_agent:cp_data
	wire   [31:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> rtc_mgmt_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                            // rtc_mgmt_agent:cp_ready -> cmd_mux_005:src_ready
	wire          pit_mgmt_agent_m0_waitrequest;                                                    // pit_mgmt_translator:uav_waitrequest -> pit_mgmt_agent:m0_waitrequest
	wire    [2:0] pit_mgmt_agent_m0_burstcount;                                                     // pit_mgmt_agent:m0_burstcount -> pit_mgmt_translator:uav_burstcount
	wire   [31:0] pit_mgmt_agent_m0_writedata;                                                      // pit_mgmt_agent:m0_writedata -> pit_mgmt_translator:uav_writedata
	wire   [31:0] pit_mgmt_agent_m0_address;                                                        // pit_mgmt_agent:m0_address -> pit_mgmt_translator:uav_address
	wire          pit_mgmt_agent_m0_write;                                                          // pit_mgmt_agent:m0_write -> pit_mgmt_translator:uav_write
	wire          pit_mgmt_agent_m0_lock;                                                           // pit_mgmt_agent:m0_lock -> pit_mgmt_translator:uav_lock
	wire          pit_mgmt_agent_m0_read;                                                           // pit_mgmt_agent:m0_read -> pit_mgmt_translator:uav_read
	wire   [31:0] pit_mgmt_agent_m0_readdata;                                                       // pit_mgmt_translator:uav_readdata -> pit_mgmt_agent:m0_readdata
	wire          pit_mgmt_agent_m0_readdatavalid;                                                  // pit_mgmt_translator:uav_readdatavalid -> pit_mgmt_agent:m0_readdatavalid
	wire          pit_mgmt_agent_m0_debugaccess;                                                    // pit_mgmt_agent:m0_debugaccess -> pit_mgmt_translator:uav_debugaccess
	wire    [3:0] pit_mgmt_agent_m0_byteenable;                                                     // pit_mgmt_agent:m0_byteenable -> pit_mgmt_translator:uav_byteenable
	wire          pit_mgmt_agent_rf_source_endofpacket;                                             // pit_mgmt_agent:rf_source_endofpacket -> pit_mgmt_agent_rsp_fifo:in_endofpacket
	wire          pit_mgmt_agent_rf_source_valid;                                                   // pit_mgmt_agent:rf_source_valid -> pit_mgmt_agent_rsp_fifo:in_valid
	wire          pit_mgmt_agent_rf_source_startofpacket;                                           // pit_mgmt_agent:rf_source_startofpacket -> pit_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [114:0] pit_mgmt_agent_rf_source_data;                                                    // pit_mgmt_agent:rf_source_data -> pit_mgmt_agent_rsp_fifo:in_data
	wire          pit_mgmt_agent_rf_source_ready;                                                   // pit_mgmt_agent_rsp_fifo:in_ready -> pit_mgmt_agent:rf_source_ready
	wire          pit_mgmt_agent_rsp_fifo_out_endofpacket;                                          // pit_mgmt_agent_rsp_fifo:out_endofpacket -> pit_mgmt_agent:rf_sink_endofpacket
	wire          pit_mgmt_agent_rsp_fifo_out_valid;                                                // pit_mgmt_agent_rsp_fifo:out_valid -> pit_mgmt_agent:rf_sink_valid
	wire          pit_mgmt_agent_rsp_fifo_out_startofpacket;                                        // pit_mgmt_agent_rsp_fifo:out_startofpacket -> pit_mgmt_agent:rf_sink_startofpacket
	wire  [114:0] pit_mgmt_agent_rsp_fifo_out_data;                                                 // pit_mgmt_agent_rsp_fifo:out_data -> pit_mgmt_agent:rf_sink_data
	wire          pit_mgmt_agent_rsp_fifo_out_ready;                                                // pit_mgmt_agent:rf_sink_ready -> pit_mgmt_agent_rsp_fifo:out_ready
	wire          pit_mgmt_agent_rdata_fifo_src_valid;                                              // pit_mgmt_agent:rdata_fifo_src_valid -> pit_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] pit_mgmt_agent_rdata_fifo_src_data;                                               // pit_mgmt_agent:rdata_fifo_src_data -> pit_mgmt_agent:rdata_fifo_sink_data
	wire          pit_mgmt_agent_rdata_fifo_src_ready;                                              // pit_mgmt_agent:rdata_fifo_sink_ready -> pit_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> pit_mgmt_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> pit_mgmt_agent:cp_valid
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> pit_mgmt_agent:cp_startofpacket
	wire  [113:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> pit_mgmt_agent:cp_data
	wire   [31:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> pit_mgmt_agent:cp_channel
	wire          cmd_mux_006_src_ready;                                                            // pit_mgmt_agent:cp_ready -> cmd_mux_006:src_ready
	wire          hdd_mgmt_agent_m0_waitrequest;                                                    // hdd_mgmt_translator:uav_waitrequest -> hdd_mgmt_agent:m0_waitrequest
	wire    [2:0] hdd_mgmt_agent_m0_burstcount;                                                     // hdd_mgmt_agent:m0_burstcount -> hdd_mgmt_translator:uav_burstcount
	wire   [31:0] hdd_mgmt_agent_m0_writedata;                                                      // hdd_mgmt_agent:m0_writedata -> hdd_mgmt_translator:uav_writedata
	wire   [31:0] hdd_mgmt_agent_m0_address;                                                        // hdd_mgmt_agent:m0_address -> hdd_mgmt_translator:uav_address
	wire          hdd_mgmt_agent_m0_write;                                                          // hdd_mgmt_agent:m0_write -> hdd_mgmt_translator:uav_write
	wire          hdd_mgmt_agent_m0_lock;                                                           // hdd_mgmt_agent:m0_lock -> hdd_mgmt_translator:uav_lock
	wire          hdd_mgmt_agent_m0_read;                                                           // hdd_mgmt_agent:m0_read -> hdd_mgmt_translator:uav_read
	wire   [31:0] hdd_mgmt_agent_m0_readdata;                                                       // hdd_mgmt_translator:uav_readdata -> hdd_mgmt_agent:m0_readdata
	wire          hdd_mgmt_agent_m0_readdatavalid;                                                  // hdd_mgmt_translator:uav_readdatavalid -> hdd_mgmt_agent:m0_readdatavalid
	wire          hdd_mgmt_agent_m0_debugaccess;                                                    // hdd_mgmt_agent:m0_debugaccess -> hdd_mgmt_translator:uav_debugaccess
	wire    [3:0] hdd_mgmt_agent_m0_byteenable;                                                     // hdd_mgmt_agent:m0_byteenable -> hdd_mgmt_translator:uav_byteenable
	wire          hdd_mgmt_agent_rf_source_endofpacket;                                             // hdd_mgmt_agent:rf_source_endofpacket -> hdd_mgmt_agent_rsp_fifo:in_endofpacket
	wire          hdd_mgmt_agent_rf_source_valid;                                                   // hdd_mgmt_agent:rf_source_valid -> hdd_mgmt_agent_rsp_fifo:in_valid
	wire          hdd_mgmt_agent_rf_source_startofpacket;                                           // hdd_mgmt_agent:rf_source_startofpacket -> hdd_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [114:0] hdd_mgmt_agent_rf_source_data;                                                    // hdd_mgmt_agent:rf_source_data -> hdd_mgmt_agent_rsp_fifo:in_data
	wire          hdd_mgmt_agent_rf_source_ready;                                                   // hdd_mgmt_agent_rsp_fifo:in_ready -> hdd_mgmt_agent:rf_source_ready
	wire          hdd_mgmt_agent_rsp_fifo_out_endofpacket;                                          // hdd_mgmt_agent_rsp_fifo:out_endofpacket -> hdd_mgmt_agent:rf_sink_endofpacket
	wire          hdd_mgmt_agent_rsp_fifo_out_valid;                                                // hdd_mgmt_agent_rsp_fifo:out_valid -> hdd_mgmt_agent:rf_sink_valid
	wire          hdd_mgmt_agent_rsp_fifo_out_startofpacket;                                        // hdd_mgmt_agent_rsp_fifo:out_startofpacket -> hdd_mgmt_agent:rf_sink_startofpacket
	wire  [114:0] hdd_mgmt_agent_rsp_fifo_out_data;                                                 // hdd_mgmt_agent_rsp_fifo:out_data -> hdd_mgmt_agent:rf_sink_data
	wire          hdd_mgmt_agent_rsp_fifo_out_ready;                                                // hdd_mgmt_agent:rf_sink_ready -> hdd_mgmt_agent_rsp_fifo:out_ready
	wire          hdd_mgmt_agent_rdata_fifo_src_valid;                                              // hdd_mgmt_agent:rdata_fifo_src_valid -> hdd_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] hdd_mgmt_agent_rdata_fifo_src_data;                                               // hdd_mgmt_agent:rdata_fifo_src_data -> hdd_mgmt_agent:rdata_fifo_sink_data
	wire          hdd_mgmt_agent_rdata_fifo_src_ready;                                              // hdd_mgmt_agent:rdata_fifo_sink_ready -> hdd_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> hdd_mgmt_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> hdd_mgmt_agent:cp_valid
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> hdd_mgmt_agent:cp_startofpacket
	wire  [113:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> hdd_mgmt_agent:cp_data
	wire   [31:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> hdd_mgmt_agent:cp_channel
	wire          cmd_mux_007_src_ready;                                                            // hdd_mgmt_agent:cp_ready -> cmd_mux_007:src_ready
	wire          floppy_mgmt_agent_m0_waitrequest;                                                 // floppy_mgmt_translator:uav_waitrequest -> floppy_mgmt_agent:m0_waitrequest
	wire    [2:0] floppy_mgmt_agent_m0_burstcount;                                                  // floppy_mgmt_agent:m0_burstcount -> floppy_mgmt_translator:uav_burstcount
	wire   [31:0] floppy_mgmt_agent_m0_writedata;                                                   // floppy_mgmt_agent:m0_writedata -> floppy_mgmt_translator:uav_writedata
	wire   [31:0] floppy_mgmt_agent_m0_address;                                                     // floppy_mgmt_agent:m0_address -> floppy_mgmt_translator:uav_address
	wire          floppy_mgmt_agent_m0_write;                                                       // floppy_mgmt_agent:m0_write -> floppy_mgmt_translator:uav_write
	wire          floppy_mgmt_agent_m0_lock;                                                        // floppy_mgmt_agent:m0_lock -> floppy_mgmt_translator:uav_lock
	wire          floppy_mgmt_agent_m0_read;                                                        // floppy_mgmt_agent:m0_read -> floppy_mgmt_translator:uav_read
	wire   [31:0] floppy_mgmt_agent_m0_readdata;                                                    // floppy_mgmt_translator:uav_readdata -> floppy_mgmt_agent:m0_readdata
	wire          floppy_mgmt_agent_m0_readdatavalid;                                               // floppy_mgmt_translator:uav_readdatavalid -> floppy_mgmt_agent:m0_readdatavalid
	wire          floppy_mgmt_agent_m0_debugaccess;                                                 // floppy_mgmt_agent:m0_debugaccess -> floppy_mgmt_translator:uav_debugaccess
	wire    [3:0] floppy_mgmt_agent_m0_byteenable;                                                  // floppy_mgmt_agent:m0_byteenable -> floppy_mgmt_translator:uav_byteenable
	wire          floppy_mgmt_agent_rf_source_endofpacket;                                          // floppy_mgmt_agent:rf_source_endofpacket -> floppy_mgmt_agent_rsp_fifo:in_endofpacket
	wire          floppy_mgmt_agent_rf_source_valid;                                                // floppy_mgmt_agent:rf_source_valid -> floppy_mgmt_agent_rsp_fifo:in_valid
	wire          floppy_mgmt_agent_rf_source_startofpacket;                                        // floppy_mgmt_agent:rf_source_startofpacket -> floppy_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [114:0] floppy_mgmt_agent_rf_source_data;                                                 // floppy_mgmt_agent:rf_source_data -> floppy_mgmt_agent_rsp_fifo:in_data
	wire          floppy_mgmt_agent_rf_source_ready;                                                // floppy_mgmt_agent_rsp_fifo:in_ready -> floppy_mgmt_agent:rf_source_ready
	wire          floppy_mgmt_agent_rsp_fifo_out_endofpacket;                                       // floppy_mgmt_agent_rsp_fifo:out_endofpacket -> floppy_mgmt_agent:rf_sink_endofpacket
	wire          floppy_mgmt_agent_rsp_fifo_out_valid;                                             // floppy_mgmt_agent_rsp_fifo:out_valid -> floppy_mgmt_agent:rf_sink_valid
	wire          floppy_mgmt_agent_rsp_fifo_out_startofpacket;                                     // floppy_mgmt_agent_rsp_fifo:out_startofpacket -> floppy_mgmt_agent:rf_sink_startofpacket
	wire  [114:0] floppy_mgmt_agent_rsp_fifo_out_data;                                              // floppy_mgmt_agent_rsp_fifo:out_data -> floppy_mgmt_agent:rf_sink_data
	wire          floppy_mgmt_agent_rsp_fifo_out_ready;                                             // floppy_mgmt_agent:rf_sink_ready -> floppy_mgmt_agent_rsp_fifo:out_ready
	wire          floppy_mgmt_agent_rdata_fifo_src_valid;                                           // floppy_mgmt_agent:rdata_fifo_src_valid -> floppy_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] floppy_mgmt_agent_rdata_fifo_src_data;                                            // floppy_mgmt_agent:rdata_fifo_src_data -> floppy_mgmt_agent:rdata_fifo_sink_data
	wire          floppy_mgmt_agent_rdata_fifo_src_ready;                                           // floppy_mgmt_agent:rdata_fifo_sink_ready -> floppy_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> floppy_mgmt_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> floppy_mgmt_agent:cp_valid
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> floppy_mgmt_agent:cp_startofpacket
	wire  [113:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> floppy_mgmt_agent:cp_data
	wire   [31:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> floppy_mgmt_agent:cp_channel
	wire          cmd_mux_008_src_ready;                                                            // floppy_mgmt_agent:cp_ready -> cmd_mux_008:src_ready
	wire          pio_input_s1_agent_m0_waitrequest;                                                // pio_input_s1_translator:uav_waitrequest -> pio_input_s1_agent:m0_waitrequest
	wire    [2:0] pio_input_s1_agent_m0_burstcount;                                                 // pio_input_s1_agent:m0_burstcount -> pio_input_s1_translator:uav_burstcount
	wire   [31:0] pio_input_s1_agent_m0_writedata;                                                  // pio_input_s1_agent:m0_writedata -> pio_input_s1_translator:uav_writedata
	wire   [31:0] pio_input_s1_agent_m0_address;                                                    // pio_input_s1_agent:m0_address -> pio_input_s1_translator:uav_address
	wire          pio_input_s1_agent_m0_write;                                                      // pio_input_s1_agent:m0_write -> pio_input_s1_translator:uav_write
	wire          pio_input_s1_agent_m0_lock;                                                       // pio_input_s1_agent:m0_lock -> pio_input_s1_translator:uav_lock
	wire          pio_input_s1_agent_m0_read;                                                       // pio_input_s1_agent:m0_read -> pio_input_s1_translator:uav_read
	wire   [31:0] pio_input_s1_agent_m0_readdata;                                                   // pio_input_s1_translator:uav_readdata -> pio_input_s1_agent:m0_readdata
	wire          pio_input_s1_agent_m0_readdatavalid;                                              // pio_input_s1_translator:uav_readdatavalid -> pio_input_s1_agent:m0_readdatavalid
	wire          pio_input_s1_agent_m0_debugaccess;                                                // pio_input_s1_agent:m0_debugaccess -> pio_input_s1_translator:uav_debugaccess
	wire    [3:0] pio_input_s1_agent_m0_byteenable;                                                 // pio_input_s1_agent:m0_byteenable -> pio_input_s1_translator:uav_byteenable
	wire          pio_input_s1_agent_rf_source_endofpacket;                                         // pio_input_s1_agent:rf_source_endofpacket -> pio_input_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_input_s1_agent_rf_source_valid;                                               // pio_input_s1_agent:rf_source_valid -> pio_input_s1_agent_rsp_fifo:in_valid
	wire          pio_input_s1_agent_rf_source_startofpacket;                                       // pio_input_s1_agent:rf_source_startofpacket -> pio_input_s1_agent_rsp_fifo:in_startofpacket
	wire  [114:0] pio_input_s1_agent_rf_source_data;                                                // pio_input_s1_agent:rf_source_data -> pio_input_s1_agent_rsp_fifo:in_data
	wire          pio_input_s1_agent_rf_source_ready;                                               // pio_input_s1_agent_rsp_fifo:in_ready -> pio_input_s1_agent:rf_source_ready
	wire          pio_input_s1_agent_rsp_fifo_out_endofpacket;                                      // pio_input_s1_agent_rsp_fifo:out_endofpacket -> pio_input_s1_agent:rf_sink_endofpacket
	wire          pio_input_s1_agent_rsp_fifo_out_valid;                                            // pio_input_s1_agent_rsp_fifo:out_valid -> pio_input_s1_agent:rf_sink_valid
	wire          pio_input_s1_agent_rsp_fifo_out_startofpacket;                                    // pio_input_s1_agent_rsp_fifo:out_startofpacket -> pio_input_s1_agent:rf_sink_startofpacket
	wire  [114:0] pio_input_s1_agent_rsp_fifo_out_data;                                             // pio_input_s1_agent_rsp_fifo:out_data -> pio_input_s1_agent:rf_sink_data
	wire          pio_input_s1_agent_rsp_fifo_out_ready;                                            // pio_input_s1_agent:rf_sink_ready -> pio_input_s1_agent_rsp_fifo:out_ready
	wire          pio_input_s1_agent_rdata_fifo_src_valid;                                          // pio_input_s1_agent:rdata_fifo_src_valid -> pio_input_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_input_s1_agent_rdata_fifo_src_data;                                           // pio_input_s1_agent:rdata_fifo_src_data -> pio_input_s1_agent:rdata_fifo_sink_data
	wire          pio_input_s1_agent_rdata_fifo_src_ready;                                          // pio_input_s1_agent:rdata_fifo_sink_ready -> pio_input_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> pio_input_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> pio_input_s1_agent:cp_valid
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> pio_input_s1_agent:cp_startofpacket
	wire  [113:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> pio_input_s1_agent:cp_data
	wire   [31:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> pio_input_s1_agent:cp_channel
	wire          cmd_mux_009_src_ready;                                                            // pio_input_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [114:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [114:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire  [113:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire   [31:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_010_src_ready;                                                            // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire          pio_output_s1_agent_m0_waitrequest;                                               // pio_output_s1_translator:uav_waitrequest -> pio_output_s1_agent:m0_waitrequest
	wire    [2:0] pio_output_s1_agent_m0_burstcount;                                                // pio_output_s1_agent:m0_burstcount -> pio_output_s1_translator:uav_burstcount
	wire   [31:0] pio_output_s1_agent_m0_writedata;                                                 // pio_output_s1_agent:m0_writedata -> pio_output_s1_translator:uav_writedata
	wire   [31:0] pio_output_s1_agent_m0_address;                                                   // pio_output_s1_agent:m0_address -> pio_output_s1_translator:uav_address
	wire          pio_output_s1_agent_m0_write;                                                     // pio_output_s1_agent:m0_write -> pio_output_s1_translator:uav_write
	wire          pio_output_s1_agent_m0_lock;                                                      // pio_output_s1_agent:m0_lock -> pio_output_s1_translator:uav_lock
	wire          pio_output_s1_agent_m0_read;                                                      // pio_output_s1_agent:m0_read -> pio_output_s1_translator:uav_read
	wire   [31:0] pio_output_s1_agent_m0_readdata;                                                  // pio_output_s1_translator:uav_readdata -> pio_output_s1_agent:m0_readdata
	wire          pio_output_s1_agent_m0_readdatavalid;                                             // pio_output_s1_translator:uav_readdatavalid -> pio_output_s1_agent:m0_readdatavalid
	wire          pio_output_s1_agent_m0_debugaccess;                                               // pio_output_s1_agent:m0_debugaccess -> pio_output_s1_translator:uav_debugaccess
	wire    [3:0] pio_output_s1_agent_m0_byteenable;                                                // pio_output_s1_agent:m0_byteenable -> pio_output_s1_translator:uav_byteenable
	wire          pio_output_s1_agent_rf_source_endofpacket;                                        // pio_output_s1_agent:rf_source_endofpacket -> pio_output_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_output_s1_agent_rf_source_valid;                                              // pio_output_s1_agent:rf_source_valid -> pio_output_s1_agent_rsp_fifo:in_valid
	wire          pio_output_s1_agent_rf_source_startofpacket;                                      // pio_output_s1_agent:rf_source_startofpacket -> pio_output_s1_agent_rsp_fifo:in_startofpacket
	wire  [114:0] pio_output_s1_agent_rf_source_data;                                               // pio_output_s1_agent:rf_source_data -> pio_output_s1_agent_rsp_fifo:in_data
	wire          pio_output_s1_agent_rf_source_ready;                                              // pio_output_s1_agent_rsp_fifo:in_ready -> pio_output_s1_agent:rf_source_ready
	wire          pio_output_s1_agent_rsp_fifo_out_endofpacket;                                     // pio_output_s1_agent_rsp_fifo:out_endofpacket -> pio_output_s1_agent:rf_sink_endofpacket
	wire          pio_output_s1_agent_rsp_fifo_out_valid;                                           // pio_output_s1_agent_rsp_fifo:out_valid -> pio_output_s1_agent:rf_sink_valid
	wire          pio_output_s1_agent_rsp_fifo_out_startofpacket;                                   // pio_output_s1_agent_rsp_fifo:out_startofpacket -> pio_output_s1_agent:rf_sink_startofpacket
	wire  [114:0] pio_output_s1_agent_rsp_fifo_out_data;                                            // pio_output_s1_agent_rsp_fifo:out_data -> pio_output_s1_agent:rf_sink_data
	wire          pio_output_s1_agent_rsp_fifo_out_ready;                                           // pio_output_s1_agent:rf_sink_ready -> pio_output_s1_agent_rsp_fifo:out_ready
	wire          pio_output_s1_agent_rdata_fifo_src_valid;                                         // pio_output_s1_agent:rdata_fifo_src_valid -> pio_output_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_output_s1_agent_rdata_fifo_src_data;                                          // pio_output_s1_agent:rdata_fifo_src_data -> pio_output_s1_agent:rdata_fifo_sink_data
	wire          pio_output_s1_agent_rdata_fifo_src_ready;                                         // pio_output_s1_agent:rdata_fifo_sink_ready -> pio_output_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> pio_output_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> pio_output_s1_agent:cp_valid
	wire          cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> pio_output_s1_agent:cp_startofpacket
	wire  [113:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> pio_output_s1_agent:cp_data
	wire   [31:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> pio_output_s1_agent:cp_channel
	wire          cmd_mux_011_src_ready;                                                            // pio_output_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire          sdram_s1_agent_m0_waitrequest;                                                    // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                     // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                      // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_agent_m0_address;                                                        // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_agent_m0_write;                                                          // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_agent_m0_lock;                                                           // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_agent_m0_read;                                                           // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                       // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_readdatavalid;                                                  // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_debugaccess;                                                    // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                     // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_rf_source_endofpacket;                                             // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rf_source_valid;                                                   // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire          sdram_s1_agent_rf_source_startofpacket;                                           // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire  [114:0] sdram_s1_agent_rf_source_data;                                                    // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                   // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                          // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                        // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire  [114:0] sdram_s1_agent_rsp_fifo_out_data;                                                 // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                              // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                               // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                              // sdram_s1_agent:rdata_fifo_sink_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          driver_sd_avalon_slave_0_agent_m0_waitrequest;                                    // driver_sd_avalon_slave_0_translator:uav_waitrequest -> driver_sd_avalon_slave_0_agent:m0_waitrequest
	wire    [2:0] driver_sd_avalon_slave_0_agent_m0_burstcount;                                     // driver_sd_avalon_slave_0_agent:m0_burstcount -> driver_sd_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_writedata;                                      // driver_sd_avalon_slave_0_agent:m0_writedata -> driver_sd_avalon_slave_0_translator:uav_writedata
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_address;                                        // driver_sd_avalon_slave_0_agent:m0_address -> driver_sd_avalon_slave_0_translator:uav_address
	wire          driver_sd_avalon_slave_0_agent_m0_write;                                          // driver_sd_avalon_slave_0_agent:m0_write -> driver_sd_avalon_slave_0_translator:uav_write
	wire          driver_sd_avalon_slave_0_agent_m0_lock;                                           // driver_sd_avalon_slave_0_agent:m0_lock -> driver_sd_avalon_slave_0_translator:uav_lock
	wire          driver_sd_avalon_slave_0_agent_m0_read;                                           // driver_sd_avalon_slave_0_agent:m0_read -> driver_sd_avalon_slave_0_translator:uav_read
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_readdata;                                       // driver_sd_avalon_slave_0_translator:uav_readdata -> driver_sd_avalon_slave_0_agent:m0_readdata
	wire          driver_sd_avalon_slave_0_agent_m0_readdatavalid;                                  // driver_sd_avalon_slave_0_translator:uav_readdatavalid -> driver_sd_avalon_slave_0_agent:m0_readdatavalid
	wire          driver_sd_avalon_slave_0_agent_m0_debugaccess;                                    // driver_sd_avalon_slave_0_agent:m0_debugaccess -> driver_sd_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] driver_sd_avalon_slave_0_agent_m0_byteenable;                                     // driver_sd_avalon_slave_0_agent:m0_byteenable -> driver_sd_avalon_slave_0_translator:uav_byteenable
	wire          driver_sd_avalon_slave_0_agent_rf_source_endofpacket;                             // driver_sd_avalon_slave_0_agent:rf_source_endofpacket -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          driver_sd_avalon_slave_0_agent_rf_source_valid;                                   // driver_sd_avalon_slave_0_agent:rf_source_valid -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_valid
	wire          driver_sd_avalon_slave_0_agent_rf_source_startofpacket;                           // driver_sd_avalon_slave_0_agent:rf_source_startofpacket -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [114:0] driver_sd_avalon_slave_0_agent_rf_source_data;                                    // driver_sd_avalon_slave_0_agent:rf_source_data -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_data
	wire          driver_sd_avalon_slave_0_agent_rf_source_ready;                                   // driver_sd_avalon_slave_0_agent_rsp_fifo:in_ready -> driver_sd_avalon_slave_0_agent:rf_source_ready
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                          // driver_sd_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> driver_sd_avalon_slave_0_agent:rf_sink_endofpacket
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid;                                // driver_sd_avalon_slave_0_agent_rsp_fifo:out_valid -> driver_sd_avalon_slave_0_agent:rf_sink_valid
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                        // driver_sd_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> driver_sd_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [114:0] driver_sd_avalon_slave_0_agent_rsp_fifo_out_data;                                 // driver_sd_avalon_slave_0_agent_rsp_fifo:out_data -> driver_sd_avalon_slave_0_agent:rf_sink_data
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready;                                // driver_sd_avalon_slave_0_agent:rf_sink_ready -> driver_sd_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid;                              // driver_sd_avalon_slave_0_agent:rdata_fifo_src_valid -> driver_sd_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] driver_sd_avalon_slave_0_agent_rdata_fifo_src_data;                               // driver_sd_avalon_slave_0_agent:rdata_fifo_src_data -> driver_sd_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready;                              // driver_sd_avalon_slave_0_agent:rdata_fifo_sink_ready -> driver_sd_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> driver_sd_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> driver_sd_avalon_slave_0_agent:cp_valid
	wire          cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> driver_sd_avalon_slave_0_agent:cp_startofpacket
	wire  [113:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> driver_sd_avalon_slave_0_agent:cp_data
	wire   [31:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> driver_sd_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_013_src_ready;                                                            // driver_sd_avalon_slave_0_agent:cp_ready -> cmd_mux_013:src_ready
	wire          floppy_sd_slave_agent_m0_waitrequest;                                             // floppy_sd_slave_translator:uav_waitrequest -> floppy_sd_slave_agent:m0_waitrequest
	wire    [0:0] floppy_sd_slave_agent_m0_burstcount;                                              // floppy_sd_slave_agent:m0_burstcount -> floppy_sd_slave_translator:uav_burstcount
	wire    [7:0] floppy_sd_slave_agent_m0_writedata;                                               // floppy_sd_slave_agent:m0_writedata -> floppy_sd_slave_translator:uav_writedata
	wire   [31:0] floppy_sd_slave_agent_m0_address;                                                 // floppy_sd_slave_agent:m0_address -> floppy_sd_slave_translator:uav_address
	wire          floppy_sd_slave_agent_m0_write;                                                   // floppy_sd_slave_agent:m0_write -> floppy_sd_slave_translator:uav_write
	wire          floppy_sd_slave_agent_m0_lock;                                                    // floppy_sd_slave_agent:m0_lock -> floppy_sd_slave_translator:uav_lock
	wire          floppy_sd_slave_agent_m0_read;                                                    // floppy_sd_slave_agent:m0_read -> floppy_sd_slave_translator:uav_read
	wire    [7:0] floppy_sd_slave_agent_m0_readdata;                                                // floppy_sd_slave_translator:uav_readdata -> floppy_sd_slave_agent:m0_readdata
	wire          floppy_sd_slave_agent_m0_readdatavalid;                                           // floppy_sd_slave_translator:uav_readdatavalid -> floppy_sd_slave_agent:m0_readdatavalid
	wire          floppy_sd_slave_agent_m0_debugaccess;                                             // floppy_sd_slave_agent:m0_debugaccess -> floppy_sd_slave_translator:uav_debugaccess
	wire    [0:0] floppy_sd_slave_agent_m0_byteenable;                                              // floppy_sd_slave_agent:m0_byteenable -> floppy_sd_slave_translator:uav_byteenable
	wire          floppy_sd_slave_agent_rf_source_endofpacket;                                      // floppy_sd_slave_agent:rf_source_endofpacket -> floppy_sd_slave_agent_rsp_fifo:in_endofpacket
	wire          floppy_sd_slave_agent_rf_source_valid;                                            // floppy_sd_slave_agent:rf_source_valid -> floppy_sd_slave_agent_rsp_fifo:in_valid
	wire          floppy_sd_slave_agent_rf_source_startofpacket;                                    // floppy_sd_slave_agent:rf_source_startofpacket -> floppy_sd_slave_agent_rsp_fifo:in_startofpacket
	wire   [87:0] floppy_sd_slave_agent_rf_source_data;                                             // floppy_sd_slave_agent:rf_source_data -> floppy_sd_slave_agent_rsp_fifo:in_data
	wire          floppy_sd_slave_agent_rf_source_ready;                                            // floppy_sd_slave_agent_rsp_fifo:in_ready -> floppy_sd_slave_agent:rf_source_ready
	wire          floppy_sd_slave_agent_rsp_fifo_out_endofpacket;                                   // floppy_sd_slave_agent_rsp_fifo:out_endofpacket -> floppy_sd_slave_agent:rf_sink_endofpacket
	wire          floppy_sd_slave_agent_rsp_fifo_out_valid;                                         // floppy_sd_slave_agent_rsp_fifo:out_valid -> floppy_sd_slave_agent:rf_sink_valid
	wire          floppy_sd_slave_agent_rsp_fifo_out_startofpacket;                                 // floppy_sd_slave_agent_rsp_fifo:out_startofpacket -> floppy_sd_slave_agent:rf_sink_startofpacket
	wire   [87:0] floppy_sd_slave_agent_rsp_fifo_out_data;                                          // floppy_sd_slave_agent_rsp_fifo:out_data -> floppy_sd_slave_agent:rf_sink_data
	wire          floppy_sd_slave_agent_rsp_fifo_out_ready;                                         // floppy_sd_slave_agent:rf_sink_ready -> floppy_sd_slave_agent_rsp_fifo:out_ready
	wire          floppy_sd_slave_agent_rdata_fifo_src_valid;                                       // floppy_sd_slave_agent:rdata_fifo_src_valid -> floppy_sd_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] floppy_sd_slave_agent_rdata_fifo_src_data;                                        // floppy_sd_slave_agent:rdata_fifo_src_data -> floppy_sd_slave_agent:rdata_fifo_sink_data
	wire          floppy_sd_slave_agent_rdata_fifo_src_ready;                                       // floppy_sd_slave_agent:rdata_fifo_sink_ready -> floppy_sd_slave_agent:rdata_fifo_src_ready
	wire          hdd_sd_slave_agent_m0_waitrequest;                                                // hdd_sd_slave_translator:uav_waitrequest -> hdd_sd_slave_agent:m0_waitrequest
	wire    [2:0] hdd_sd_slave_agent_m0_burstcount;                                                 // hdd_sd_slave_agent:m0_burstcount -> hdd_sd_slave_translator:uav_burstcount
	wire   [31:0] hdd_sd_slave_agent_m0_writedata;                                                  // hdd_sd_slave_agent:m0_writedata -> hdd_sd_slave_translator:uav_writedata
	wire   [31:0] hdd_sd_slave_agent_m0_address;                                                    // hdd_sd_slave_agent:m0_address -> hdd_sd_slave_translator:uav_address
	wire          hdd_sd_slave_agent_m0_write;                                                      // hdd_sd_slave_agent:m0_write -> hdd_sd_slave_translator:uav_write
	wire          hdd_sd_slave_agent_m0_lock;                                                       // hdd_sd_slave_agent:m0_lock -> hdd_sd_slave_translator:uav_lock
	wire          hdd_sd_slave_agent_m0_read;                                                       // hdd_sd_slave_agent:m0_read -> hdd_sd_slave_translator:uav_read
	wire   [31:0] hdd_sd_slave_agent_m0_readdata;                                                   // hdd_sd_slave_translator:uav_readdata -> hdd_sd_slave_agent:m0_readdata
	wire          hdd_sd_slave_agent_m0_readdatavalid;                                              // hdd_sd_slave_translator:uav_readdatavalid -> hdd_sd_slave_agent:m0_readdatavalid
	wire          hdd_sd_slave_agent_m0_debugaccess;                                                // hdd_sd_slave_agent:m0_debugaccess -> hdd_sd_slave_translator:uav_debugaccess
	wire    [3:0] hdd_sd_slave_agent_m0_byteenable;                                                 // hdd_sd_slave_agent:m0_byteenable -> hdd_sd_slave_translator:uav_byteenable
	wire          hdd_sd_slave_agent_rf_source_endofpacket;                                         // hdd_sd_slave_agent:rf_source_endofpacket -> hdd_sd_slave_agent_rsp_fifo:in_endofpacket
	wire          hdd_sd_slave_agent_rf_source_valid;                                               // hdd_sd_slave_agent:rf_source_valid -> hdd_sd_slave_agent_rsp_fifo:in_valid
	wire          hdd_sd_slave_agent_rf_source_startofpacket;                                       // hdd_sd_slave_agent:rf_source_startofpacket -> hdd_sd_slave_agent_rsp_fifo:in_startofpacket
	wire  [114:0] hdd_sd_slave_agent_rf_source_data;                                                // hdd_sd_slave_agent:rf_source_data -> hdd_sd_slave_agent_rsp_fifo:in_data
	wire          hdd_sd_slave_agent_rf_source_ready;                                               // hdd_sd_slave_agent_rsp_fifo:in_ready -> hdd_sd_slave_agent:rf_source_ready
	wire          hdd_sd_slave_agent_rsp_fifo_out_endofpacket;                                      // hdd_sd_slave_agent_rsp_fifo:out_endofpacket -> hdd_sd_slave_agent:rf_sink_endofpacket
	wire          hdd_sd_slave_agent_rsp_fifo_out_valid;                                            // hdd_sd_slave_agent_rsp_fifo:out_valid -> hdd_sd_slave_agent:rf_sink_valid
	wire          hdd_sd_slave_agent_rsp_fifo_out_startofpacket;                                    // hdd_sd_slave_agent_rsp_fifo:out_startofpacket -> hdd_sd_slave_agent:rf_sink_startofpacket
	wire  [114:0] hdd_sd_slave_agent_rsp_fifo_out_data;                                             // hdd_sd_slave_agent_rsp_fifo:out_data -> hdd_sd_slave_agent:rf_sink_data
	wire          hdd_sd_slave_agent_rsp_fifo_out_ready;                                            // hdd_sd_slave_agent:rf_sink_ready -> hdd_sd_slave_agent_rsp_fifo:out_ready
	wire          hdd_sd_slave_agent_rdata_fifo_src_valid;                                          // hdd_sd_slave_agent:rdata_fifo_src_valid -> hdd_sd_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] hdd_sd_slave_agent_rdata_fifo_src_data;                                           // hdd_sd_slave_agent:rdata_fifo_src_data -> hdd_sd_slave_agent:rdata_fifo_sink_data
	wire          hdd_sd_slave_agent_rdata_fifo_src_ready;                                          // hdd_sd_slave_agent:rdata_fifo_sink_ready -> hdd_sd_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_endofpacket;                                                      // cmd_mux_015:src_endofpacket -> hdd_sd_slave_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                            // cmd_mux_015:src_valid -> hdd_sd_slave_agent:cp_valid
	wire          cmd_mux_015_src_startofpacket;                                                    // cmd_mux_015:src_startofpacket -> hdd_sd_slave_agent:cp_startofpacket
	wire  [113:0] cmd_mux_015_src_data;                                                             // cmd_mux_015:src_data -> hdd_sd_slave_agent:cp_data
	wire   [31:0] cmd_mux_015_src_channel;                                                          // cmd_mux_015:src_channel -> hdd_sd_slave_agent:cp_channel
	wire          cmd_mux_015_src_ready;                                                            // hdd_sd_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire          pc_dma_slave_agent_m0_waitrequest;                                                // pc_dma_slave_translator:uav_waitrequest -> pc_dma_slave_agent:m0_waitrequest
	wire    [0:0] pc_dma_slave_agent_m0_burstcount;                                                 // pc_dma_slave_agent:m0_burstcount -> pc_dma_slave_translator:uav_burstcount
	wire    [7:0] pc_dma_slave_agent_m0_writedata;                                                  // pc_dma_slave_agent:m0_writedata -> pc_dma_slave_translator:uav_writedata
	wire   [31:0] pc_dma_slave_agent_m0_address;                                                    // pc_dma_slave_agent:m0_address -> pc_dma_slave_translator:uav_address
	wire          pc_dma_slave_agent_m0_write;                                                      // pc_dma_slave_agent:m0_write -> pc_dma_slave_translator:uav_write
	wire          pc_dma_slave_agent_m0_lock;                                                       // pc_dma_slave_agent:m0_lock -> pc_dma_slave_translator:uav_lock
	wire          pc_dma_slave_agent_m0_read;                                                       // pc_dma_slave_agent:m0_read -> pc_dma_slave_translator:uav_read
	wire    [7:0] pc_dma_slave_agent_m0_readdata;                                                   // pc_dma_slave_translator:uav_readdata -> pc_dma_slave_agent:m0_readdata
	wire          pc_dma_slave_agent_m0_readdatavalid;                                              // pc_dma_slave_translator:uav_readdatavalid -> pc_dma_slave_agent:m0_readdatavalid
	wire          pc_dma_slave_agent_m0_debugaccess;                                                // pc_dma_slave_agent:m0_debugaccess -> pc_dma_slave_translator:uav_debugaccess
	wire    [0:0] pc_dma_slave_agent_m0_byteenable;                                                 // pc_dma_slave_agent:m0_byteenable -> pc_dma_slave_translator:uav_byteenable
	wire          pc_dma_slave_agent_rf_source_endofpacket;                                         // pc_dma_slave_agent:rf_source_endofpacket -> pc_dma_slave_agent_rsp_fifo:in_endofpacket
	wire          pc_dma_slave_agent_rf_source_valid;                                               // pc_dma_slave_agent:rf_source_valid -> pc_dma_slave_agent_rsp_fifo:in_valid
	wire          pc_dma_slave_agent_rf_source_startofpacket;                                       // pc_dma_slave_agent:rf_source_startofpacket -> pc_dma_slave_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pc_dma_slave_agent_rf_source_data;                                                // pc_dma_slave_agent:rf_source_data -> pc_dma_slave_agent_rsp_fifo:in_data
	wire          pc_dma_slave_agent_rf_source_ready;                                               // pc_dma_slave_agent_rsp_fifo:in_ready -> pc_dma_slave_agent:rf_source_ready
	wire          pc_dma_slave_agent_rsp_fifo_out_endofpacket;                                      // pc_dma_slave_agent_rsp_fifo:out_endofpacket -> pc_dma_slave_agent:rf_sink_endofpacket
	wire          pc_dma_slave_agent_rsp_fifo_out_valid;                                            // pc_dma_slave_agent_rsp_fifo:out_valid -> pc_dma_slave_agent:rf_sink_valid
	wire          pc_dma_slave_agent_rsp_fifo_out_startofpacket;                                    // pc_dma_slave_agent_rsp_fifo:out_startofpacket -> pc_dma_slave_agent:rf_sink_startofpacket
	wire   [87:0] pc_dma_slave_agent_rsp_fifo_out_data;                                             // pc_dma_slave_agent_rsp_fifo:out_data -> pc_dma_slave_agent:rf_sink_data
	wire          pc_dma_slave_agent_rsp_fifo_out_ready;                                            // pc_dma_slave_agent:rf_sink_ready -> pc_dma_slave_agent_rsp_fifo:out_ready
	wire          pc_dma_slave_agent_rdata_fifo_src_valid;                                          // pc_dma_slave_agent:rdata_fifo_src_valid -> pc_dma_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] pc_dma_slave_agent_rdata_fifo_src_data;                                           // pc_dma_slave_agent:rdata_fifo_src_data -> pc_dma_slave_agent:rdata_fifo_sink_data
	wire          pc_dma_slave_agent_rdata_fifo_src_ready;                                          // pc_dma_slave_agent:rdata_fifo_sink_ready -> pc_dma_slave_agent:rdata_fifo_src_ready
	wire          pc_dma_page_agent_m0_waitrequest;                                                 // pc_dma_page_translator:uav_waitrequest -> pc_dma_page_agent:m0_waitrequest
	wire    [0:0] pc_dma_page_agent_m0_burstcount;                                                  // pc_dma_page_agent:m0_burstcount -> pc_dma_page_translator:uav_burstcount
	wire    [7:0] pc_dma_page_agent_m0_writedata;                                                   // pc_dma_page_agent:m0_writedata -> pc_dma_page_translator:uav_writedata
	wire   [31:0] pc_dma_page_agent_m0_address;                                                     // pc_dma_page_agent:m0_address -> pc_dma_page_translator:uav_address
	wire          pc_dma_page_agent_m0_write;                                                       // pc_dma_page_agent:m0_write -> pc_dma_page_translator:uav_write
	wire          pc_dma_page_agent_m0_lock;                                                        // pc_dma_page_agent:m0_lock -> pc_dma_page_translator:uav_lock
	wire          pc_dma_page_agent_m0_read;                                                        // pc_dma_page_agent:m0_read -> pc_dma_page_translator:uav_read
	wire    [7:0] pc_dma_page_agent_m0_readdata;                                                    // pc_dma_page_translator:uav_readdata -> pc_dma_page_agent:m0_readdata
	wire          pc_dma_page_agent_m0_readdatavalid;                                               // pc_dma_page_translator:uav_readdatavalid -> pc_dma_page_agent:m0_readdatavalid
	wire          pc_dma_page_agent_m0_debugaccess;                                                 // pc_dma_page_agent:m0_debugaccess -> pc_dma_page_translator:uav_debugaccess
	wire    [0:0] pc_dma_page_agent_m0_byteenable;                                                  // pc_dma_page_agent:m0_byteenable -> pc_dma_page_translator:uav_byteenable
	wire          pc_dma_page_agent_rf_source_endofpacket;                                          // pc_dma_page_agent:rf_source_endofpacket -> pc_dma_page_agent_rsp_fifo:in_endofpacket
	wire          pc_dma_page_agent_rf_source_valid;                                                // pc_dma_page_agent:rf_source_valid -> pc_dma_page_agent_rsp_fifo:in_valid
	wire          pc_dma_page_agent_rf_source_startofpacket;                                        // pc_dma_page_agent:rf_source_startofpacket -> pc_dma_page_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pc_dma_page_agent_rf_source_data;                                                 // pc_dma_page_agent:rf_source_data -> pc_dma_page_agent_rsp_fifo:in_data
	wire          pc_dma_page_agent_rf_source_ready;                                                // pc_dma_page_agent_rsp_fifo:in_ready -> pc_dma_page_agent:rf_source_ready
	wire          pc_dma_page_agent_rsp_fifo_out_endofpacket;                                       // pc_dma_page_agent_rsp_fifo:out_endofpacket -> pc_dma_page_agent:rf_sink_endofpacket
	wire          pc_dma_page_agent_rsp_fifo_out_valid;                                             // pc_dma_page_agent_rsp_fifo:out_valid -> pc_dma_page_agent:rf_sink_valid
	wire          pc_dma_page_agent_rsp_fifo_out_startofpacket;                                     // pc_dma_page_agent_rsp_fifo:out_startofpacket -> pc_dma_page_agent:rf_sink_startofpacket
	wire   [87:0] pc_dma_page_agent_rsp_fifo_out_data;                                              // pc_dma_page_agent_rsp_fifo:out_data -> pc_dma_page_agent:rf_sink_data
	wire          pc_dma_page_agent_rsp_fifo_out_ready;                                             // pc_dma_page_agent:rf_sink_ready -> pc_dma_page_agent_rsp_fifo:out_ready
	wire          pc_dma_page_agent_rdata_fifo_src_valid;                                           // pc_dma_page_agent:rdata_fifo_src_valid -> pc_dma_page_agent:rdata_fifo_sink_valid
	wire    [9:0] pc_dma_page_agent_rdata_fifo_src_data;                                            // pc_dma_page_agent:rdata_fifo_src_data -> pc_dma_page_agent:rdata_fifo_sink_data
	wire          pc_dma_page_agent_rdata_fifo_src_ready;                                           // pc_dma_page_agent:rdata_fifo_sink_ready -> pc_dma_page_agent:rdata_fifo_src_ready
	wire          pc_dma_master_agent_m0_waitrequest;                                               // pc_dma_master_translator:uav_waitrequest -> pc_dma_master_agent:m0_waitrequest
	wire    [0:0] pc_dma_master_agent_m0_burstcount;                                                // pc_dma_master_agent:m0_burstcount -> pc_dma_master_translator:uav_burstcount
	wire    [7:0] pc_dma_master_agent_m0_writedata;                                                 // pc_dma_master_agent:m0_writedata -> pc_dma_master_translator:uav_writedata
	wire   [31:0] pc_dma_master_agent_m0_address;                                                   // pc_dma_master_agent:m0_address -> pc_dma_master_translator:uav_address
	wire          pc_dma_master_agent_m0_write;                                                     // pc_dma_master_agent:m0_write -> pc_dma_master_translator:uav_write
	wire          pc_dma_master_agent_m0_lock;                                                      // pc_dma_master_agent:m0_lock -> pc_dma_master_translator:uav_lock
	wire          pc_dma_master_agent_m0_read;                                                      // pc_dma_master_agent:m0_read -> pc_dma_master_translator:uav_read
	wire    [7:0] pc_dma_master_agent_m0_readdata;                                                  // pc_dma_master_translator:uav_readdata -> pc_dma_master_agent:m0_readdata
	wire          pc_dma_master_agent_m0_readdatavalid;                                             // pc_dma_master_translator:uav_readdatavalid -> pc_dma_master_agent:m0_readdatavalid
	wire          pc_dma_master_agent_m0_debugaccess;                                               // pc_dma_master_agent:m0_debugaccess -> pc_dma_master_translator:uav_debugaccess
	wire    [0:0] pc_dma_master_agent_m0_byteenable;                                                // pc_dma_master_agent:m0_byteenable -> pc_dma_master_translator:uav_byteenable
	wire          pc_dma_master_agent_rf_source_endofpacket;                                        // pc_dma_master_agent:rf_source_endofpacket -> pc_dma_master_agent_rsp_fifo:in_endofpacket
	wire          pc_dma_master_agent_rf_source_valid;                                              // pc_dma_master_agent:rf_source_valid -> pc_dma_master_agent_rsp_fifo:in_valid
	wire          pc_dma_master_agent_rf_source_startofpacket;                                      // pc_dma_master_agent:rf_source_startofpacket -> pc_dma_master_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pc_dma_master_agent_rf_source_data;                                               // pc_dma_master_agent:rf_source_data -> pc_dma_master_agent_rsp_fifo:in_data
	wire          pc_dma_master_agent_rf_source_ready;                                              // pc_dma_master_agent_rsp_fifo:in_ready -> pc_dma_master_agent:rf_source_ready
	wire          pc_dma_master_agent_rsp_fifo_out_endofpacket;                                     // pc_dma_master_agent_rsp_fifo:out_endofpacket -> pc_dma_master_agent:rf_sink_endofpacket
	wire          pc_dma_master_agent_rsp_fifo_out_valid;                                           // pc_dma_master_agent_rsp_fifo:out_valid -> pc_dma_master_agent:rf_sink_valid
	wire          pc_dma_master_agent_rsp_fifo_out_startofpacket;                                   // pc_dma_master_agent_rsp_fifo:out_startofpacket -> pc_dma_master_agent:rf_sink_startofpacket
	wire   [87:0] pc_dma_master_agent_rsp_fifo_out_data;                                            // pc_dma_master_agent_rsp_fifo:out_data -> pc_dma_master_agent:rf_sink_data
	wire          pc_dma_master_agent_rsp_fifo_out_ready;                                           // pc_dma_master_agent:rf_sink_ready -> pc_dma_master_agent_rsp_fifo:out_ready
	wire          pc_dma_master_agent_rdata_fifo_src_valid;                                         // pc_dma_master_agent:rdata_fifo_src_valid -> pc_dma_master_agent:rdata_fifo_sink_valid
	wire    [9:0] pc_dma_master_agent_rdata_fifo_src_data;                                          // pc_dma_master_agent:rdata_fifo_src_data -> pc_dma_master_agent:rdata_fifo_sink_data
	wire          pc_dma_master_agent_rdata_fifo_src_ready;                                         // pc_dma_master_agent:rdata_fifo_sink_ready -> pc_dma_master_agent:rdata_fifo_src_ready
	wire          vga_io_b_agent_m0_waitrequest;                                                    // vga_io_b_translator:uav_waitrequest -> vga_io_b_agent:m0_waitrequest
	wire    [0:0] vga_io_b_agent_m0_burstcount;                                                     // vga_io_b_agent:m0_burstcount -> vga_io_b_translator:uav_burstcount
	wire    [7:0] vga_io_b_agent_m0_writedata;                                                      // vga_io_b_agent:m0_writedata -> vga_io_b_translator:uav_writedata
	wire   [31:0] vga_io_b_agent_m0_address;                                                        // vga_io_b_agent:m0_address -> vga_io_b_translator:uav_address
	wire          vga_io_b_agent_m0_write;                                                          // vga_io_b_agent:m0_write -> vga_io_b_translator:uav_write
	wire          vga_io_b_agent_m0_lock;                                                           // vga_io_b_agent:m0_lock -> vga_io_b_translator:uav_lock
	wire          vga_io_b_agent_m0_read;                                                           // vga_io_b_agent:m0_read -> vga_io_b_translator:uav_read
	wire    [7:0] vga_io_b_agent_m0_readdata;                                                       // vga_io_b_translator:uav_readdata -> vga_io_b_agent:m0_readdata
	wire          vga_io_b_agent_m0_readdatavalid;                                                  // vga_io_b_translator:uav_readdatavalid -> vga_io_b_agent:m0_readdatavalid
	wire          vga_io_b_agent_m0_debugaccess;                                                    // vga_io_b_agent:m0_debugaccess -> vga_io_b_translator:uav_debugaccess
	wire    [0:0] vga_io_b_agent_m0_byteenable;                                                     // vga_io_b_agent:m0_byteenable -> vga_io_b_translator:uav_byteenable
	wire          vga_io_b_agent_rf_source_endofpacket;                                             // vga_io_b_agent:rf_source_endofpacket -> vga_io_b_agent_rsp_fifo:in_endofpacket
	wire          vga_io_b_agent_rf_source_valid;                                                   // vga_io_b_agent:rf_source_valid -> vga_io_b_agent_rsp_fifo:in_valid
	wire          vga_io_b_agent_rf_source_startofpacket;                                           // vga_io_b_agent:rf_source_startofpacket -> vga_io_b_agent_rsp_fifo:in_startofpacket
	wire   [87:0] vga_io_b_agent_rf_source_data;                                                    // vga_io_b_agent:rf_source_data -> vga_io_b_agent_rsp_fifo:in_data
	wire          vga_io_b_agent_rf_source_ready;                                                   // vga_io_b_agent_rsp_fifo:in_ready -> vga_io_b_agent:rf_source_ready
	wire          vga_io_b_agent_rsp_fifo_out_endofpacket;                                          // vga_io_b_agent_rsp_fifo:out_endofpacket -> vga_io_b_agent:rf_sink_endofpacket
	wire          vga_io_b_agent_rsp_fifo_out_valid;                                                // vga_io_b_agent_rsp_fifo:out_valid -> vga_io_b_agent:rf_sink_valid
	wire          vga_io_b_agent_rsp_fifo_out_startofpacket;                                        // vga_io_b_agent_rsp_fifo:out_startofpacket -> vga_io_b_agent:rf_sink_startofpacket
	wire   [87:0] vga_io_b_agent_rsp_fifo_out_data;                                                 // vga_io_b_agent_rsp_fifo:out_data -> vga_io_b_agent:rf_sink_data
	wire          vga_io_b_agent_rsp_fifo_out_ready;                                                // vga_io_b_agent:rf_sink_ready -> vga_io_b_agent_rsp_fifo:out_ready
	wire          vga_io_b_agent_rdata_fifo_src_valid;                                              // vga_io_b_agent:rdata_fifo_src_valid -> vga_io_b_agent_rdata_fifo:in_valid
	wire    [9:0] vga_io_b_agent_rdata_fifo_src_data;                                               // vga_io_b_agent:rdata_fifo_src_data -> vga_io_b_agent_rdata_fifo:in_data
	wire          vga_io_b_agent_rdata_fifo_src_ready;                                              // vga_io_b_agent_rdata_fifo:in_ready -> vga_io_b_agent:rdata_fifo_src_ready
	wire          vga_io_b_agent_rdata_fifo_out_valid;                                              // vga_io_b_agent_rdata_fifo:out_valid -> vga_io_b_agent:rdata_fifo_sink_valid
	wire    [9:0] vga_io_b_agent_rdata_fifo_out_data;                                               // vga_io_b_agent_rdata_fifo:out_data -> vga_io_b_agent:rdata_fifo_sink_data
	wire          vga_io_b_agent_rdata_fifo_out_ready;                                              // vga_io_b_agent:rdata_fifo_sink_ready -> vga_io_b_agent_rdata_fifo:out_ready
	wire          vga_io_c_agent_m0_waitrequest;                                                    // vga_io_c_translator:uav_waitrequest -> vga_io_c_agent:m0_waitrequest
	wire    [0:0] vga_io_c_agent_m0_burstcount;                                                     // vga_io_c_agent:m0_burstcount -> vga_io_c_translator:uav_burstcount
	wire    [7:0] vga_io_c_agent_m0_writedata;                                                      // vga_io_c_agent:m0_writedata -> vga_io_c_translator:uav_writedata
	wire   [31:0] vga_io_c_agent_m0_address;                                                        // vga_io_c_agent:m0_address -> vga_io_c_translator:uav_address
	wire          vga_io_c_agent_m0_write;                                                          // vga_io_c_agent:m0_write -> vga_io_c_translator:uav_write
	wire          vga_io_c_agent_m0_lock;                                                           // vga_io_c_agent:m0_lock -> vga_io_c_translator:uav_lock
	wire          vga_io_c_agent_m0_read;                                                           // vga_io_c_agent:m0_read -> vga_io_c_translator:uav_read
	wire    [7:0] vga_io_c_agent_m0_readdata;                                                       // vga_io_c_translator:uav_readdata -> vga_io_c_agent:m0_readdata
	wire          vga_io_c_agent_m0_readdatavalid;                                                  // vga_io_c_translator:uav_readdatavalid -> vga_io_c_agent:m0_readdatavalid
	wire          vga_io_c_agent_m0_debugaccess;                                                    // vga_io_c_agent:m0_debugaccess -> vga_io_c_translator:uav_debugaccess
	wire    [0:0] vga_io_c_agent_m0_byteenable;                                                     // vga_io_c_agent:m0_byteenable -> vga_io_c_translator:uav_byteenable
	wire          vga_io_c_agent_rf_source_endofpacket;                                             // vga_io_c_agent:rf_source_endofpacket -> vga_io_c_agent_rsp_fifo:in_endofpacket
	wire          vga_io_c_agent_rf_source_valid;                                                   // vga_io_c_agent:rf_source_valid -> vga_io_c_agent_rsp_fifo:in_valid
	wire          vga_io_c_agent_rf_source_startofpacket;                                           // vga_io_c_agent:rf_source_startofpacket -> vga_io_c_agent_rsp_fifo:in_startofpacket
	wire   [87:0] vga_io_c_agent_rf_source_data;                                                    // vga_io_c_agent:rf_source_data -> vga_io_c_agent_rsp_fifo:in_data
	wire          vga_io_c_agent_rf_source_ready;                                                   // vga_io_c_agent_rsp_fifo:in_ready -> vga_io_c_agent:rf_source_ready
	wire          vga_io_c_agent_rsp_fifo_out_endofpacket;                                          // vga_io_c_agent_rsp_fifo:out_endofpacket -> vga_io_c_agent:rf_sink_endofpacket
	wire          vga_io_c_agent_rsp_fifo_out_valid;                                                // vga_io_c_agent_rsp_fifo:out_valid -> vga_io_c_agent:rf_sink_valid
	wire          vga_io_c_agent_rsp_fifo_out_startofpacket;                                        // vga_io_c_agent_rsp_fifo:out_startofpacket -> vga_io_c_agent:rf_sink_startofpacket
	wire   [87:0] vga_io_c_agent_rsp_fifo_out_data;                                                 // vga_io_c_agent_rsp_fifo:out_data -> vga_io_c_agent:rf_sink_data
	wire          vga_io_c_agent_rsp_fifo_out_ready;                                                // vga_io_c_agent:rf_sink_ready -> vga_io_c_agent_rsp_fifo:out_ready
	wire          vga_io_c_agent_rdata_fifo_src_valid;                                              // vga_io_c_agent:rdata_fifo_src_valid -> vga_io_c_agent_rdata_fifo:in_valid
	wire    [9:0] vga_io_c_agent_rdata_fifo_src_data;                                               // vga_io_c_agent:rdata_fifo_src_data -> vga_io_c_agent_rdata_fifo:in_data
	wire          vga_io_c_agent_rdata_fifo_src_ready;                                              // vga_io_c_agent_rdata_fifo:in_ready -> vga_io_c_agent:rdata_fifo_src_ready
	wire          vga_io_c_agent_rdata_fifo_out_valid;                                              // vga_io_c_agent_rdata_fifo:out_valid -> vga_io_c_agent:rdata_fifo_sink_valid
	wire    [9:0] vga_io_c_agent_rdata_fifo_out_data;                                               // vga_io_c_agent_rdata_fifo:out_data -> vga_io_c_agent:rdata_fifo_sink_data
	wire          vga_io_c_agent_rdata_fifo_out_ready;                                              // vga_io_c_agent:rdata_fifo_sink_ready -> vga_io_c_agent_rdata_fifo:out_ready
	wire          vga_io_d_agent_m0_waitrequest;                                                    // vga_io_d_translator:uav_waitrequest -> vga_io_d_agent:m0_waitrequest
	wire    [0:0] vga_io_d_agent_m0_burstcount;                                                     // vga_io_d_agent:m0_burstcount -> vga_io_d_translator:uav_burstcount
	wire    [7:0] vga_io_d_agent_m0_writedata;                                                      // vga_io_d_agent:m0_writedata -> vga_io_d_translator:uav_writedata
	wire   [31:0] vga_io_d_agent_m0_address;                                                        // vga_io_d_agent:m0_address -> vga_io_d_translator:uav_address
	wire          vga_io_d_agent_m0_write;                                                          // vga_io_d_agent:m0_write -> vga_io_d_translator:uav_write
	wire          vga_io_d_agent_m0_lock;                                                           // vga_io_d_agent:m0_lock -> vga_io_d_translator:uav_lock
	wire          vga_io_d_agent_m0_read;                                                           // vga_io_d_agent:m0_read -> vga_io_d_translator:uav_read
	wire    [7:0] vga_io_d_agent_m0_readdata;                                                       // vga_io_d_translator:uav_readdata -> vga_io_d_agent:m0_readdata
	wire          vga_io_d_agent_m0_readdatavalid;                                                  // vga_io_d_translator:uav_readdatavalid -> vga_io_d_agent:m0_readdatavalid
	wire          vga_io_d_agent_m0_debugaccess;                                                    // vga_io_d_agent:m0_debugaccess -> vga_io_d_translator:uav_debugaccess
	wire    [0:0] vga_io_d_agent_m0_byteenable;                                                     // vga_io_d_agent:m0_byteenable -> vga_io_d_translator:uav_byteenable
	wire          vga_io_d_agent_rf_source_endofpacket;                                             // vga_io_d_agent:rf_source_endofpacket -> vga_io_d_agent_rsp_fifo:in_endofpacket
	wire          vga_io_d_agent_rf_source_valid;                                                   // vga_io_d_agent:rf_source_valid -> vga_io_d_agent_rsp_fifo:in_valid
	wire          vga_io_d_agent_rf_source_startofpacket;                                           // vga_io_d_agent:rf_source_startofpacket -> vga_io_d_agent_rsp_fifo:in_startofpacket
	wire   [87:0] vga_io_d_agent_rf_source_data;                                                    // vga_io_d_agent:rf_source_data -> vga_io_d_agent_rsp_fifo:in_data
	wire          vga_io_d_agent_rf_source_ready;                                                   // vga_io_d_agent_rsp_fifo:in_ready -> vga_io_d_agent:rf_source_ready
	wire          vga_io_d_agent_rsp_fifo_out_endofpacket;                                          // vga_io_d_agent_rsp_fifo:out_endofpacket -> vga_io_d_agent:rf_sink_endofpacket
	wire          vga_io_d_agent_rsp_fifo_out_valid;                                                // vga_io_d_agent_rsp_fifo:out_valid -> vga_io_d_agent:rf_sink_valid
	wire          vga_io_d_agent_rsp_fifo_out_startofpacket;                                        // vga_io_d_agent_rsp_fifo:out_startofpacket -> vga_io_d_agent:rf_sink_startofpacket
	wire   [87:0] vga_io_d_agent_rsp_fifo_out_data;                                                 // vga_io_d_agent_rsp_fifo:out_data -> vga_io_d_agent:rf_sink_data
	wire          vga_io_d_agent_rsp_fifo_out_ready;                                                // vga_io_d_agent:rf_sink_ready -> vga_io_d_agent_rsp_fifo:out_ready
	wire          vga_io_d_agent_rdata_fifo_src_valid;                                              // vga_io_d_agent:rdata_fifo_src_valid -> vga_io_d_agent_rdata_fifo:in_valid
	wire    [9:0] vga_io_d_agent_rdata_fifo_src_data;                                               // vga_io_d_agent:rdata_fifo_src_data -> vga_io_d_agent_rdata_fifo:in_data
	wire          vga_io_d_agent_rdata_fifo_src_ready;                                              // vga_io_d_agent_rdata_fifo:in_ready -> vga_io_d_agent:rdata_fifo_src_ready
	wire          vga_io_d_agent_rdata_fifo_out_valid;                                              // vga_io_d_agent_rdata_fifo:out_valid -> vga_io_d_agent:rdata_fifo_sink_valid
	wire    [9:0] vga_io_d_agent_rdata_fifo_out_data;                                               // vga_io_d_agent_rdata_fifo:out_data -> vga_io_d_agent:rdata_fifo_sink_data
	wire          vga_io_d_agent_rdata_fifo_out_ready;                                              // vga_io_d_agent:rdata_fifo_sink_ready -> vga_io_d_agent_rdata_fifo:out_ready
	wire          sound_io_agent_m0_waitrequest;                                                    // sound_io_translator:uav_waitrequest -> sound_io_agent:m0_waitrequest
	wire    [0:0] sound_io_agent_m0_burstcount;                                                     // sound_io_agent:m0_burstcount -> sound_io_translator:uav_burstcount
	wire    [7:0] sound_io_agent_m0_writedata;                                                      // sound_io_agent:m0_writedata -> sound_io_translator:uav_writedata
	wire   [31:0] sound_io_agent_m0_address;                                                        // sound_io_agent:m0_address -> sound_io_translator:uav_address
	wire          sound_io_agent_m0_write;                                                          // sound_io_agent:m0_write -> sound_io_translator:uav_write
	wire          sound_io_agent_m0_lock;                                                           // sound_io_agent:m0_lock -> sound_io_translator:uav_lock
	wire          sound_io_agent_m0_read;                                                           // sound_io_agent:m0_read -> sound_io_translator:uav_read
	wire    [7:0] sound_io_agent_m0_readdata;                                                       // sound_io_translator:uav_readdata -> sound_io_agent:m0_readdata
	wire          sound_io_agent_m0_readdatavalid;                                                  // sound_io_translator:uav_readdatavalid -> sound_io_agent:m0_readdatavalid
	wire          sound_io_agent_m0_debugaccess;                                                    // sound_io_agent:m0_debugaccess -> sound_io_translator:uav_debugaccess
	wire    [0:0] sound_io_agent_m0_byteenable;                                                     // sound_io_agent:m0_byteenable -> sound_io_translator:uav_byteenable
	wire          sound_io_agent_rf_source_endofpacket;                                             // sound_io_agent:rf_source_endofpacket -> sound_io_agent_rsp_fifo:in_endofpacket
	wire          sound_io_agent_rf_source_valid;                                                   // sound_io_agent:rf_source_valid -> sound_io_agent_rsp_fifo:in_valid
	wire          sound_io_agent_rf_source_startofpacket;                                           // sound_io_agent:rf_source_startofpacket -> sound_io_agent_rsp_fifo:in_startofpacket
	wire   [87:0] sound_io_agent_rf_source_data;                                                    // sound_io_agent:rf_source_data -> sound_io_agent_rsp_fifo:in_data
	wire          sound_io_agent_rf_source_ready;                                                   // sound_io_agent_rsp_fifo:in_ready -> sound_io_agent:rf_source_ready
	wire          sound_io_agent_rsp_fifo_out_endofpacket;                                          // sound_io_agent_rsp_fifo:out_endofpacket -> sound_io_agent:rf_sink_endofpacket
	wire          sound_io_agent_rsp_fifo_out_valid;                                                // sound_io_agent_rsp_fifo:out_valid -> sound_io_agent:rf_sink_valid
	wire          sound_io_agent_rsp_fifo_out_startofpacket;                                        // sound_io_agent_rsp_fifo:out_startofpacket -> sound_io_agent:rf_sink_startofpacket
	wire   [87:0] sound_io_agent_rsp_fifo_out_data;                                                 // sound_io_agent_rsp_fifo:out_data -> sound_io_agent:rf_sink_data
	wire          sound_io_agent_rsp_fifo_out_ready;                                                // sound_io_agent:rf_sink_ready -> sound_io_agent_rsp_fifo:out_ready
	wire          sound_io_agent_rdata_fifo_src_valid;                                              // sound_io_agent:rdata_fifo_src_valid -> sound_io_agent:rdata_fifo_sink_valid
	wire    [9:0] sound_io_agent_rdata_fifo_src_data;                                               // sound_io_agent:rdata_fifo_src_data -> sound_io_agent:rdata_fifo_sink_data
	wire          sound_io_agent_rdata_fifo_src_ready;                                              // sound_io_agent:rdata_fifo_sink_ready -> sound_io_agent:rdata_fifo_src_ready
	wire          sound_fm_agent_m0_waitrequest;                                                    // sound_fm_translator:uav_waitrequest -> sound_fm_agent:m0_waitrequest
	wire    [0:0] sound_fm_agent_m0_burstcount;                                                     // sound_fm_agent:m0_burstcount -> sound_fm_translator:uav_burstcount
	wire    [7:0] sound_fm_agent_m0_writedata;                                                      // sound_fm_agent:m0_writedata -> sound_fm_translator:uav_writedata
	wire   [31:0] sound_fm_agent_m0_address;                                                        // sound_fm_agent:m0_address -> sound_fm_translator:uav_address
	wire          sound_fm_agent_m0_write;                                                          // sound_fm_agent:m0_write -> sound_fm_translator:uav_write
	wire          sound_fm_agent_m0_lock;                                                           // sound_fm_agent:m0_lock -> sound_fm_translator:uav_lock
	wire          sound_fm_agent_m0_read;                                                           // sound_fm_agent:m0_read -> sound_fm_translator:uav_read
	wire    [7:0] sound_fm_agent_m0_readdata;                                                       // sound_fm_translator:uav_readdata -> sound_fm_agent:m0_readdata
	wire          sound_fm_agent_m0_readdatavalid;                                                  // sound_fm_translator:uav_readdatavalid -> sound_fm_agent:m0_readdatavalid
	wire          sound_fm_agent_m0_debugaccess;                                                    // sound_fm_agent:m0_debugaccess -> sound_fm_translator:uav_debugaccess
	wire    [0:0] sound_fm_agent_m0_byteenable;                                                     // sound_fm_agent:m0_byteenable -> sound_fm_translator:uav_byteenable
	wire          sound_fm_agent_rf_source_endofpacket;                                             // sound_fm_agent:rf_source_endofpacket -> sound_fm_agent_rsp_fifo:in_endofpacket
	wire          sound_fm_agent_rf_source_valid;                                                   // sound_fm_agent:rf_source_valid -> sound_fm_agent_rsp_fifo:in_valid
	wire          sound_fm_agent_rf_source_startofpacket;                                           // sound_fm_agent:rf_source_startofpacket -> sound_fm_agent_rsp_fifo:in_startofpacket
	wire   [87:0] sound_fm_agent_rf_source_data;                                                    // sound_fm_agent:rf_source_data -> sound_fm_agent_rsp_fifo:in_data
	wire          sound_fm_agent_rf_source_ready;                                                   // sound_fm_agent_rsp_fifo:in_ready -> sound_fm_agent:rf_source_ready
	wire          sound_fm_agent_rsp_fifo_out_endofpacket;                                          // sound_fm_agent_rsp_fifo:out_endofpacket -> sound_fm_agent:rf_sink_endofpacket
	wire          sound_fm_agent_rsp_fifo_out_valid;                                                // sound_fm_agent_rsp_fifo:out_valid -> sound_fm_agent:rf_sink_valid
	wire          sound_fm_agent_rsp_fifo_out_startofpacket;                                        // sound_fm_agent_rsp_fifo:out_startofpacket -> sound_fm_agent:rf_sink_startofpacket
	wire   [87:0] sound_fm_agent_rsp_fifo_out_data;                                                 // sound_fm_agent_rsp_fifo:out_data -> sound_fm_agent:rf_sink_data
	wire          sound_fm_agent_rsp_fifo_out_ready;                                                // sound_fm_agent:rf_sink_ready -> sound_fm_agent_rsp_fifo:out_ready
	wire          sound_fm_agent_rdata_fifo_src_valid;                                              // sound_fm_agent:rdata_fifo_src_valid -> sound_fm_agent:rdata_fifo_sink_valid
	wire    [9:0] sound_fm_agent_rdata_fifo_src_data;                                               // sound_fm_agent:rdata_fifo_src_data -> sound_fm_agent:rdata_fifo_sink_data
	wire          sound_fm_agent_rdata_fifo_src_ready;                                              // sound_fm_agent:rdata_fifo_sink_ready -> sound_fm_agent:rdata_fifo_src_ready
	wire          rtc_io_agent_m0_waitrequest;                                                      // rtc_io_translator:uav_waitrequest -> rtc_io_agent:m0_waitrequest
	wire    [0:0] rtc_io_agent_m0_burstcount;                                                       // rtc_io_agent:m0_burstcount -> rtc_io_translator:uav_burstcount
	wire    [7:0] rtc_io_agent_m0_writedata;                                                        // rtc_io_agent:m0_writedata -> rtc_io_translator:uav_writedata
	wire   [31:0] rtc_io_agent_m0_address;                                                          // rtc_io_agent:m0_address -> rtc_io_translator:uav_address
	wire          rtc_io_agent_m0_write;                                                            // rtc_io_agent:m0_write -> rtc_io_translator:uav_write
	wire          rtc_io_agent_m0_lock;                                                             // rtc_io_agent:m0_lock -> rtc_io_translator:uav_lock
	wire          rtc_io_agent_m0_read;                                                             // rtc_io_agent:m0_read -> rtc_io_translator:uav_read
	wire    [7:0] rtc_io_agent_m0_readdata;                                                         // rtc_io_translator:uav_readdata -> rtc_io_agent:m0_readdata
	wire          rtc_io_agent_m0_readdatavalid;                                                    // rtc_io_translator:uav_readdatavalid -> rtc_io_agent:m0_readdatavalid
	wire          rtc_io_agent_m0_debugaccess;                                                      // rtc_io_agent:m0_debugaccess -> rtc_io_translator:uav_debugaccess
	wire    [0:0] rtc_io_agent_m0_byteenable;                                                       // rtc_io_agent:m0_byteenable -> rtc_io_translator:uav_byteenable
	wire          rtc_io_agent_rf_source_endofpacket;                                               // rtc_io_agent:rf_source_endofpacket -> rtc_io_agent_rsp_fifo:in_endofpacket
	wire          rtc_io_agent_rf_source_valid;                                                     // rtc_io_agent:rf_source_valid -> rtc_io_agent_rsp_fifo:in_valid
	wire          rtc_io_agent_rf_source_startofpacket;                                             // rtc_io_agent:rf_source_startofpacket -> rtc_io_agent_rsp_fifo:in_startofpacket
	wire   [87:0] rtc_io_agent_rf_source_data;                                                      // rtc_io_agent:rf_source_data -> rtc_io_agent_rsp_fifo:in_data
	wire          rtc_io_agent_rf_source_ready;                                                     // rtc_io_agent_rsp_fifo:in_ready -> rtc_io_agent:rf_source_ready
	wire          rtc_io_agent_rsp_fifo_out_endofpacket;                                            // rtc_io_agent_rsp_fifo:out_endofpacket -> rtc_io_agent:rf_sink_endofpacket
	wire          rtc_io_agent_rsp_fifo_out_valid;                                                  // rtc_io_agent_rsp_fifo:out_valid -> rtc_io_agent:rf_sink_valid
	wire          rtc_io_agent_rsp_fifo_out_startofpacket;                                          // rtc_io_agent_rsp_fifo:out_startofpacket -> rtc_io_agent:rf_sink_startofpacket
	wire   [87:0] rtc_io_agent_rsp_fifo_out_data;                                                   // rtc_io_agent_rsp_fifo:out_data -> rtc_io_agent:rf_sink_data
	wire          rtc_io_agent_rsp_fifo_out_ready;                                                  // rtc_io_agent:rf_sink_ready -> rtc_io_agent_rsp_fifo:out_ready
	wire          rtc_io_agent_rdata_fifo_src_valid;                                                // rtc_io_agent:rdata_fifo_src_valid -> rtc_io_agent:rdata_fifo_sink_valid
	wire    [9:0] rtc_io_agent_rdata_fifo_src_data;                                                 // rtc_io_agent:rdata_fifo_src_data -> rtc_io_agent:rdata_fifo_sink_data
	wire          rtc_io_agent_rdata_fifo_src_ready;                                                // rtc_io_agent:rdata_fifo_sink_ready -> rtc_io_agent:rdata_fifo_src_ready
	wire          pit_io_agent_m0_waitrequest;                                                      // pit_io_translator:uav_waitrequest -> pit_io_agent:m0_waitrequest
	wire    [0:0] pit_io_agent_m0_burstcount;                                                       // pit_io_agent:m0_burstcount -> pit_io_translator:uav_burstcount
	wire    [7:0] pit_io_agent_m0_writedata;                                                        // pit_io_agent:m0_writedata -> pit_io_translator:uav_writedata
	wire   [31:0] pit_io_agent_m0_address;                                                          // pit_io_agent:m0_address -> pit_io_translator:uav_address
	wire          pit_io_agent_m0_write;                                                            // pit_io_agent:m0_write -> pit_io_translator:uav_write
	wire          pit_io_agent_m0_lock;                                                             // pit_io_agent:m0_lock -> pit_io_translator:uav_lock
	wire          pit_io_agent_m0_read;                                                             // pit_io_agent:m0_read -> pit_io_translator:uav_read
	wire    [7:0] pit_io_agent_m0_readdata;                                                         // pit_io_translator:uav_readdata -> pit_io_agent:m0_readdata
	wire          pit_io_agent_m0_readdatavalid;                                                    // pit_io_translator:uav_readdatavalid -> pit_io_agent:m0_readdatavalid
	wire          pit_io_agent_m0_debugaccess;                                                      // pit_io_agent:m0_debugaccess -> pit_io_translator:uav_debugaccess
	wire    [0:0] pit_io_agent_m0_byteenable;                                                       // pit_io_agent:m0_byteenable -> pit_io_translator:uav_byteenable
	wire          pit_io_agent_rf_source_endofpacket;                                               // pit_io_agent:rf_source_endofpacket -> pit_io_agent_rsp_fifo:in_endofpacket
	wire          pit_io_agent_rf_source_valid;                                                     // pit_io_agent:rf_source_valid -> pit_io_agent_rsp_fifo:in_valid
	wire          pit_io_agent_rf_source_startofpacket;                                             // pit_io_agent:rf_source_startofpacket -> pit_io_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pit_io_agent_rf_source_data;                                                      // pit_io_agent:rf_source_data -> pit_io_agent_rsp_fifo:in_data
	wire          pit_io_agent_rf_source_ready;                                                     // pit_io_agent_rsp_fifo:in_ready -> pit_io_agent:rf_source_ready
	wire          pit_io_agent_rsp_fifo_out_endofpacket;                                            // pit_io_agent_rsp_fifo:out_endofpacket -> pit_io_agent:rf_sink_endofpacket
	wire          pit_io_agent_rsp_fifo_out_valid;                                                  // pit_io_agent_rsp_fifo:out_valid -> pit_io_agent:rf_sink_valid
	wire          pit_io_agent_rsp_fifo_out_startofpacket;                                          // pit_io_agent_rsp_fifo:out_startofpacket -> pit_io_agent:rf_sink_startofpacket
	wire   [87:0] pit_io_agent_rsp_fifo_out_data;                                                   // pit_io_agent_rsp_fifo:out_data -> pit_io_agent:rf_sink_data
	wire          pit_io_agent_rsp_fifo_out_ready;                                                  // pit_io_agent:rf_sink_ready -> pit_io_agent_rsp_fifo:out_ready
	wire          pit_io_agent_rdata_fifo_src_valid;                                                // pit_io_agent:rdata_fifo_src_valid -> pit_io_agent:rdata_fifo_sink_valid
	wire    [9:0] pit_io_agent_rdata_fifo_src_data;                                                 // pit_io_agent:rdata_fifo_src_data -> pit_io_agent:rdata_fifo_sink_data
	wire          pit_io_agent_rdata_fifo_src_ready;                                                // pit_io_agent:rdata_fifo_sink_ready -> pit_io_agent:rdata_fifo_src_ready
	wire          pic_master_agent_m0_waitrequest;                                                  // pic_master_translator:uav_waitrequest -> pic_master_agent:m0_waitrequest
	wire    [0:0] pic_master_agent_m0_burstcount;                                                   // pic_master_agent:m0_burstcount -> pic_master_translator:uav_burstcount
	wire    [7:0] pic_master_agent_m0_writedata;                                                    // pic_master_agent:m0_writedata -> pic_master_translator:uav_writedata
	wire   [31:0] pic_master_agent_m0_address;                                                      // pic_master_agent:m0_address -> pic_master_translator:uav_address
	wire          pic_master_agent_m0_write;                                                        // pic_master_agent:m0_write -> pic_master_translator:uav_write
	wire          pic_master_agent_m0_lock;                                                         // pic_master_agent:m0_lock -> pic_master_translator:uav_lock
	wire          pic_master_agent_m0_read;                                                         // pic_master_agent:m0_read -> pic_master_translator:uav_read
	wire    [7:0] pic_master_agent_m0_readdata;                                                     // pic_master_translator:uav_readdata -> pic_master_agent:m0_readdata
	wire          pic_master_agent_m0_readdatavalid;                                                // pic_master_translator:uav_readdatavalid -> pic_master_agent:m0_readdatavalid
	wire          pic_master_agent_m0_debugaccess;                                                  // pic_master_agent:m0_debugaccess -> pic_master_translator:uav_debugaccess
	wire    [0:0] pic_master_agent_m0_byteenable;                                                   // pic_master_agent:m0_byteenable -> pic_master_translator:uav_byteenable
	wire          pic_master_agent_rf_source_endofpacket;                                           // pic_master_agent:rf_source_endofpacket -> pic_master_agent_rsp_fifo:in_endofpacket
	wire          pic_master_agent_rf_source_valid;                                                 // pic_master_agent:rf_source_valid -> pic_master_agent_rsp_fifo:in_valid
	wire          pic_master_agent_rf_source_startofpacket;                                         // pic_master_agent:rf_source_startofpacket -> pic_master_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pic_master_agent_rf_source_data;                                                  // pic_master_agent:rf_source_data -> pic_master_agent_rsp_fifo:in_data
	wire          pic_master_agent_rf_source_ready;                                                 // pic_master_agent_rsp_fifo:in_ready -> pic_master_agent:rf_source_ready
	wire          pic_master_agent_rsp_fifo_out_endofpacket;                                        // pic_master_agent_rsp_fifo:out_endofpacket -> pic_master_agent:rf_sink_endofpacket
	wire          pic_master_agent_rsp_fifo_out_valid;                                              // pic_master_agent_rsp_fifo:out_valid -> pic_master_agent:rf_sink_valid
	wire          pic_master_agent_rsp_fifo_out_startofpacket;                                      // pic_master_agent_rsp_fifo:out_startofpacket -> pic_master_agent:rf_sink_startofpacket
	wire   [87:0] pic_master_agent_rsp_fifo_out_data;                                               // pic_master_agent_rsp_fifo:out_data -> pic_master_agent:rf_sink_data
	wire          pic_master_agent_rsp_fifo_out_ready;                                              // pic_master_agent:rf_sink_ready -> pic_master_agent_rsp_fifo:out_ready
	wire          pic_master_agent_rdata_fifo_src_valid;                                            // pic_master_agent:rdata_fifo_src_valid -> pic_master_agent:rdata_fifo_sink_valid
	wire    [9:0] pic_master_agent_rdata_fifo_src_data;                                             // pic_master_agent:rdata_fifo_src_data -> pic_master_agent:rdata_fifo_sink_data
	wire          pic_master_agent_rdata_fifo_src_ready;                                            // pic_master_agent:rdata_fifo_sink_ready -> pic_master_agent:rdata_fifo_src_ready
	wire          pic_slave_agent_m0_waitrequest;                                                   // pic_slave_translator:uav_waitrequest -> pic_slave_agent:m0_waitrequest
	wire    [0:0] pic_slave_agent_m0_burstcount;                                                    // pic_slave_agent:m0_burstcount -> pic_slave_translator:uav_burstcount
	wire    [7:0] pic_slave_agent_m0_writedata;                                                     // pic_slave_agent:m0_writedata -> pic_slave_translator:uav_writedata
	wire   [31:0] pic_slave_agent_m0_address;                                                       // pic_slave_agent:m0_address -> pic_slave_translator:uav_address
	wire          pic_slave_agent_m0_write;                                                         // pic_slave_agent:m0_write -> pic_slave_translator:uav_write
	wire          pic_slave_agent_m0_lock;                                                          // pic_slave_agent:m0_lock -> pic_slave_translator:uav_lock
	wire          pic_slave_agent_m0_read;                                                          // pic_slave_agent:m0_read -> pic_slave_translator:uav_read
	wire    [7:0] pic_slave_agent_m0_readdata;                                                      // pic_slave_translator:uav_readdata -> pic_slave_agent:m0_readdata
	wire          pic_slave_agent_m0_readdatavalid;                                                 // pic_slave_translator:uav_readdatavalid -> pic_slave_agent:m0_readdatavalid
	wire          pic_slave_agent_m0_debugaccess;                                                   // pic_slave_agent:m0_debugaccess -> pic_slave_translator:uav_debugaccess
	wire    [0:0] pic_slave_agent_m0_byteenable;                                                    // pic_slave_agent:m0_byteenable -> pic_slave_translator:uav_byteenable
	wire          pic_slave_agent_rf_source_endofpacket;                                            // pic_slave_agent:rf_source_endofpacket -> pic_slave_agent_rsp_fifo:in_endofpacket
	wire          pic_slave_agent_rf_source_valid;                                                  // pic_slave_agent:rf_source_valid -> pic_slave_agent_rsp_fifo:in_valid
	wire          pic_slave_agent_rf_source_startofpacket;                                          // pic_slave_agent:rf_source_startofpacket -> pic_slave_agent_rsp_fifo:in_startofpacket
	wire   [87:0] pic_slave_agent_rf_source_data;                                                   // pic_slave_agent:rf_source_data -> pic_slave_agent_rsp_fifo:in_data
	wire          pic_slave_agent_rf_source_ready;                                                  // pic_slave_agent_rsp_fifo:in_ready -> pic_slave_agent:rf_source_ready
	wire          pic_slave_agent_rsp_fifo_out_endofpacket;                                         // pic_slave_agent_rsp_fifo:out_endofpacket -> pic_slave_agent:rf_sink_endofpacket
	wire          pic_slave_agent_rsp_fifo_out_valid;                                               // pic_slave_agent_rsp_fifo:out_valid -> pic_slave_agent:rf_sink_valid
	wire          pic_slave_agent_rsp_fifo_out_startofpacket;                                       // pic_slave_agent_rsp_fifo:out_startofpacket -> pic_slave_agent:rf_sink_startofpacket
	wire   [87:0] pic_slave_agent_rsp_fifo_out_data;                                                // pic_slave_agent_rsp_fifo:out_data -> pic_slave_agent:rf_sink_data
	wire          pic_slave_agent_rsp_fifo_out_ready;                                               // pic_slave_agent:rf_sink_ready -> pic_slave_agent_rsp_fifo:out_ready
	wire          pic_slave_agent_rdata_fifo_src_valid;                                             // pic_slave_agent:rdata_fifo_src_valid -> pic_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] pic_slave_agent_rdata_fifo_src_data;                                              // pic_slave_agent:rdata_fifo_src_data -> pic_slave_agent:rdata_fifo_sink_data
	wire          pic_slave_agent_rdata_fifo_src_ready;                                             // pic_slave_agent:rdata_fifo_sink_ready -> pic_slave_agent:rdata_fifo_src_ready
	wire          hdd_io_agent_m0_waitrequest;                                                      // hdd_io_translator:uav_waitrequest -> hdd_io_agent:m0_waitrequest
	wire    [2:0] hdd_io_agent_m0_burstcount;                                                       // hdd_io_agent:m0_burstcount -> hdd_io_translator:uav_burstcount
	wire   [31:0] hdd_io_agent_m0_writedata;                                                        // hdd_io_agent:m0_writedata -> hdd_io_translator:uav_writedata
	wire   [31:0] hdd_io_agent_m0_address;                                                          // hdd_io_agent:m0_address -> hdd_io_translator:uav_address
	wire          hdd_io_agent_m0_write;                                                            // hdd_io_agent:m0_write -> hdd_io_translator:uav_write
	wire          hdd_io_agent_m0_lock;                                                             // hdd_io_agent:m0_lock -> hdd_io_translator:uav_lock
	wire          hdd_io_agent_m0_read;                                                             // hdd_io_agent:m0_read -> hdd_io_translator:uav_read
	wire   [31:0] hdd_io_agent_m0_readdata;                                                         // hdd_io_translator:uav_readdata -> hdd_io_agent:m0_readdata
	wire          hdd_io_agent_m0_readdatavalid;                                                    // hdd_io_translator:uav_readdatavalid -> hdd_io_agent:m0_readdatavalid
	wire          hdd_io_agent_m0_debugaccess;                                                      // hdd_io_agent:m0_debugaccess -> hdd_io_translator:uav_debugaccess
	wire    [3:0] hdd_io_agent_m0_byteenable;                                                       // hdd_io_agent:m0_byteenable -> hdd_io_translator:uav_byteenable
	wire          hdd_io_agent_rf_source_endofpacket;                                               // hdd_io_agent:rf_source_endofpacket -> hdd_io_agent_rsp_fifo:in_endofpacket
	wire          hdd_io_agent_rf_source_valid;                                                     // hdd_io_agent:rf_source_valid -> hdd_io_agent_rsp_fifo:in_valid
	wire          hdd_io_agent_rf_source_startofpacket;                                             // hdd_io_agent:rf_source_startofpacket -> hdd_io_agent_rsp_fifo:in_startofpacket
	wire  [114:0] hdd_io_agent_rf_source_data;                                                      // hdd_io_agent:rf_source_data -> hdd_io_agent_rsp_fifo:in_data
	wire          hdd_io_agent_rf_source_ready;                                                     // hdd_io_agent_rsp_fifo:in_ready -> hdd_io_agent:rf_source_ready
	wire          hdd_io_agent_rsp_fifo_out_endofpacket;                                            // hdd_io_agent_rsp_fifo:out_endofpacket -> hdd_io_agent:rf_sink_endofpacket
	wire          hdd_io_agent_rsp_fifo_out_valid;                                                  // hdd_io_agent_rsp_fifo:out_valid -> hdd_io_agent:rf_sink_valid
	wire          hdd_io_agent_rsp_fifo_out_startofpacket;                                          // hdd_io_agent_rsp_fifo:out_startofpacket -> hdd_io_agent:rf_sink_startofpacket
	wire  [114:0] hdd_io_agent_rsp_fifo_out_data;                                                   // hdd_io_agent_rsp_fifo:out_data -> hdd_io_agent:rf_sink_data
	wire          hdd_io_agent_rsp_fifo_out_ready;                                                  // hdd_io_agent:rf_sink_ready -> hdd_io_agent_rsp_fifo:out_ready
	wire          hdd_io_agent_rdata_fifo_src_valid;                                                // hdd_io_agent:rdata_fifo_src_valid -> hdd_io_agent:rdata_fifo_sink_valid
	wire   [33:0] hdd_io_agent_rdata_fifo_src_data;                                                 // hdd_io_agent:rdata_fifo_src_data -> hdd_io_agent:rdata_fifo_sink_data
	wire          hdd_io_agent_rdata_fifo_src_ready;                                                // hdd_io_agent:rdata_fifo_sink_ready -> hdd_io_agent:rdata_fifo_src_ready
	wire          cmd_mux_028_src_endofpacket;                                                      // cmd_mux_028:src_endofpacket -> hdd_io_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                            // cmd_mux_028:src_valid -> hdd_io_agent:cp_valid
	wire          cmd_mux_028_src_startofpacket;                                                    // cmd_mux_028:src_startofpacket -> hdd_io_agent:cp_startofpacket
	wire  [113:0] cmd_mux_028_src_data;                                                             // cmd_mux_028:src_data -> hdd_io_agent:cp_data
	wire   [31:0] cmd_mux_028_src_channel;                                                          // cmd_mux_028:src_channel -> hdd_io_agent:cp_channel
	wire          cmd_mux_028_src_ready;                                                            // hdd_io_agent:cp_ready -> cmd_mux_028:src_ready
	wire          floppy_io_agent_m0_waitrequest;                                                   // floppy_io_translator:uav_waitrequest -> floppy_io_agent:m0_waitrequest
	wire    [0:0] floppy_io_agent_m0_burstcount;                                                    // floppy_io_agent:m0_burstcount -> floppy_io_translator:uav_burstcount
	wire    [7:0] floppy_io_agent_m0_writedata;                                                     // floppy_io_agent:m0_writedata -> floppy_io_translator:uav_writedata
	wire   [31:0] floppy_io_agent_m0_address;                                                       // floppy_io_agent:m0_address -> floppy_io_translator:uav_address
	wire          floppy_io_agent_m0_write;                                                         // floppy_io_agent:m0_write -> floppy_io_translator:uav_write
	wire          floppy_io_agent_m0_lock;                                                          // floppy_io_agent:m0_lock -> floppy_io_translator:uav_lock
	wire          floppy_io_agent_m0_read;                                                          // floppy_io_agent:m0_read -> floppy_io_translator:uav_read
	wire    [7:0] floppy_io_agent_m0_readdata;                                                      // floppy_io_translator:uav_readdata -> floppy_io_agent:m0_readdata
	wire          floppy_io_agent_m0_readdatavalid;                                                 // floppy_io_translator:uav_readdatavalid -> floppy_io_agent:m0_readdatavalid
	wire          floppy_io_agent_m0_debugaccess;                                                   // floppy_io_agent:m0_debugaccess -> floppy_io_translator:uav_debugaccess
	wire    [0:0] floppy_io_agent_m0_byteenable;                                                    // floppy_io_agent:m0_byteenable -> floppy_io_translator:uav_byteenable
	wire          floppy_io_agent_rf_source_endofpacket;                                            // floppy_io_agent:rf_source_endofpacket -> floppy_io_agent_rsp_fifo:in_endofpacket
	wire          floppy_io_agent_rf_source_valid;                                                  // floppy_io_agent:rf_source_valid -> floppy_io_agent_rsp_fifo:in_valid
	wire          floppy_io_agent_rf_source_startofpacket;                                          // floppy_io_agent:rf_source_startofpacket -> floppy_io_agent_rsp_fifo:in_startofpacket
	wire   [87:0] floppy_io_agent_rf_source_data;                                                   // floppy_io_agent:rf_source_data -> floppy_io_agent_rsp_fifo:in_data
	wire          floppy_io_agent_rf_source_ready;                                                  // floppy_io_agent_rsp_fifo:in_ready -> floppy_io_agent:rf_source_ready
	wire          floppy_io_agent_rsp_fifo_out_endofpacket;                                         // floppy_io_agent_rsp_fifo:out_endofpacket -> floppy_io_agent:rf_sink_endofpacket
	wire          floppy_io_agent_rsp_fifo_out_valid;                                               // floppy_io_agent_rsp_fifo:out_valid -> floppy_io_agent:rf_sink_valid
	wire          floppy_io_agent_rsp_fifo_out_startofpacket;                                       // floppy_io_agent_rsp_fifo:out_startofpacket -> floppy_io_agent:rf_sink_startofpacket
	wire   [87:0] floppy_io_agent_rsp_fifo_out_data;                                                // floppy_io_agent_rsp_fifo:out_data -> floppy_io_agent:rf_sink_data
	wire          floppy_io_agent_rsp_fifo_out_ready;                                               // floppy_io_agent:rf_sink_ready -> floppy_io_agent_rsp_fifo:out_ready
	wire          floppy_io_agent_rdata_fifo_src_valid;                                             // floppy_io_agent:rdata_fifo_src_valid -> floppy_io_agent:rdata_fifo_sink_valid
	wire    [9:0] floppy_io_agent_rdata_fifo_src_data;                                              // floppy_io_agent:rdata_fifo_src_data -> floppy_io_agent:rdata_fifo_sink_data
	wire          floppy_io_agent_rdata_fifo_src_ready;                                             // floppy_io_agent:rdata_fifo_sink_ready -> floppy_io_agent:rdata_fifo_src_ready
	wire          ps2_io_agent_m0_waitrequest;                                                      // ps2_io_translator:uav_waitrequest -> ps2_io_agent:m0_waitrequest
	wire    [0:0] ps2_io_agent_m0_burstcount;                                                       // ps2_io_agent:m0_burstcount -> ps2_io_translator:uav_burstcount
	wire    [7:0] ps2_io_agent_m0_writedata;                                                        // ps2_io_agent:m0_writedata -> ps2_io_translator:uav_writedata
	wire   [31:0] ps2_io_agent_m0_address;                                                          // ps2_io_agent:m0_address -> ps2_io_translator:uav_address
	wire          ps2_io_agent_m0_write;                                                            // ps2_io_agent:m0_write -> ps2_io_translator:uav_write
	wire          ps2_io_agent_m0_lock;                                                             // ps2_io_agent:m0_lock -> ps2_io_translator:uav_lock
	wire          ps2_io_agent_m0_read;                                                             // ps2_io_agent:m0_read -> ps2_io_translator:uav_read
	wire    [7:0] ps2_io_agent_m0_readdata;                                                         // ps2_io_translator:uav_readdata -> ps2_io_agent:m0_readdata
	wire          ps2_io_agent_m0_readdatavalid;                                                    // ps2_io_translator:uav_readdatavalid -> ps2_io_agent:m0_readdatavalid
	wire          ps2_io_agent_m0_debugaccess;                                                      // ps2_io_agent:m0_debugaccess -> ps2_io_translator:uav_debugaccess
	wire    [0:0] ps2_io_agent_m0_byteenable;                                                       // ps2_io_agent:m0_byteenable -> ps2_io_translator:uav_byteenable
	wire          ps2_io_agent_rf_source_endofpacket;                                               // ps2_io_agent:rf_source_endofpacket -> ps2_io_agent_rsp_fifo:in_endofpacket
	wire          ps2_io_agent_rf_source_valid;                                                     // ps2_io_agent:rf_source_valid -> ps2_io_agent_rsp_fifo:in_valid
	wire          ps2_io_agent_rf_source_startofpacket;                                             // ps2_io_agent:rf_source_startofpacket -> ps2_io_agent_rsp_fifo:in_startofpacket
	wire   [87:0] ps2_io_agent_rf_source_data;                                                      // ps2_io_agent:rf_source_data -> ps2_io_agent_rsp_fifo:in_data
	wire          ps2_io_agent_rf_source_ready;                                                     // ps2_io_agent_rsp_fifo:in_ready -> ps2_io_agent:rf_source_ready
	wire          ps2_io_agent_rsp_fifo_out_endofpacket;                                            // ps2_io_agent_rsp_fifo:out_endofpacket -> ps2_io_agent:rf_sink_endofpacket
	wire          ps2_io_agent_rsp_fifo_out_valid;                                                  // ps2_io_agent_rsp_fifo:out_valid -> ps2_io_agent:rf_sink_valid
	wire          ps2_io_agent_rsp_fifo_out_startofpacket;                                          // ps2_io_agent_rsp_fifo:out_startofpacket -> ps2_io_agent:rf_sink_startofpacket
	wire   [87:0] ps2_io_agent_rsp_fifo_out_data;                                                   // ps2_io_agent_rsp_fifo:out_data -> ps2_io_agent:rf_sink_data
	wire          ps2_io_agent_rsp_fifo_out_ready;                                                  // ps2_io_agent:rf_sink_ready -> ps2_io_agent_rsp_fifo:out_ready
	wire          ps2_io_agent_rdata_fifo_src_valid;                                                // ps2_io_agent:rdata_fifo_src_valid -> ps2_io_agent:rdata_fifo_sink_valid
	wire    [9:0] ps2_io_agent_rdata_fifo_src_data;                                                 // ps2_io_agent:rdata_fifo_src_data -> ps2_io_agent:rdata_fifo_sink_data
	wire          ps2_io_agent_rdata_fifo_src_ready;                                                // ps2_io_agent:rdata_fifo_sink_ready -> ps2_io_agent:rdata_fifo_src_ready
	wire          ps2_sysctl_agent_m0_waitrequest;                                                  // ps2_sysctl_translator:uav_waitrequest -> ps2_sysctl_agent:m0_waitrequest
	wire    [0:0] ps2_sysctl_agent_m0_burstcount;                                                   // ps2_sysctl_agent:m0_burstcount -> ps2_sysctl_translator:uav_burstcount
	wire    [7:0] ps2_sysctl_agent_m0_writedata;                                                    // ps2_sysctl_agent:m0_writedata -> ps2_sysctl_translator:uav_writedata
	wire   [31:0] ps2_sysctl_agent_m0_address;                                                      // ps2_sysctl_agent:m0_address -> ps2_sysctl_translator:uav_address
	wire          ps2_sysctl_agent_m0_write;                                                        // ps2_sysctl_agent:m0_write -> ps2_sysctl_translator:uav_write
	wire          ps2_sysctl_agent_m0_lock;                                                         // ps2_sysctl_agent:m0_lock -> ps2_sysctl_translator:uav_lock
	wire          ps2_sysctl_agent_m0_read;                                                         // ps2_sysctl_agent:m0_read -> ps2_sysctl_translator:uav_read
	wire    [7:0] ps2_sysctl_agent_m0_readdata;                                                     // ps2_sysctl_translator:uav_readdata -> ps2_sysctl_agent:m0_readdata
	wire          ps2_sysctl_agent_m0_readdatavalid;                                                // ps2_sysctl_translator:uav_readdatavalid -> ps2_sysctl_agent:m0_readdatavalid
	wire          ps2_sysctl_agent_m0_debugaccess;                                                  // ps2_sysctl_agent:m0_debugaccess -> ps2_sysctl_translator:uav_debugaccess
	wire    [0:0] ps2_sysctl_agent_m0_byteenable;                                                   // ps2_sysctl_agent:m0_byteenable -> ps2_sysctl_translator:uav_byteenable
	wire          ps2_sysctl_agent_rf_source_endofpacket;                                           // ps2_sysctl_agent:rf_source_endofpacket -> ps2_sysctl_agent_rsp_fifo:in_endofpacket
	wire          ps2_sysctl_agent_rf_source_valid;                                                 // ps2_sysctl_agent:rf_source_valid -> ps2_sysctl_agent_rsp_fifo:in_valid
	wire          ps2_sysctl_agent_rf_source_startofpacket;                                         // ps2_sysctl_agent:rf_source_startofpacket -> ps2_sysctl_agent_rsp_fifo:in_startofpacket
	wire   [87:0] ps2_sysctl_agent_rf_source_data;                                                  // ps2_sysctl_agent:rf_source_data -> ps2_sysctl_agent_rsp_fifo:in_data
	wire          ps2_sysctl_agent_rf_source_ready;                                                 // ps2_sysctl_agent_rsp_fifo:in_ready -> ps2_sysctl_agent:rf_source_ready
	wire          ps2_sysctl_agent_rsp_fifo_out_endofpacket;                                        // ps2_sysctl_agent_rsp_fifo:out_endofpacket -> ps2_sysctl_agent:rf_sink_endofpacket
	wire          ps2_sysctl_agent_rsp_fifo_out_valid;                                              // ps2_sysctl_agent_rsp_fifo:out_valid -> ps2_sysctl_agent:rf_sink_valid
	wire          ps2_sysctl_agent_rsp_fifo_out_startofpacket;                                      // ps2_sysctl_agent_rsp_fifo:out_startofpacket -> ps2_sysctl_agent:rf_sink_startofpacket
	wire   [87:0] ps2_sysctl_agent_rsp_fifo_out_data;                                               // ps2_sysctl_agent_rsp_fifo:out_data -> ps2_sysctl_agent:rf_sink_data
	wire          ps2_sysctl_agent_rsp_fifo_out_ready;                                              // ps2_sysctl_agent:rf_sink_ready -> ps2_sysctl_agent_rsp_fifo:out_ready
	wire          ps2_sysctl_agent_rdata_fifo_src_valid;                                            // ps2_sysctl_agent:rdata_fifo_src_valid -> ps2_sysctl_agent:rdata_fifo_sink_valid
	wire    [9:0] ps2_sysctl_agent_rdata_fifo_src_data;                                             // ps2_sysctl_agent:rdata_fifo_src_data -> ps2_sysctl_agent:rdata_fifo_sink_data
	wire          ps2_sysctl_agent_rdata_fifo_src_ready;                                            // ps2_sysctl_agent:rdata_fifo_sink_ready -> ps2_sysctl_agent:rdata_fifo_src_ready
	wire          nios2_data_master_agent_cp_endofpacket;                                           // nios2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                                 // nios2_data_master_agent:cp_valid -> router:sink_valid
	wire          nios2_data_master_agent_cp_startofpacket;                                         // nios2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [113:0] nios2_data_master_agent_cp_data;                                                  // nios2_data_master_agent:cp_data -> router:sink_data
	wire          nios2_data_master_agent_cp_ready;                                                 // router:sink_ready -> nios2_data_master_agent:cp_ready
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [113:0] router_src_data;                                                                  // router:src_data -> cmd_demux:sink_data
	wire   [31:0] router_src_channel;                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_ready;                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire          floppy_avalon_master_agent_cp_endofpacket;                                        // floppy_avalon_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          floppy_avalon_master_agent_cp_valid;                                              // floppy_avalon_master_agent:cp_valid -> router_001:sink_valid
	wire          floppy_avalon_master_agent_cp_startofpacket;                                      // floppy_avalon_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [113:0] floppy_avalon_master_agent_cp_data;                                               // floppy_avalon_master_agent:cp_data -> router_001:sink_data
	wire          floppy_avalon_master_agent_cp_ready;                                              // router_001:sink_ready -> floppy_avalon_master_agent:cp_ready
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [113:0] router_001_src_data;                                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire   [31:0] router_001_src_channel;                                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_ready;                                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire          hdd_avalon_master_agent_cp_endofpacket;                                           // hdd_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hdd_avalon_master_agent_cp_valid;                                                 // hdd_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire          hdd_avalon_master_agent_cp_startofpacket;                                         // hdd_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [113:0] hdd_avalon_master_agent_cp_data;                                                  // hdd_avalon_master_agent:cp_data -> router_002:sink_data
	wire          hdd_avalon_master_agent_cp_ready;                                                 // router_002:sink_ready -> hdd_avalon_master_agent:cp_ready
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> cmd_demux_002:sink_valid
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [113:0] router_002_src_data;                                                              // router_002:src_data -> cmd_demux_002:sink_data
	wire   [31:0] router_002_src_channel;                                                           // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_ready;                                                             // cmd_demux_002:sink_ready -> router_002:src_ready
	wire          pc_bus_avalon_sdram_master_agent_cp_endofpacket;                                  // pc_bus_avalon_sdram_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          pc_bus_avalon_sdram_master_agent_cp_valid;                                        // pc_bus_avalon_sdram_master_agent:cp_valid -> router_003:sink_valid
	wire          pc_bus_avalon_sdram_master_agent_cp_startofpacket;                                // pc_bus_avalon_sdram_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire  [113:0] pc_bus_avalon_sdram_master_agent_cp_data;                                         // pc_bus_avalon_sdram_master_agent:cp_data -> router_003:sink_data
	wire          pc_bus_avalon_sdram_master_agent_cp_ready;                                        // router_003:sink_ready -> pc_bus_avalon_sdram_master_agent:cp_ready
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> cmd_demux_003:sink_valid
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire  [113:0] router_003_src_data;                                                              // router_003:src_data -> cmd_demux_003:sink_data
	wire   [31:0] router_003_src_channel;                                                           // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_ready;                                                             // cmd_demux_003:sink_ready -> router_003:src_ready
	wire          pc_dma_avalon_master_agent_cp_endofpacket;                                        // pc_dma_avalon_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          pc_dma_avalon_master_agent_cp_valid;                                              // pc_dma_avalon_master_agent:cp_valid -> router_004:sink_valid
	wire          pc_dma_avalon_master_agent_cp_startofpacket;                                      // pc_dma_avalon_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire   [86:0] pc_dma_avalon_master_agent_cp_data;                                               // pc_dma_avalon_master_agent:cp_data -> router_004:sink_data
	wire          pc_dma_avalon_master_agent_cp_ready;                                              // router_004:sink_ready -> pc_dma_avalon_master_agent:cp_ready
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> cmd_demux_004:sink_valid
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire   [86:0] router_004_src_data;                                                              // router_004:src_data -> cmd_demux_004:sink_data
	wire   [31:0] router_004_src_channel;                                                           // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_ready;                                                             // cmd_demux_004:sink_ready -> router_004:src_ready
	wire          driver_sd_avalon_master_0_agent_cp_endofpacket;                                   // driver_sd_avalon_master_0_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          driver_sd_avalon_master_0_agent_cp_valid;                                         // driver_sd_avalon_master_0_agent:cp_valid -> router_005:sink_valid
	wire          driver_sd_avalon_master_0_agent_cp_startofpacket;                                 // driver_sd_avalon_master_0_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire  [113:0] driver_sd_avalon_master_0_agent_cp_data;                                          // driver_sd_avalon_master_0_agent:cp_data -> router_005:sink_data
	wire          driver_sd_avalon_master_0_agent_cp_ready;                                         // router_005:sink_ready -> driver_sd_avalon_master_0_agent:cp_ready
	wire          nios2_instruction_master_agent_cp_endofpacket;                                    // nios2_instruction_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                          // nios2_instruction_master_agent:cp_valid -> router_006:sink_valid
	wire          nios2_instruction_master_agent_cp_startofpacket;                                  // nios2_instruction_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire  [113:0] nios2_instruction_master_agent_cp_data;                                           // nios2_instruction_master_agent:cp_data -> router_006:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                          // router_006:sink_ready -> nios2_instruction_master_agent:cp_ready
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> cmd_demux_006:sink_valid
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire  [113:0] router_006_src_data;                                                              // router_006:src_data -> cmd_demux_006:sink_data
	wire   [31:0] router_006_src_channel;                                                           // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_ready;                                                             // cmd_demux_006:sink_ready -> router_006:src_ready
	wire          ao486_avalon_io_agent_cp_endofpacket;                                             // ao486_avalon_io_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          ao486_avalon_io_agent_cp_valid;                                                   // ao486_avalon_io_agent:cp_valid -> router_007:sink_valid
	wire          ao486_avalon_io_agent_cp_startofpacket;                                           // ao486_avalon_io_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire  [113:0] ao486_avalon_io_agent_cp_data;                                                    // ao486_avalon_io_agent:cp_data -> router_007:sink_data
	wire          ao486_avalon_io_agent_cp_ready;                                                   // router_007:sink_ready -> ao486_avalon_io_agent:cp_ready
	wire          nios2_jtag_debug_module_agent_rp_endofpacket;                                     // nios2_jtag_debug_module_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          nios2_jtag_debug_module_agent_rp_valid;                                           // nios2_jtag_debug_module_agent:rp_valid -> router_008:sink_valid
	wire          nios2_jtag_debug_module_agent_rp_startofpacket;                                   // nios2_jtag_debug_module_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [113:0] nios2_jtag_debug_module_agent_rp_data;                                            // nios2_jtag_debug_module_agent:rp_data -> router_008:sink_data
	wire          nios2_jtag_debug_module_agent_rp_ready;                                           // router_008:sink_ready -> nios2_jtag_debug_module_agent:rp_ready
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux:sink_valid
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [113:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux:sink_data
	wire   [31:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_ready;                                                             // rsp_demux:sink_ready -> router_008:src_ready
	wire          onchip_for_nios2_s1_agent_rp_endofpacket;                                         // onchip_for_nios2_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          onchip_for_nios2_s1_agent_rp_valid;                                               // onchip_for_nios2_s1_agent:rp_valid -> router_009:sink_valid
	wire          onchip_for_nios2_s1_agent_rp_startofpacket;                                       // onchip_for_nios2_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [113:0] onchip_for_nios2_s1_agent_rp_data;                                                // onchip_for_nios2_s1_agent:rp_data -> router_009:sink_data
	wire          onchip_for_nios2_s1_agent_rp_ready;                                               // router_009:sink_ready -> onchip_for_nios2_s1_agent:rp_ready
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_001:sink_valid
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [113:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_001:sink_data
	wire   [31:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_ready;                                                             // rsp_demux_001:sink_ready -> router_009:src_ready
	wire          pc_bus_ctrl_agent_rp_endofpacket;                                                 // pc_bus_ctrl_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          pc_bus_ctrl_agent_rp_valid;                                                       // pc_bus_ctrl_agent:rp_valid -> router_010:sink_valid
	wire          pc_bus_ctrl_agent_rp_startofpacket;                                               // pc_bus_ctrl_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [113:0] pc_bus_ctrl_agent_rp_data;                                                        // pc_bus_ctrl_agent:rp_data -> router_010:sink_data
	wire          pc_bus_ctrl_agent_rp_ready;                                                       // router_010:sink_ready -> pc_bus_ctrl_agent:rp_ready
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_002:sink_valid
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [113:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_002:sink_data
	wire   [31:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_ready;                                                             // rsp_demux_002:sink_ready -> router_010:src_ready
	wire          vga_sys_agent_rp_endofpacket;                                                     // vga_sys_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          vga_sys_agent_rp_valid;                                                           // vga_sys_agent:rp_valid -> router_011:sink_valid
	wire          vga_sys_agent_rp_startofpacket;                                                   // vga_sys_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [113:0] vga_sys_agent_rp_data;                                                            // vga_sys_agent:rp_data -> router_011:sink_data
	wire          vga_sys_agent_rp_ready;                                                           // router_011:sink_ready -> vga_sys_agent:rp_ready
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_003:sink_valid
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [113:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_003:sink_data
	wire   [31:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_ready;                                                             // rsp_demux_003:sink_ready -> router_011:src_ready
	wire          sound_mgmt_agent_rp_endofpacket;                                                  // sound_mgmt_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          sound_mgmt_agent_rp_valid;                                                        // sound_mgmt_agent:rp_valid -> router_012:sink_valid
	wire          sound_mgmt_agent_rp_startofpacket;                                                // sound_mgmt_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [113:0] sound_mgmt_agent_rp_data;                                                         // sound_mgmt_agent:rp_data -> router_012:sink_data
	wire          sound_mgmt_agent_rp_ready;                                                        // router_012:sink_ready -> sound_mgmt_agent:rp_ready
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_004:sink_valid
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [113:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_004:sink_data
	wire   [31:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_ready;                                                             // rsp_demux_004:sink_ready -> router_012:src_ready
	wire          rtc_mgmt_agent_rp_endofpacket;                                                    // rtc_mgmt_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          rtc_mgmt_agent_rp_valid;                                                          // rtc_mgmt_agent:rp_valid -> router_013:sink_valid
	wire          rtc_mgmt_agent_rp_startofpacket;                                                  // rtc_mgmt_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [113:0] rtc_mgmt_agent_rp_data;                                                           // rtc_mgmt_agent:rp_data -> router_013:sink_data
	wire          rtc_mgmt_agent_rp_ready;                                                          // router_013:sink_ready -> rtc_mgmt_agent:rp_ready
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_005:sink_valid
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [113:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_005:sink_data
	wire   [31:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_ready;                                                             // rsp_demux_005:sink_ready -> router_013:src_ready
	wire          pit_mgmt_agent_rp_endofpacket;                                                    // pit_mgmt_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          pit_mgmt_agent_rp_valid;                                                          // pit_mgmt_agent:rp_valid -> router_014:sink_valid
	wire          pit_mgmt_agent_rp_startofpacket;                                                  // pit_mgmt_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [113:0] pit_mgmt_agent_rp_data;                                                           // pit_mgmt_agent:rp_data -> router_014:sink_data
	wire          pit_mgmt_agent_rp_ready;                                                          // router_014:sink_ready -> pit_mgmt_agent:rp_ready
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_006:sink_valid
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [113:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_006:sink_data
	wire   [31:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_ready;                                                             // rsp_demux_006:sink_ready -> router_014:src_ready
	wire          hdd_mgmt_agent_rp_endofpacket;                                                    // hdd_mgmt_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          hdd_mgmt_agent_rp_valid;                                                          // hdd_mgmt_agent:rp_valid -> router_015:sink_valid
	wire          hdd_mgmt_agent_rp_startofpacket;                                                  // hdd_mgmt_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [113:0] hdd_mgmt_agent_rp_data;                                                           // hdd_mgmt_agent:rp_data -> router_015:sink_data
	wire          hdd_mgmt_agent_rp_ready;                                                          // router_015:sink_ready -> hdd_mgmt_agent:rp_ready
	wire          router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_007:sink_valid
	wire          router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [113:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_007:sink_data
	wire   [31:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_ready;                                                             // rsp_demux_007:sink_ready -> router_015:src_ready
	wire          floppy_mgmt_agent_rp_endofpacket;                                                 // floppy_mgmt_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          floppy_mgmt_agent_rp_valid;                                                       // floppy_mgmt_agent:rp_valid -> router_016:sink_valid
	wire          floppy_mgmt_agent_rp_startofpacket;                                               // floppy_mgmt_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [113:0] floppy_mgmt_agent_rp_data;                                                        // floppy_mgmt_agent:rp_data -> router_016:sink_data
	wire          floppy_mgmt_agent_rp_ready;                                                       // router_016:sink_ready -> floppy_mgmt_agent:rp_ready
	wire          router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_008:sink_valid
	wire          router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [113:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_008:sink_data
	wire   [31:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_ready;                                                             // rsp_demux_008:sink_ready -> router_016:src_ready
	wire          pio_input_s1_agent_rp_endofpacket;                                                // pio_input_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          pio_input_s1_agent_rp_valid;                                                      // pio_input_s1_agent:rp_valid -> router_017:sink_valid
	wire          pio_input_s1_agent_rp_startofpacket;                                              // pio_input_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [113:0] pio_input_s1_agent_rp_data;                                                       // pio_input_s1_agent:rp_data -> router_017:sink_data
	wire          pio_input_s1_agent_rp_ready;                                                      // router_017:sink_ready -> pio_input_s1_agent:rp_ready
	wire          router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_009:sink_valid
	wire          router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [113:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_009:sink_data
	wire   [31:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_ready;                                                             // rsp_demux_009:sink_ready -> router_017:src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_018:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [113:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_018:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_018:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_010:sink_valid
	wire          router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [113:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_010:sink_data
	wire   [31:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_ready;                                                             // rsp_demux_010:sink_ready -> router_018:src_ready
	wire          pio_output_s1_agent_rp_endofpacket;                                               // pio_output_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          pio_output_s1_agent_rp_valid;                                                     // pio_output_s1_agent:rp_valid -> router_019:sink_valid
	wire          pio_output_s1_agent_rp_startofpacket;                                             // pio_output_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [113:0] pio_output_s1_agent_rp_data;                                                      // pio_output_s1_agent:rp_data -> router_019:sink_data
	wire          pio_output_s1_agent_rp_ready;                                                     // router_019:sink_ready -> pio_output_s1_agent:rp_ready
	wire          router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_019_src_valid;                                                             // router_019:src_valid -> rsp_demux_011:sink_valid
	wire          router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [113:0] router_019_src_data;                                                              // router_019:src_data -> rsp_demux_011:sink_data
	wire   [31:0] router_019_src_channel;                                                           // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_ready;                                                             // rsp_demux_011:sink_ready -> router_019:src_ready
	wire          sdram_s1_agent_rp_endofpacket;                                                    // sdram_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                          // sdram_s1_agent:rp_valid -> router_020:sink_valid
	wire          sdram_s1_agent_rp_startofpacket;                                                  // sdram_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire  [113:0] sdram_s1_agent_rp_data;                                                           // sdram_s1_agent:rp_data -> router_020:sink_data
	wire          sdram_s1_agent_rp_ready;                                                          // router_020:sink_ready -> sdram_s1_agent:rp_ready
	wire          router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_012:sink_valid
	wire          router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [113:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_012:sink_data
	wire   [31:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_ready;                                                             // rsp_demux_012:sink_ready -> router_020:src_ready
	wire          driver_sd_avalon_slave_0_agent_rp_endofpacket;                                    // driver_sd_avalon_slave_0_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          driver_sd_avalon_slave_0_agent_rp_valid;                                          // driver_sd_avalon_slave_0_agent:rp_valid -> router_021:sink_valid
	wire          driver_sd_avalon_slave_0_agent_rp_startofpacket;                                  // driver_sd_avalon_slave_0_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire  [113:0] driver_sd_avalon_slave_0_agent_rp_data;                                           // driver_sd_avalon_slave_0_agent:rp_data -> router_021:sink_data
	wire          driver_sd_avalon_slave_0_agent_rp_ready;                                          // router_021:sink_ready -> driver_sd_avalon_slave_0_agent:rp_ready
	wire          router_021_src_endofpacket;                                                       // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_021_src_valid;                                                             // router_021:src_valid -> rsp_demux_013:sink_valid
	wire          router_021_src_startofpacket;                                                     // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [113:0] router_021_src_data;                                                              // router_021:src_data -> rsp_demux_013:sink_data
	wire   [31:0] router_021_src_channel;                                                           // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_ready;                                                             // rsp_demux_013:sink_ready -> router_021:src_ready
	wire          floppy_sd_slave_agent_rp_endofpacket;                                             // floppy_sd_slave_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          floppy_sd_slave_agent_rp_valid;                                                   // floppy_sd_slave_agent:rp_valid -> router_022:sink_valid
	wire          floppy_sd_slave_agent_rp_startofpacket;                                           // floppy_sd_slave_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire   [86:0] floppy_sd_slave_agent_rp_data;                                                    // floppy_sd_slave_agent:rp_data -> router_022:sink_data
	wire          floppy_sd_slave_agent_rp_ready;                                                   // router_022:sink_ready -> floppy_sd_slave_agent:rp_ready
	wire          router_022_src_endofpacket;                                                       // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_022_src_valid;                                                             // router_022:src_valid -> rsp_demux_014:sink_valid
	wire          router_022_src_startofpacket;                                                     // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire   [86:0] router_022_src_data;                                                              // router_022:src_data -> rsp_demux_014:sink_data
	wire   [31:0] router_022_src_channel;                                                           // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_ready;                                                             // rsp_demux_014:sink_ready -> router_022:src_ready
	wire          hdd_sd_slave_agent_rp_endofpacket;                                                // hdd_sd_slave_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          hdd_sd_slave_agent_rp_valid;                                                      // hdd_sd_slave_agent:rp_valid -> router_023:sink_valid
	wire          hdd_sd_slave_agent_rp_startofpacket;                                              // hdd_sd_slave_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire  [113:0] hdd_sd_slave_agent_rp_data;                                                       // hdd_sd_slave_agent:rp_data -> router_023:sink_data
	wire          hdd_sd_slave_agent_rp_ready;                                                      // router_023:sink_ready -> hdd_sd_slave_agent:rp_ready
	wire          router_023_src_endofpacket;                                                       // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_023_src_valid;                                                             // router_023:src_valid -> rsp_demux_015:sink_valid
	wire          router_023_src_startofpacket;                                                     // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire  [113:0] router_023_src_data;                                                              // router_023:src_data -> rsp_demux_015:sink_data
	wire   [31:0] router_023_src_channel;                                                           // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_ready;                                                             // rsp_demux_015:sink_ready -> router_023:src_ready
	wire          pc_dma_slave_agent_rp_endofpacket;                                                // pc_dma_slave_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          pc_dma_slave_agent_rp_valid;                                                      // pc_dma_slave_agent:rp_valid -> router_024:sink_valid
	wire          pc_dma_slave_agent_rp_startofpacket;                                              // pc_dma_slave_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire   [86:0] pc_dma_slave_agent_rp_data;                                                       // pc_dma_slave_agent:rp_data -> router_024:sink_data
	wire          pc_dma_slave_agent_rp_ready;                                                      // router_024:sink_ready -> pc_dma_slave_agent:rp_ready
	wire          router_024_src_endofpacket;                                                       // router_024:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_024_src_valid;                                                             // router_024:src_valid -> rsp_demux_016:sink_valid
	wire          router_024_src_startofpacket;                                                     // router_024:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire   [86:0] router_024_src_data;                                                              // router_024:src_data -> rsp_demux_016:sink_data
	wire   [31:0] router_024_src_channel;                                                           // router_024:src_channel -> rsp_demux_016:sink_channel
	wire          router_024_src_ready;                                                             // rsp_demux_016:sink_ready -> router_024:src_ready
	wire          pc_dma_page_agent_rp_endofpacket;                                                 // pc_dma_page_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          pc_dma_page_agent_rp_valid;                                                       // pc_dma_page_agent:rp_valid -> router_025:sink_valid
	wire          pc_dma_page_agent_rp_startofpacket;                                               // pc_dma_page_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire   [86:0] pc_dma_page_agent_rp_data;                                                        // pc_dma_page_agent:rp_data -> router_025:sink_data
	wire          pc_dma_page_agent_rp_ready;                                                       // router_025:sink_ready -> pc_dma_page_agent:rp_ready
	wire          router_025_src_endofpacket;                                                       // router_025:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_025_src_valid;                                                             // router_025:src_valid -> rsp_demux_017:sink_valid
	wire          router_025_src_startofpacket;                                                     // router_025:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire   [86:0] router_025_src_data;                                                              // router_025:src_data -> rsp_demux_017:sink_data
	wire   [31:0] router_025_src_channel;                                                           // router_025:src_channel -> rsp_demux_017:sink_channel
	wire          router_025_src_ready;                                                             // rsp_demux_017:sink_ready -> router_025:src_ready
	wire          pc_dma_master_agent_rp_endofpacket;                                               // pc_dma_master_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          pc_dma_master_agent_rp_valid;                                                     // pc_dma_master_agent:rp_valid -> router_026:sink_valid
	wire          pc_dma_master_agent_rp_startofpacket;                                             // pc_dma_master_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire   [86:0] pc_dma_master_agent_rp_data;                                                      // pc_dma_master_agent:rp_data -> router_026:sink_data
	wire          pc_dma_master_agent_rp_ready;                                                     // router_026:sink_ready -> pc_dma_master_agent:rp_ready
	wire          router_026_src_endofpacket;                                                       // router_026:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_026_src_valid;                                                             // router_026:src_valid -> rsp_demux_018:sink_valid
	wire          router_026_src_startofpacket;                                                     // router_026:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire   [86:0] router_026_src_data;                                                              // router_026:src_data -> rsp_demux_018:sink_data
	wire   [31:0] router_026_src_channel;                                                           // router_026:src_channel -> rsp_demux_018:sink_channel
	wire          router_026_src_ready;                                                             // rsp_demux_018:sink_ready -> router_026:src_ready
	wire          vga_io_b_agent_rp_endofpacket;                                                    // vga_io_b_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          vga_io_b_agent_rp_valid;                                                          // vga_io_b_agent:rp_valid -> router_027:sink_valid
	wire          vga_io_b_agent_rp_startofpacket;                                                  // vga_io_b_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire   [86:0] vga_io_b_agent_rp_data;                                                           // vga_io_b_agent:rp_data -> router_027:sink_data
	wire          vga_io_b_agent_rp_ready;                                                          // router_027:sink_ready -> vga_io_b_agent:rp_ready
	wire          router_027_src_endofpacket;                                                       // router_027:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_027_src_valid;                                                             // router_027:src_valid -> rsp_demux_019:sink_valid
	wire          router_027_src_startofpacket;                                                     // router_027:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire   [86:0] router_027_src_data;                                                              // router_027:src_data -> rsp_demux_019:sink_data
	wire   [31:0] router_027_src_channel;                                                           // router_027:src_channel -> rsp_demux_019:sink_channel
	wire          router_027_src_ready;                                                             // rsp_demux_019:sink_ready -> router_027:src_ready
	wire          vga_io_c_agent_rp_endofpacket;                                                    // vga_io_c_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          vga_io_c_agent_rp_valid;                                                          // vga_io_c_agent:rp_valid -> router_028:sink_valid
	wire          vga_io_c_agent_rp_startofpacket;                                                  // vga_io_c_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire   [86:0] vga_io_c_agent_rp_data;                                                           // vga_io_c_agent:rp_data -> router_028:sink_data
	wire          vga_io_c_agent_rp_ready;                                                          // router_028:sink_ready -> vga_io_c_agent:rp_ready
	wire          router_028_src_endofpacket;                                                       // router_028:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_028_src_valid;                                                             // router_028:src_valid -> rsp_demux_020:sink_valid
	wire          router_028_src_startofpacket;                                                     // router_028:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire   [86:0] router_028_src_data;                                                              // router_028:src_data -> rsp_demux_020:sink_data
	wire   [31:0] router_028_src_channel;                                                           // router_028:src_channel -> rsp_demux_020:sink_channel
	wire          router_028_src_ready;                                                             // rsp_demux_020:sink_ready -> router_028:src_ready
	wire          vga_io_d_agent_rp_endofpacket;                                                    // vga_io_d_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          vga_io_d_agent_rp_valid;                                                          // vga_io_d_agent:rp_valid -> router_029:sink_valid
	wire          vga_io_d_agent_rp_startofpacket;                                                  // vga_io_d_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire   [86:0] vga_io_d_agent_rp_data;                                                           // vga_io_d_agent:rp_data -> router_029:sink_data
	wire          vga_io_d_agent_rp_ready;                                                          // router_029:sink_ready -> vga_io_d_agent:rp_ready
	wire          router_029_src_endofpacket;                                                       // router_029:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_029_src_valid;                                                             // router_029:src_valid -> rsp_demux_021:sink_valid
	wire          router_029_src_startofpacket;                                                     // router_029:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire   [86:0] router_029_src_data;                                                              // router_029:src_data -> rsp_demux_021:sink_data
	wire   [31:0] router_029_src_channel;                                                           // router_029:src_channel -> rsp_demux_021:sink_channel
	wire          router_029_src_ready;                                                             // rsp_demux_021:sink_ready -> router_029:src_ready
	wire          sound_io_agent_rp_endofpacket;                                                    // sound_io_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          sound_io_agent_rp_valid;                                                          // sound_io_agent:rp_valid -> router_030:sink_valid
	wire          sound_io_agent_rp_startofpacket;                                                  // sound_io_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire   [86:0] sound_io_agent_rp_data;                                                           // sound_io_agent:rp_data -> router_030:sink_data
	wire          sound_io_agent_rp_ready;                                                          // router_030:sink_ready -> sound_io_agent:rp_ready
	wire          router_030_src_endofpacket;                                                       // router_030:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          router_030_src_valid;                                                             // router_030:src_valid -> rsp_demux_022:sink_valid
	wire          router_030_src_startofpacket;                                                     // router_030:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire   [86:0] router_030_src_data;                                                              // router_030:src_data -> rsp_demux_022:sink_data
	wire   [31:0] router_030_src_channel;                                                           // router_030:src_channel -> rsp_demux_022:sink_channel
	wire          router_030_src_ready;                                                             // rsp_demux_022:sink_ready -> router_030:src_ready
	wire          sound_fm_agent_rp_endofpacket;                                                    // sound_fm_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          sound_fm_agent_rp_valid;                                                          // sound_fm_agent:rp_valid -> router_031:sink_valid
	wire          sound_fm_agent_rp_startofpacket;                                                  // sound_fm_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire   [86:0] sound_fm_agent_rp_data;                                                           // sound_fm_agent:rp_data -> router_031:sink_data
	wire          sound_fm_agent_rp_ready;                                                          // router_031:sink_ready -> sound_fm_agent:rp_ready
	wire          router_031_src_endofpacket;                                                       // router_031:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_031_src_valid;                                                             // router_031:src_valid -> rsp_demux_023:sink_valid
	wire          router_031_src_startofpacket;                                                     // router_031:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire   [86:0] router_031_src_data;                                                              // router_031:src_data -> rsp_demux_023:sink_data
	wire   [31:0] router_031_src_channel;                                                           // router_031:src_channel -> rsp_demux_023:sink_channel
	wire          router_031_src_ready;                                                             // rsp_demux_023:sink_ready -> router_031:src_ready
	wire          rtc_io_agent_rp_endofpacket;                                                      // rtc_io_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          rtc_io_agent_rp_valid;                                                            // rtc_io_agent:rp_valid -> router_032:sink_valid
	wire          rtc_io_agent_rp_startofpacket;                                                    // rtc_io_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire   [86:0] rtc_io_agent_rp_data;                                                             // rtc_io_agent:rp_data -> router_032:sink_data
	wire          rtc_io_agent_rp_ready;                                                            // router_032:sink_ready -> rtc_io_agent:rp_ready
	wire          router_032_src_endofpacket;                                                       // router_032:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_032_src_valid;                                                             // router_032:src_valid -> rsp_demux_024:sink_valid
	wire          router_032_src_startofpacket;                                                     // router_032:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire   [86:0] router_032_src_data;                                                              // router_032:src_data -> rsp_demux_024:sink_data
	wire   [31:0] router_032_src_channel;                                                           // router_032:src_channel -> rsp_demux_024:sink_channel
	wire          router_032_src_ready;                                                             // rsp_demux_024:sink_ready -> router_032:src_ready
	wire          pit_io_agent_rp_endofpacket;                                                      // pit_io_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          pit_io_agent_rp_valid;                                                            // pit_io_agent:rp_valid -> router_033:sink_valid
	wire          pit_io_agent_rp_startofpacket;                                                    // pit_io_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire   [86:0] pit_io_agent_rp_data;                                                             // pit_io_agent:rp_data -> router_033:sink_data
	wire          pit_io_agent_rp_ready;                                                            // router_033:sink_ready -> pit_io_agent:rp_ready
	wire          router_033_src_endofpacket;                                                       // router_033:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          router_033_src_valid;                                                             // router_033:src_valid -> rsp_demux_025:sink_valid
	wire          router_033_src_startofpacket;                                                     // router_033:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire   [86:0] router_033_src_data;                                                              // router_033:src_data -> rsp_demux_025:sink_data
	wire   [31:0] router_033_src_channel;                                                           // router_033:src_channel -> rsp_demux_025:sink_channel
	wire          router_033_src_ready;                                                             // rsp_demux_025:sink_ready -> router_033:src_ready
	wire          pic_master_agent_rp_endofpacket;                                                  // pic_master_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          pic_master_agent_rp_valid;                                                        // pic_master_agent:rp_valid -> router_034:sink_valid
	wire          pic_master_agent_rp_startofpacket;                                                // pic_master_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire   [86:0] pic_master_agent_rp_data;                                                         // pic_master_agent:rp_data -> router_034:sink_data
	wire          pic_master_agent_rp_ready;                                                        // router_034:sink_ready -> pic_master_agent:rp_ready
	wire          router_034_src_endofpacket;                                                       // router_034:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_034_src_valid;                                                             // router_034:src_valid -> rsp_demux_026:sink_valid
	wire          router_034_src_startofpacket;                                                     // router_034:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire   [86:0] router_034_src_data;                                                              // router_034:src_data -> rsp_demux_026:sink_data
	wire   [31:0] router_034_src_channel;                                                           // router_034:src_channel -> rsp_demux_026:sink_channel
	wire          router_034_src_ready;                                                             // rsp_demux_026:sink_ready -> router_034:src_ready
	wire          pic_slave_agent_rp_endofpacket;                                                   // pic_slave_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          pic_slave_agent_rp_valid;                                                         // pic_slave_agent:rp_valid -> router_035:sink_valid
	wire          pic_slave_agent_rp_startofpacket;                                                 // pic_slave_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire   [86:0] pic_slave_agent_rp_data;                                                          // pic_slave_agent:rp_data -> router_035:sink_data
	wire          pic_slave_agent_rp_ready;                                                         // router_035:sink_ready -> pic_slave_agent:rp_ready
	wire          router_035_src_endofpacket;                                                       // router_035:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          router_035_src_valid;                                                             // router_035:src_valid -> rsp_demux_027:sink_valid
	wire          router_035_src_startofpacket;                                                     // router_035:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire   [86:0] router_035_src_data;                                                              // router_035:src_data -> rsp_demux_027:sink_data
	wire   [31:0] router_035_src_channel;                                                           // router_035:src_channel -> rsp_demux_027:sink_channel
	wire          router_035_src_ready;                                                             // rsp_demux_027:sink_ready -> router_035:src_ready
	wire          hdd_io_agent_rp_endofpacket;                                                      // hdd_io_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          hdd_io_agent_rp_valid;                                                            // hdd_io_agent:rp_valid -> router_036:sink_valid
	wire          hdd_io_agent_rp_startofpacket;                                                    // hdd_io_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire  [113:0] hdd_io_agent_rp_data;                                                             // hdd_io_agent:rp_data -> router_036:sink_data
	wire          hdd_io_agent_rp_ready;                                                            // router_036:sink_ready -> hdd_io_agent:rp_ready
	wire          router_036_src_endofpacket;                                                       // router_036:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          router_036_src_valid;                                                             // router_036:src_valid -> rsp_demux_028:sink_valid
	wire          router_036_src_startofpacket;                                                     // router_036:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire  [113:0] router_036_src_data;                                                              // router_036:src_data -> rsp_demux_028:sink_data
	wire   [31:0] router_036_src_channel;                                                           // router_036:src_channel -> rsp_demux_028:sink_channel
	wire          router_036_src_ready;                                                             // rsp_demux_028:sink_ready -> router_036:src_ready
	wire          floppy_io_agent_rp_endofpacket;                                                   // floppy_io_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          floppy_io_agent_rp_valid;                                                         // floppy_io_agent:rp_valid -> router_037:sink_valid
	wire          floppy_io_agent_rp_startofpacket;                                                 // floppy_io_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire   [86:0] floppy_io_agent_rp_data;                                                          // floppy_io_agent:rp_data -> router_037:sink_data
	wire          floppy_io_agent_rp_ready;                                                         // router_037:sink_ready -> floppy_io_agent:rp_ready
	wire          router_037_src_endofpacket;                                                       // router_037:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          router_037_src_valid;                                                             // router_037:src_valid -> rsp_demux_029:sink_valid
	wire          router_037_src_startofpacket;                                                     // router_037:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire   [86:0] router_037_src_data;                                                              // router_037:src_data -> rsp_demux_029:sink_data
	wire   [31:0] router_037_src_channel;                                                           // router_037:src_channel -> rsp_demux_029:sink_channel
	wire          router_037_src_ready;                                                             // rsp_demux_029:sink_ready -> router_037:src_ready
	wire          ps2_io_agent_rp_endofpacket;                                                      // ps2_io_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          ps2_io_agent_rp_valid;                                                            // ps2_io_agent:rp_valid -> router_038:sink_valid
	wire          ps2_io_agent_rp_startofpacket;                                                    // ps2_io_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire   [86:0] ps2_io_agent_rp_data;                                                             // ps2_io_agent:rp_data -> router_038:sink_data
	wire          ps2_io_agent_rp_ready;                                                            // router_038:sink_ready -> ps2_io_agent:rp_ready
	wire          router_038_src_endofpacket;                                                       // router_038:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          router_038_src_valid;                                                             // router_038:src_valid -> rsp_demux_030:sink_valid
	wire          router_038_src_startofpacket;                                                     // router_038:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire   [86:0] router_038_src_data;                                                              // router_038:src_data -> rsp_demux_030:sink_data
	wire   [31:0] router_038_src_channel;                                                           // router_038:src_channel -> rsp_demux_030:sink_channel
	wire          router_038_src_ready;                                                             // rsp_demux_030:sink_ready -> router_038:src_ready
	wire          ps2_sysctl_agent_rp_endofpacket;                                                  // ps2_sysctl_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          ps2_sysctl_agent_rp_valid;                                                        // ps2_sysctl_agent:rp_valid -> router_039:sink_valid
	wire          ps2_sysctl_agent_rp_startofpacket;                                                // ps2_sysctl_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire   [86:0] ps2_sysctl_agent_rp_data;                                                         // ps2_sysctl_agent:rp_data -> router_039:sink_data
	wire          ps2_sysctl_agent_rp_ready;                                                        // router_039:sink_ready -> ps2_sysctl_agent:rp_ready
	wire          router_039_src_endofpacket;                                                       // router_039:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          router_039_src_valid;                                                             // router_039:src_valid -> rsp_demux_031:sink_valid
	wire          router_039_src_startofpacket;                                                     // router_039:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire   [86:0] router_039_src_data;                                                              // router_039:src_data -> rsp_demux_031:sink_data
	wire   [31:0] router_039_src_channel;                                                           // router_039:src_channel -> rsp_demux_031:sink_channel
	wire          router_039_src_ready;                                                             // rsp_demux_031:sink_ready -> router_039:src_ready
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> driver_sd_avalon_master_0_limiter:cmd_sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> driver_sd_avalon_master_0_limiter:cmd_sink_valid
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> driver_sd_avalon_master_0_limiter:cmd_sink_startofpacket
	wire  [113:0] router_005_src_data;                                                              // router_005:src_data -> driver_sd_avalon_master_0_limiter:cmd_sink_data
	wire   [31:0] router_005_src_channel;                                                           // router_005:src_channel -> driver_sd_avalon_master_0_limiter:cmd_sink_channel
	wire          router_005_src_ready;                                                             // driver_sd_avalon_master_0_limiter:cmd_sink_ready -> router_005:src_ready
	wire          driver_sd_avalon_master_0_limiter_cmd_src_endofpacket;                            // driver_sd_avalon_master_0_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          driver_sd_avalon_master_0_limiter_cmd_src_startofpacket;                          // driver_sd_avalon_master_0_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire  [113:0] driver_sd_avalon_master_0_limiter_cmd_src_data;                                   // driver_sd_avalon_master_0_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire   [31:0] driver_sd_avalon_master_0_limiter_cmd_src_channel;                                // driver_sd_avalon_master_0_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          driver_sd_avalon_master_0_limiter_cmd_src_ready;                                  // cmd_demux_005:sink_ready -> driver_sd_avalon_master_0_limiter:cmd_src_ready
	wire          rsp_mux_005_src_endofpacket;                                                      // rsp_mux_005:src_endofpacket -> driver_sd_avalon_master_0_limiter:rsp_sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                            // rsp_mux_005:src_valid -> driver_sd_avalon_master_0_limiter:rsp_sink_valid
	wire          rsp_mux_005_src_startofpacket;                                                    // rsp_mux_005:src_startofpacket -> driver_sd_avalon_master_0_limiter:rsp_sink_startofpacket
	wire  [113:0] rsp_mux_005_src_data;                                                             // rsp_mux_005:src_data -> driver_sd_avalon_master_0_limiter:rsp_sink_data
	wire   [31:0] rsp_mux_005_src_channel;                                                          // rsp_mux_005:src_channel -> driver_sd_avalon_master_0_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_ready;                                                            // driver_sd_avalon_master_0_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire          driver_sd_avalon_master_0_limiter_rsp_src_endofpacket;                            // driver_sd_avalon_master_0_limiter:rsp_src_endofpacket -> driver_sd_avalon_master_0_agent:rp_endofpacket
	wire          driver_sd_avalon_master_0_limiter_rsp_src_valid;                                  // driver_sd_avalon_master_0_limiter:rsp_src_valid -> driver_sd_avalon_master_0_agent:rp_valid
	wire          driver_sd_avalon_master_0_limiter_rsp_src_startofpacket;                          // driver_sd_avalon_master_0_limiter:rsp_src_startofpacket -> driver_sd_avalon_master_0_agent:rp_startofpacket
	wire  [113:0] driver_sd_avalon_master_0_limiter_rsp_src_data;                                   // driver_sd_avalon_master_0_limiter:rsp_src_data -> driver_sd_avalon_master_0_agent:rp_data
	wire   [31:0] driver_sd_avalon_master_0_limiter_rsp_src_channel;                                // driver_sd_avalon_master_0_limiter:rsp_src_channel -> driver_sd_avalon_master_0_agent:rp_channel
	wire          driver_sd_avalon_master_0_limiter_rsp_src_ready;                                  // driver_sd_avalon_master_0_agent:rp_ready -> driver_sd_avalon_master_0_limiter:rsp_src_ready
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> ao486_avalon_io_limiter:cmd_sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> ao486_avalon_io_limiter:cmd_sink_valid
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> ao486_avalon_io_limiter:cmd_sink_startofpacket
	wire  [113:0] router_007_src_data;                                                              // router_007:src_data -> ao486_avalon_io_limiter:cmd_sink_data
	wire   [31:0] router_007_src_channel;                                                           // router_007:src_channel -> ao486_avalon_io_limiter:cmd_sink_channel
	wire          router_007_src_ready;                                                             // ao486_avalon_io_limiter:cmd_sink_ready -> router_007:src_ready
	wire          ao486_avalon_io_limiter_cmd_src_endofpacket;                                      // ao486_avalon_io_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          ao486_avalon_io_limiter_cmd_src_startofpacket;                                    // ao486_avalon_io_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire  [113:0] ao486_avalon_io_limiter_cmd_src_data;                                             // ao486_avalon_io_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire   [31:0] ao486_avalon_io_limiter_cmd_src_channel;                                          // ao486_avalon_io_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          ao486_avalon_io_limiter_cmd_src_ready;                                            // cmd_demux_007:sink_ready -> ao486_avalon_io_limiter:cmd_src_ready
	wire          rsp_mux_007_src_endofpacket;                                                      // rsp_mux_007:src_endofpacket -> ao486_avalon_io_limiter:rsp_sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                            // rsp_mux_007:src_valid -> ao486_avalon_io_limiter:rsp_sink_valid
	wire          rsp_mux_007_src_startofpacket;                                                    // rsp_mux_007:src_startofpacket -> ao486_avalon_io_limiter:rsp_sink_startofpacket
	wire  [113:0] rsp_mux_007_src_data;                                                             // rsp_mux_007:src_data -> ao486_avalon_io_limiter:rsp_sink_data
	wire   [31:0] rsp_mux_007_src_channel;                                                          // rsp_mux_007:src_channel -> ao486_avalon_io_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_ready;                                                            // ao486_avalon_io_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire          ao486_avalon_io_limiter_rsp_src_endofpacket;                                      // ao486_avalon_io_limiter:rsp_src_endofpacket -> ao486_avalon_io_agent:rp_endofpacket
	wire          ao486_avalon_io_limiter_rsp_src_valid;                                            // ao486_avalon_io_limiter:rsp_src_valid -> ao486_avalon_io_agent:rp_valid
	wire          ao486_avalon_io_limiter_rsp_src_startofpacket;                                    // ao486_avalon_io_limiter:rsp_src_startofpacket -> ao486_avalon_io_agent:rp_startofpacket
	wire  [113:0] ao486_avalon_io_limiter_rsp_src_data;                                             // ao486_avalon_io_limiter:rsp_src_data -> ao486_avalon_io_agent:rp_data
	wire   [31:0] ao486_avalon_io_limiter_rsp_src_channel;                                          // ao486_avalon_io_limiter:rsp_src_channel -> ao486_avalon_io_agent:rp_channel
	wire          ao486_avalon_io_limiter_rsp_src_ready;                                            // ao486_avalon_io_agent:rp_ready -> ao486_avalon_io_limiter:rsp_src_ready
	wire          cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> sdram_s1_burst_adapter:sink0_valid
	wire          cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire  [113:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> sdram_s1_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_ready;                                                            // sdram_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                       // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                             // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                     // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire  [113:0] sdram_s1_burst_adapter_source0_data;                                              // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                             // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [31:0] sdram_s1_burst_adapter_source0_channel;                                           // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> floppy_sd_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> floppy_sd_slave_burst_adapter:sink0_valid
	wire          cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> floppy_sd_slave_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> floppy_sd_slave_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> floppy_sd_slave_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_ready;                                                            // floppy_sd_slave_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire          floppy_sd_slave_burst_adapter_source0_endofpacket;                                // floppy_sd_slave_burst_adapter:source0_endofpacket -> floppy_sd_slave_agent:cp_endofpacket
	wire          floppy_sd_slave_burst_adapter_source0_valid;                                      // floppy_sd_slave_burst_adapter:source0_valid -> floppy_sd_slave_agent:cp_valid
	wire          floppy_sd_slave_burst_adapter_source0_startofpacket;                              // floppy_sd_slave_burst_adapter:source0_startofpacket -> floppy_sd_slave_agent:cp_startofpacket
	wire   [86:0] floppy_sd_slave_burst_adapter_source0_data;                                       // floppy_sd_slave_burst_adapter:source0_data -> floppy_sd_slave_agent:cp_data
	wire          floppy_sd_slave_burst_adapter_source0_ready;                                      // floppy_sd_slave_agent:cp_ready -> floppy_sd_slave_burst_adapter:source0_ready
	wire   [31:0] floppy_sd_slave_burst_adapter_source0_channel;                                    // floppy_sd_slave_burst_adapter:source0_channel -> floppy_sd_slave_agent:cp_channel
	wire          cmd_mux_016_src_endofpacket;                                                      // cmd_mux_016:src_endofpacket -> pc_dma_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                            // cmd_mux_016:src_valid -> pc_dma_slave_burst_adapter:sink0_valid
	wire          cmd_mux_016_src_startofpacket;                                                    // cmd_mux_016:src_startofpacket -> pc_dma_slave_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_016_src_data;                                                             // cmd_mux_016:src_data -> pc_dma_slave_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_016_src_channel;                                                          // cmd_mux_016:src_channel -> pc_dma_slave_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_ready;                                                            // pc_dma_slave_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire          pc_dma_slave_burst_adapter_source0_endofpacket;                                   // pc_dma_slave_burst_adapter:source0_endofpacket -> pc_dma_slave_agent:cp_endofpacket
	wire          pc_dma_slave_burst_adapter_source0_valid;                                         // pc_dma_slave_burst_adapter:source0_valid -> pc_dma_slave_agent:cp_valid
	wire          pc_dma_slave_burst_adapter_source0_startofpacket;                                 // pc_dma_slave_burst_adapter:source0_startofpacket -> pc_dma_slave_agent:cp_startofpacket
	wire   [86:0] pc_dma_slave_burst_adapter_source0_data;                                          // pc_dma_slave_burst_adapter:source0_data -> pc_dma_slave_agent:cp_data
	wire          pc_dma_slave_burst_adapter_source0_ready;                                         // pc_dma_slave_agent:cp_ready -> pc_dma_slave_burst_adapter:source0_ready
	wire   [31:0] pc_dma_slave_burst_adapter_source0_channel;                                       // pc_dma_slave_burst_adapter:source0_channel -> pc_dma_slave_agent:cp_channel
	wire          cmd_mux_017_src_endofpacket;                                                      // cmd_mux_017:src_endofpacket -> pc_dma_page_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                            // cmd_mux_017:src_valid -> pc_dma_page_burst_adapter:sink0_valid
	wire          cmd_mux_017_src_startofpacket;                                                    // cmd_mux_017:src_startofpacket -> pc_dma_page_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_017_src_data;                                                             // cmd_mux_017:src_data -> pc_dma_page_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_017_src_channel;                                                          // cmd_mux_017:src_channel -> pc_dma_page_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_ready;                                                            // pc_dma_page_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire          pc_dma_page_burst_adapter_source0_endofpacket;                                    // pc_dma_page_burst_adapter:source0_endofpacket -> pc_dma_page_agent:cp_endofpacket
	wire          pc_dma_page_burst_adapter_source0_valid;                                          // pc_dma_page_burst_adapter:source0_valid -> pc_dma_page_agent:cp_valid
	wire          pc_dma_page_burst_adapter_source0_startofpacket;                                  // pc_dma_page_burst_adapter:source0_startofpacket -> pc_dma_page_agent:cp_startofpacket
	wire   [86:0] pc_dma_page_burst_adapter_source0_data;                                           // pc_dma_page_burst_adapter:source0_data -> pc_dma_page_agent:cp_data
	wire          pc_dma_page_burst_adapter_source0_ready;                                          // pc_dma_page_agent:cp_ready -> pc_dma_page_burst_adapter:source0_ready
	wire   [31:0] pc_dma_page_burst_adapter_source0_channel;                                        // pc_dma_page_burst_adapter:source0_channel -> pc_dma_page_agent:cp_channel
	wire          cmd_mux_018_src_endofpacket;                                                      // cmd_mux_018:src_endofpacket -> pc_dma_master_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                            // cmd_mux_018:src_valid -> pc_dma_master_burst_adapter:sink0_valid
	wire          cmd_mux_018_src_startofpacket;                                                    // cmd_mux_018:src_startofpacket -> pc_dma_master_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_018_src_data;                                                             // cmd_mux_018:src_data -> pc_dma_master_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_018_src_channel;                                                          // cmd_mux_018:src_channel -> pc_dma_master_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_ready;                                                            // pc_dma_master_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire          pc_dma_master_burst_adapter_source0_endofpacket;                                  // pc_dma_master_burst_adapter:source0_endofpacket -> pc_dma_master_agent:cp_endofpacket
	wire          pc_dma_master_burst_adapter_source0_valid;                                        // pc_dma_master_burst_adapter:source0_valid -> pc_dma_master_agent:cp_valid
	wire          pc_dma_master_burst_adapter_source0_startofpacket;                                // pc_dma_master_burst_adapter:source0_startofpacket -> pc_dma_master_agent:cp_startofpacket
	wire   [86:0] pc_dma_master_burst_adapter_source0_data;                                         // pc_dma_master_burst_adapter:source0_data -> pc_dma_master_agent:cp_data
	wire          pc_dma_master_burst_adapter_source0_ready;                                        // pc_dma_master_agent:cp_ready -> pc_dma_master_burst_adapter:source0_ready
	wire   [31:0] pc_dma_master_burst_adapter_source0_channel;                                      // pc_dma_master_burst_adapter:source0_channel -> pc_dma_master_agent:cp_channel
	wire          cmd_mux_019_src_endofpacket;                                                      // cmd_mux_019:src_endofpacket -> vga_io_b_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                                            // cmd_mux_019:src_valid -> vga_io_b_burst_adapter:sink0_valid
	wire          cmd_mux_019_src_startofpacket;                                                    // cmd_mux_019:src_startofpacket -> vga_io_b_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_019_src_data;                                                             // cmd_mux_019:src_data -> vga_io_b_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_019_src_channel;                                                          // cmd_mux_019:src_channel -> vga_io_b_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_ready;                                                            // vga_io_b_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire          vga_io_b_burst_adapter_source0_endofpacket;                                       // vga_io_b_burst_adapter:source0_endofpacket -> vga_io_b_agent:cp_endofpacket
	wire          vga_io_b_burst_adapter_source0_valid;                                             // vga_io_b_burst_adapter:source0_valid -> vga_io_b_agent:cp_valid
	wire          vga_io_b_burst_adapter_source0_startofpacket;                                     // vga_io_b_burst_adapter:source0_startofpacket -> vga_io_b_agent:cp_startofpacket
	wire   [86:0] vga_io_b_burst_adapter_source0_data;                                              // vga_io_b_burst_adapter:source0_data -> vga_io_b_agent:cp_data
	wire          vga_io_b_burst_adapter_source0_ready;                                             // vga_io_b_agent:cp_ready -> vga_io_b_burst_adapter:source0_ready
	wire   [31:0] vga_io_b_burst_adapter_source0_channel;                                           // vga_io_b_burst_adapter:source0_channel -> vga_io_b_agent:cp_channel
	wire          cmd_mux_020_src_endofpacket;                                                      // cmd_mux_020:src_endofpacket -> vga_io_c_burst_adapter:sink0_endofpacket
	wire          cmd_mux_020_src_valid;                                                            // cmd_mux_020:src_valid -> vga_io_c_burst_adapter:sink0_valid
	wire          cmd_mux_020_src_startofpacket;                                                    // cmd_mux_020:src_startofpacket -> vga_io_c_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_020_src_data;                                                             // cmd_mux_020:src_data -> vga_io_c_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_020_src_channel;                                                          // cmd_mux_020:src_channel -> vga_io_c_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_ready;                                                            // vga_io_c_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire          vga_io_c_burst_adapter_source0_endofpacket;                                       // vga_io_c_burst_adapter:source0_endofpacket -> vga_io_c_agent:cp_endofpacket
	wire          vga_io_c_burst_adapter_source0_valid;                                             // vga_io_c_burst_adapter:source0_valid -> vga_io_c_agent:cp_valid
	wire          vga_io_c_burst_adapter_source0_startofpacket;                                     // vga_io_c_burst_adapter:source0_startofpacket -> vga_io_c_agent:cp_startofpacket
	wire   [86:0] vga_io_c_burst_adapter_source0_data;                                              // vga_io_c_burst_adapter:source0_data -> vga_io_c_agent:cp_data
	wire          vga_io_c_burst_adapter_source0_ready;                                             // vga_io_c_agent:cp_ready -> vga_io_c_burst_adapter:source0_ready
	wire   [31:0] vga_io_c_burst_adapter_source0_channel;                                           // vga_io_c_burst_adapter:source0_channel -> vga_io_c_agent:cp_channel
	wire          cmd_mux_021_src_endofpacket;                                                      // cmd_mux_021:src_endofpacket -> vga_io_d_burst_adapter:sink0_endofpacket
	wire          cmd_mux_021_src_valid;                                                            // cmd_mux_021:src_valid -> vga_io_d_burst_adapter:sink0_valid
	wire          cmd_mux_021_src_startofpacket;                                                    // cmd_mux_021:src_startofpacket -> vga_io_d_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_021_src_data;                                                             // cmd_mux_021:src_data -> vga_io_d_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_021_src_channel;                                                          // cmd_mux_021:src_channel -> vga_io_d_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_ready;                                                            // vga_io_d_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire          vga_io_d_burst_adapter_source0_endofpacket;                                       // vga_io_d_burst_adapter:source0_endofpacket -> vga_io_d_agent:cp_endofpacket
	wire          vga_io_d_burst_adapter_source0_valid;                                             // vga_io_d_burst_adapter:source0_valid -> vga_io_d_agent:cp_valid
	wire          vga_io_d_burst_adapter_source0_startofpacket;                                     // vga_io_d_burst_adapter:source0_startofpacket -> vga_io_d_agent:cp_startofpacket
	wire   [86:0] vga_io_d_burst_adapter_source0_data;                                              // vga_io_d_burst_adapter:source0_data -> vga_io_d_agent:cp_data
	wire          vga_io_d_burst_adapter_source0_ready;                                             // vga_io_d_agent:cp_ready -> vga_io_d_burst_adapter:source0_ready
	wire   [31:0] vga_io_d_burst_adapter_source0_channel;                                           // vga_io_d_burst_adapter:source0_channel -> vga_io_d_agent:cp_channel
	wire          cmd_mux_022_src_endofpacket;                                                      // cmd_mux_022:src_endofpacket -> sound_io_burst_adapter:sink0_endofpacket
	wire          cmd_mux_022_src_valid;                                                            // cmd_mux_022:src_valid -> sound_io_burst_adapter:sink0_valid
	wire          cmd_mux_022_src_startofpacket;                                                    // cmd_mux_022:src_startofpacket -> sound_io_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_022_src_data;                                                             // cmd_mux_022:src_data -> sound_io_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_022_src_channel;                                                          // cmd_mux_022:src_channel -> sound_io_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_ready;                                                            // sound_io_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire          sound_io_burst_adapter_source0_endofpacket;                                       // sound_io_burst_adapter:source0_endofpacket -> sound_io_agent:cp_endofpacket
	wire          sound_io_burst_adapter_source0_valid;                                             // sound_io_burst_adapter:source0_valid -> sound_io_agent:cp_valid
	wire          sound_io_burst_adapter_source0_startofpacket;                                     // sound_io_burst_adapter:source0_startofpacket -> sound_io_agent:cp_startofpacket
	wire   [86:0] sound_io_burst_adapter_source0_data;                                              // sound_io_burst_adapter:source0_data -> sound_io_agent:cp_data
	wire          sound_io_burst_adapter_source0_ready;                                             // sound_io_agent:cp_ready -> sound_io_burst_adapter:source0_ready
	wire   [31:0] sound_io_burst_adapter_source0_channel;                                           // sound_io_burst_adapter:source0_channel -> sound_io_agent:cp_channel
	wire          cmd_mux_023_src_endofpacket;                                                      // cmd_mux_023:src_endofpacket -> sound_fm_burst_adapter:sink0_endofpacket
	wire          cmd_mux_023_src_valid;                                                            // cmd_mux_023:src_valid -> sound_fm_burst_adapter:sink0_valid
	wire          cmd_mux_023_src_startofpacket;                                                    // cmd_mux_023:src_startofpacket -> sound_fm_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_023_src_data;                                                             // cmd_mux_023:src_data -> sound_fm_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_023_src_channel;                                                          // cmd_mux_023:src_channel -> sound_fm_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_ready;                                                            // sound_fm_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire          sound_fm_burst_adapter_source0_endofpacket;                                       // sound_fm_burst_adapter:source0_endofpacket -> sound_fm_agent:cp_endofpacket
	wire          sound_fm_burst_adapter_source0_valid;                                             // sound_fm_burst_adapter:source0_valid -> sound_fm_agent:cp_valid
	wire          sound_fm_burst_adapter_source0_startofpacket;                                     // sound_fm_burst_adapter:source0_startofpacket -> sound_fm_agent:cp_startofpacket
	wire   [86:0] sound_fm_burst_adapter_source0_data;                                              // sound_fm_burst_adapter:source0_data -> sound_fm_agent:cp_data
	wire          sound_fm_burst_adapter_source0_ready;                                             // sound_fm_agent:cp_ready -> sound_fm_burst_adapter:source0_ready
	wire   [31:0] sound_fm_burst_adapter_source0_channel;                                           // sound_fm_burst_adapter:source0_channel -> sound_fm_agent:cp_channel
	wire          cmd_mux_024_src_endofpacket;                                                      // cmd_mux_024:src_endofpacket -> rtc_io_burst_adapter:sink0_endofpacket
	wire          cmd_mux_024_src_valid;                                                            // cmd_mux_024:src_valid -> rtc_io_burst_adapter:sink0_valid
	wire          cmd_mux_024_src_startofpacket;                                                    // cmd_mux_024:src_startofpacket -> rtc_io_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_024_src_data;                                                             // cmd_mux_024:src_data -> rtc_io_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_024_src_channel;                                                          // cmd_mux_024:src_channel -> rtc_io_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_ready;                                                            // rtc_io_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire          rtc_io_burst_adapter_source0_endofpacket;                                         // rtc_io_burst_adapter:source0_endofpacket -> rtc_io_agent:cp_endofpacket
	wire          rtc_io_burst_adapter_source0_valid;                                               // rtc_io_burst_adapter:source0_valid -> rtc_io_agent:cp_valid
	wire          rtc_io_burst_adapter_source0_startofpacket;                                       // rtc_io_burst_adapter:source0_startofpacket -> rtc_io_agent:cp_startofpacket
	wire   [86:0] rtc_io_burst_adapter_source0_data;                                                // rtc_io_burst_adapter:source0_data -> rtc_io_agent:cp_data
	wire          rtc_io_burst_adapter_source0_ready;                                               // rtc_io_agent:cp_ready -> rtc_io_burst_adapter:source0_ready
	wire   [31:0] rtc_io_burst_adapter_source0_channel;                                             // rtc_io_burst_adapter:source0_channel -> rtc_io_agent:cp_channel
	wire          cmd_mux_025_src_endofpacket;                                                      // cmd_mux_025:src_endofpacket -> pit_io_burst_adapter:sink0_endofpacket
	wire          cmd_mux_025_src_valid;                                                            // cmd_mux_025:src_valid -> pit_io_burst_adapter:sink0_valid
	wire          cmd_mux_025_src_startofpacket;                                                    // cmd_mux_025:src_startofpacket -> pit_io_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_025_src_data;                                                             // cmd_mux_025:src_data -> pit_io_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_025_src_channel;                                                          // cmd_mux_025:src_channel -> pit_io_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_ready;                                                            // pit_io_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire          pit_io_burst_adapter_source0_endofpacket;                                         // pit_io_burst_adapter:source0_endofpacket -> pit_io_agent:cp_endofpacket
	wire          pit_io_burst_adapter_source0_valid;                                               // pit_io_burst_adapter:source0_valid -> pit_io_agent:cp_valid
	wire          pit_io_burst_adapter_source0_startofpacket;                                       // pit_io_burst_adapter:source0_startofpacket -> pit_io_agent:cp_startofpacket
	wire   [86:0] pit_io_burst_adapter_source0_data;                                                // pit_io_burst_adapter:source0_data -> pit_io_agent:cp_data
	wire          pit_io_burst_adapter_source0_ready;                                               // pit_io_agent:cp_ready -> pit_io_burst_adapter:source0_ready
	wire   [31:0] pit_io_burst_adapter_source0_channel;                                             // pit_io_burst_adapter:source0_channel -> pit_io_agent:cp_channel
	wire          cmd_mux_026_src_endofpacket;                                                      // cmd_mux_026:src_endofpacket -> pic_master_burst_adapter:sink0_endofpacket
	wire          cmd_mux_026_src_valid;                                                            // cmd_mux_026:src_valid -> pic_master_burst_adapter:sink0_valid
	wire          cmd_mux_026_src_startofpacket;                                                    // cmd_mux_026:src_startofpacket -> pic_master_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_026_src_data;                                                             // cmd_mux_026:src_data -> pic_master_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_026_src_channel;                                                          // cmd_mux_026:src_channel -> pic_master_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_ready;                                                            // pic_master_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire          pic_master_burst_adapter_source0_endofpacket;                                     // pic_master_burst_adapter:source0_endofpacket -> pic_master_agent:cp_endofpacket
	wire          pic_master_burst_adapter_source0_valid;                                           // pic_master_burst_adapter:source0_valid -> pic_master_agent:cp_valid
	wire          pic_master_burst_adapter_source0_startofpacket;                                   // pic_master_burst_adapter:source0_startofpacket -> pic_master_agent:cp_startofpacket
	wire   [86:0] pic_master_burst_adapter_source0_data;                                            // pic_master_burst_adapter:source0_data -> pic_master_agent:cp_data
	wire          pic_master_burst_adapter_source0_ready;                                           // pic_master_agent:cp_ready -> pic_master_burst_adapter:source0_ready
	wire   [31:0] pic_master_burst_adapter_source0_channel;                                         // pic_master_burst_adapter:source0_channel -> pic_master_agent:cp_channel
	wire          cmd_mux_027_src_endofpacket;                                                      // cmd_mux_027:src_endofpacket -> pic_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_027_src_valid;                                                            // cmd_mux_027:src_valid -> pic_slave_burst_adapter:sink0_valid
	wire          cmd_mux_027_src_startofpacket;                                                    // cmd_mux_027:src_startofpacket -> pic_slave_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_027_src_data;                                                             // cmd_mux_027:src_data -> pic_slave_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_027_src_channel;                                                          // cmd_mux_027:src_channel -> pic_slave_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_ready;                                                            // pic_slave_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire          pic_slave_burst_adapter_source0_endofpacket;                                      // pic_slave_burst_adapter:source0_endofpacket -> pic_slave_agent:cp_endofpacket
	wire          pic_slave_burst_adapter_source0_valid;                                            // pic_slave_burst_adapter:source0_valid -> pic_slave_agent:cp_valid
	wire          pic_slave_burst_adapter_source0_startofpacket;                                    // pic_slave_burst_adapter:source0_startofpacket -> pic_slave_agent:cp_startofpacket
	wire   [86:0] pic_slave_burst_adapter_source0_data;                                             // pic_slave_burst_adapter:source0_data -> pic_slave_agent:cp_data
	wire          pic_slave_burst_adapter_source0_ready;                                            // pic_slave_agent:cp_ready -> pic_slave_burst_adapter:source0_ready
	wire   [31:0] pic_slave_burst_adapter_source0_channel;                                          // pic_slave_burst_adapter:source0_channel -> pic_slave_agent:cp_channel
	wire          cmd_mux_029_src_endofpacket;                                                      // cmd_mux_029:src_endofpacket -> floppy_io_burst_adapter:sink0_endofpacket
	wire          cmd_mux_029_src_valid;                                                            // cmd_mux_029:src_valid -> floppy_io_burst_adapter:sink0_valid
	wire          cmd_mux_029_src_startofpacket;                                                    // cmd_mux_029:src_startofpacket -> floppy_io_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_029_src_data;                                                             // cmd_mux_029:src_data -> floppy_io_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_029_src_channel;                                                          // cmd_mux_029:src_channel -> floppy_io_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_ready;                                                            // floppy_io_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire          floppy_io_burst_adapter_source0_endofpacket;                                      // floppy_io_burst_adapter:source0_endofpacket -> floppy_io_agent:cp_endofpacket
	wire          floppy_io_burst_adapter_source0_valid;                                            // floppy_io_burst_adapter:source0_valid -> floppy_io_agent:cp_valid
	wire          floppy_io_burst_adapter_source0_startofpacket;                                    // floppy_io_burst_adapter:source0_startofpacket -> floppy_io_agent:cp_startofpacket
	wire   [86:0] floppy_io_burst_adapter_source0_data;                                             // floppy_io_burst_adapter:source0_data -> floppy_io_agent:cp_data
	wire          floppy_io_burst_adapter_source0_ready;                                            // floppy_io_agent:cp_ready -> floppy_io_burst_adapter:source0_ready
	wire   [31:0] floppy_io_burst_adapter_source0_channel;                                          // floppy_io_burst_adapter:source0_channel -> floppy_io_agent:cp_channel
	wire          cmd_mux_030_src_endofpacket;                                                      // cmd_mux_030:src_endofpacket -> ps2_io_burst_adapter:sink0_endofpacket
	wire          cmd_mux_030_src_valid;                                                            // cmd_mux_030:src_valid -> ps2_io_burst_adapter:sink0_valid
	wire          cmd_mux_030_src_startofpacket;                                                    // cmd_mux_030:src_startofpacket -> ps2_io_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_030_src_data;                                                             // cmd_mux_030:src_data -> ps2_io_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_030_src_channel;                                                          // cmd_mux_030:src_channel -> ps2_io_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_ready;                                                            // ps2_io_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire          ps2_io_burst_adapter_source0_endofpacket;                                         // ps2_io_burst_adapter:source0_endofpacket -> ps2_io_agent:cp_endofpacket
	wire          ps2_io_burst_adapter_source0_valid;                                               // ps2_io_burst_adapter:source0_valid -> ps2_io_agent:cp_valid
	wire          ps2_io_burst_adapter_source0_startofpacket;                                       // ps2_io_burst_adapter:source0_startofpacket -> ps2_io_agent:cp_startofpacket
	wire   [86:0] ps2_io_burst_adapter_source0_data;                                                // ps2_io_burst_adapter:source0_data -> ps2_io_agent:cp_data
	wire          ps2_io_burst_adapter_source0_ready;                                               // ps2_io_agent:cp_ready -> ps2_io_burst_adapter:source0_ready
	wire   [31:0] ps2_io_burst_adapter_source0_channel;                                             // ps2_io_burst_adapter:source0_channel -> ps2_io_agent:cp_channel
	wire          cmd_mux_031_src_endofpacket;                                                      // cmd_mux_031:src_endofpacket -> ps2_sysctl_burst_adapter:sink0_endofpacket
	wire          cmd_mux_031_src_valid;                                                            // cmd_mux_031:src_valid -> ps2_sysctl_burst_adapter:sink0_valid
	wire          cmd_mux_031_src_startofpacket;                                                    // cmd_mux_031:src_startofpacket -> ps2_sysctl_burst_adapter:sink0_startofpacket
	wire   [86:0] cmd_mux_031_src_data;                                                             // cmd_mux_031:src_data -> ps2_sysctl_burst_adapter:sink0_data
	wire   [31:0] cmd_mux_031_src_channel;                                                          // cmd_mux_031:src_channel -> ps2_sysctl_burst_adapter:sink0_channel
	wire          cmd_mux_031_src_ready;                                                            // ps2_sysctl_burst_adapter:sink0_ready -> cmd_mux_031:src_ready
	wire          ps2_sysctl_burst_adapter_source0_endofpacket;                                     // ps2_sysctl_burst_adapter:source0_endofpacket -> ps2_sysctl_agent:cp_endofpacket
	wire          ps2_sysctl_burst_adapter_source0_valid;                                           // ps2_sysctl_burst_adapter:source0_valid -> ps2_sysctl_agent:cp_valid
	wire          ps2_sysctl_burst_adapter_source0_startofpacket;                                   // ps2_sysctl_burst_adapter:source0_startofpacket -> ps2_sysctl_agent:cp_startofpacket
	wire   [86:0] ps2_sysctl_burst_adapter_source0_data;                                            // ps2_sysctl_burst_adapter:source0_data -> ps2_sysctl_agent:cp_data
	wire          ps2_sysctl_burst_adapter_source0_ready;                                           // ps2_sysctl_agent:cp_ready -> ps2_sysctl_burst_adapter:source0_ready
	wire   [31:0] ps2_sysctl_burst_adapter_source0_channel;                                         // ps2_sysctl_burst_adapter:source0_channel -> ps2_sysctl_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [113:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [31:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [113:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [31:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [113:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire   [31:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [113:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [31:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [113:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire   [31:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire          cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [113:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire   [31:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_ready;                                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire          cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire          cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [113:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire   [31:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_ready;                                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire          cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire          cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [113:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire   [31:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire          cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire          cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [113:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire   [31:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_ready;                                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire          cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire          cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [113:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire   [31:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_ready;                                                            // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire          cmd_demux_src11_endofpacket;                                                      // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                            // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire          cmd_demux_src11_startofpacket;                                                    // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [113:0] cmd_demux_src11_data;                                                             // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire   [31:0] cmd_demux_src11_channel;                                                          // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_ready;                                                            // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire          cmd_demux_src12_endofpacket;                                                      // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                            // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire          cmd_demux_src12_startofpacket;                                                    // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [113:0] cmd_demux_src12_data;                                                             // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire   [31:0] cmd_demux_src12_channel;                                                          // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_ready;                                                            // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire          cmd_demux_src13_endofpacket;                                                      // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                            // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire          cmd_demux_src13_startofpacket;                                                    // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [113:0] cmd_demux_src13_data;                                                             // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire   [31:0] cmd_demux_src13_channel;                                                          // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_ready;                                                            // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux_013:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire  [113:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux_013:sink1_data
	wire   [31:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux_013:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux_013:sink2_valid
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire  [113:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux_013:sink2_data
	wire   [31:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux_013:sink2_ready -> cmd_demux_002:src0_ready
	wire          cmd_demux_003_src0_endofpacket;                                                   // cmd_demux_003:src0_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_003_src0_valid;                                                         // cmd_demux_003:src0_valid -> cmd_mux_012:sink1_valid
	wire          cmd_demux_003_src0_startofpacket;                                                 // cmd_demux_003:src0_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire  [113:0] cmd_demux_003_src0_data;                                                          // cmd_demux_003:src0_data -> cmd_mux_012:sink1_data
	wire   [31:0] cmd_demux_003_src0_channel;                                                       // cmd_demux_003:src0_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_003_src0_ready;                                                         // cmd_mux_012:sink1_ready -> cmd_demux_003:src0_ready
	wire          cmd_demux_005_src0_endofpacket;                                                   // cmd_demux_005:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                         // cmd_demux_005:src0_valid -> cmd_mux_001:sink1_valid
	wire          cmd_demux_005_src0_startofpacket;                                                 // cmd_demux_005:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [113:0] cmd_demux_005_src0_data;                                                          // cmd_demux_005:src0_data -> cmd_mux_001:sink1_data
	wire   [31:0] cmd_demux_005_src0_channel;                                                       // cmd_demux_005:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_005_src0_ready;                                                         // cmd_mux_001:sink1_ready -> cmd_demux_005:src0_ready
	wire          cmd_demux_005_src1_endofpacket;                                                   // cmd_demux_005:src1_endofpacket -> cmd_mux_012:sink3_endofpacket
	wire          cmd_demux_005_src1_valid;                                                         // cmd_demux_005:src1_valid -> cmd_mux_012:sink3_valid
	wire          cmd_demux_005_src1_startofpacket;                                                 // cmd_demux_005:src1_startofpacket -> cmd_mux_012:sink3_startofpacket
	wire  [113:0] cmd_demux_005_src1_data;                                                          // cmd_demux_005:src1_data -> cmd_mux_012:sink3_data
	wire   [31:0] cmd_demux_005_src1_channel;                                                       // cmd_demux_005:src1_channel -> cmd_mux_012:sink3_channel
	wire          cmd_demux_005_src1_ready;                                                         // cmd_mux_012:sink3_ready -> cmd_demux_005:src1_ready
	wire          cmd_demux_005_src3_endofpacket;                                                   // cmd_demux_005:src3_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_005_src3_valid;                                                         // cmd_demux_005:src3_valid -> cmd_mux_015:sink0_valid
	wire          cmd_demux_005_src3_startofpacket;                                                 // cmd_demux_005:src3_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire  [113:0] cmd_demux_005_src3_data;                                                          // cmd_demux_005:src3_data -> cmd_mux_015:sink0_data
	wire   [31:0] cmd_demux_005_src3_channel;                                                       // cmd_demux_005:src3_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_005_src3_ready;                                                         // cmd_mux_015:sink0_ready -> cmd_demux_005:src3_ready
	wire          cmd_demux_006_src0_endofpacket;                                                   // cmd_demux_006:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_006_src0_valid;                                                         // cmd_demux_006:src0_valid -> cmd_mux:sink1_valid
	wire          cmd_demux_006_src0_startofpacket;                                                 // cmd_demux_006:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [113:0] cmd_demux_006_src0_data;                                                          // cmd_demux_006:src0_data -> cmd_mux:sink1_data
	wire   [31:0] cmd_demux_006_src0_channel;                                                       // cmd_demux_006:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_006_src0_ready;                                                         // cmd_mux:sink1_ready -> cmd_demux_006:src0_ready
	wire          cmd_demux_006_src1_endofpacket;                                                   // cmd_demux_006:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_006_src1_valid;                                                         // cmd_demux_006:src1_valid -> cmd_mux_001:sink2_valid
	wire          cmd_demux_006_src1_startofpacket;                                                 // cmd_demux_006:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire  [113:0] cmd_demux_006_src1_data;                                                          // cmd_demux_006:src1_data -> cmd_mux_001:sink2_data
	wire   [31:0] cmd_demux_006_src1_channel;                                                       // cmd_demux_006:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_006_src1_ready;                                                         // cmd_mux_001:sink2_ready -> cmd_demux_006:src1_ready
	wire          cmd_demux_007_src0_endofpacket;                                                   // cmd_demux_007:src0_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_007_src0_valid;                                                         // cmd_demux_007:src0_valid -> cmd_mux_010:sink1_valid
	wire          cmd_demux_007_src0_startofpacket;                                                 // cmd_demux_007:src0_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire  [113:0] cmd_demux_007_src0_data;                                                          // cmd_demux_007:src0_data -> cmd_mux_010:sink1_data
	wire   [31:0] cmd_demux_007_src0_channel;                                                       // cmd_demux_007:src0_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_007_src0_ready;                                                         // cmd_mux_010:sink1_ready -> cmd_demux_007:src0_ready
	wire          cmd_demux_007_src13_endofpacket;                                                  // cmd_demux_007:src13_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_007_src13_valid;                                                        // cmd_demux_007:src13_valid -> cmd_mux_028:sink0_valid
	wire          cmd_demux_007_src13_startofpacket;                                                // cmd_demux_007:src13_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire  [113:0] cmd_demux_007_src13_data;                                                         // cmd_demux_007:src13_data -> cmd_mux_028:sink0_data
	wire   [31:0] cmd_demux_007_src13_channel;                                                      // cmd_demux_007:src13_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_007_src13_ready;                                                        // cmd_mux_028:sink0_ready -> cmd_demux_007:src13_ready
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [113:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [31:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> rsp_mux_006:sink0_valid
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire  [113:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> rsp_mux_006:sink0_data
	wire   [31:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_src1_ready;                                                             // rsp_mux_006:sink0_ready -> rsp_demux:src1_ready
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [113:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [31:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                         // rsp_demux_001:src1_valid -> rsp_mux_005:sink0_valid
	wire          rsp_demux_001_src1_startofpacket;                                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire  [113:0] rsp_demux_001_src1_data;                                                          // rsp_demux_001:src1_data -> rsp_mux_005:sink0_data
	wire   [31:0] rsp_demux_001_src1_channel;                                                       // rsp_demux_001:src1_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_001_src1_ready;                                                         // rsp_mux_005:sink0_ready -> rsp_demux_001:src1_ready
	wire          rsp_demux_001_src2_endofpacket;                                                   // rsp_demux_001:src2_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                         // rsp_demux_001:src2_valid -> rsp_mux_006:sink1_valid
	wire          rsp_demux_001_src2_startofpacket;                                                 // rsp_demux_001:src2_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire  [113:0] rsp_demux_001_src2_data;                                                          // rsp_demux_001:src2_data -> rsp_mux_006:sink1_data
	wire   [31:0] rsp_demux_001_src2_channel;                                                       // rsp_demux_001:src2_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_001_src2_ready;                                                         // rsp_mux_006:sink1_ready -> rsp_demux_001:src2_ready
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [113:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire   [31:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [113:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [31:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [113:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire   [31:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [113:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire   [31:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_ready;                                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire  [113:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire   [31:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_ready;                                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire  [113:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire   [31:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire  [113:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire   [31:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_ready;                                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire  [113:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire   [31:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_ready;                                                         // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire          rsp_demux_010_src1_endofpacket;                                                   // rsp_demux_010:src1_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_010_src1_valid;                                                         // rsp_demux_010:src1_valid -> rsp_mux_007:sink0_valid
	wire          rsp_demux_010_src1_startofpacket;                                                 // rsp_demux_010:src1_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire  [113:0] rsp_demux_010_src1_data;                                                          // rsp_demux_010:src1_data -> rsp_mux_007:sink0_data
	wire   [31:0] rsp_demux_010_src1_channel;                                                       // rsp_demux_010:src1_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_010_src1_ready;                                                         // rsp_mux_007:sink0_ready -> rsp_demux_010:src1_ready
	wire          rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire          rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire  [113:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire   [31:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_ready;                                                         // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire          rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire          rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire  [113:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire   [31:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_ready;                                                         // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire          rsp_demux_012_src1_endofpacket;                                                   // rsp_demux_012:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_012_src1_valid;                                                         // rsp_demux_012:src1_valid -> rsp_mux_003:sink0_valid
	wire          rsp_demux_012_src1_startofpacket;                                                 // rsp_demux_012:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire  [113:0] rsp_demux_012_src1_data;                                                          // rsp_demux_012:src1_data -> rsp_mux_003:sink0_data
	wire   [31:0] rsp_demux_012_src1_channel;                                                       // rsp_demux_012:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_012_src1_ready;                                                         // rsp_mux_003:sink0_ready -> rsp_demux_012:src1_ready
	wire          rsp_demux_012_src3_endofpacket;                                                   // rsp_demux_012:src3_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_012_src3_valid;                                                         // rsp_demux_012:src3_valid -> rsp_mux_005:sink1_valid
	wire          rsp_demux_012_src3_startofpacket;                                                 // rsp_demux_012:src3_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire  [113:0] rsp_demux_012_src3_data;                                                          // rsp_demux_012:src3_data -> rsp_mux_005:sink1_data
	wire   [31:0] rsp_demux_012_src3_channel;                                                       // rsp_demux_012:src3_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_012_src3_ready;                                                         // rsp_mux_005:sink1_ready -> rsp_demux_012:src3_ready
	wire          rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire          rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire  [113:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire   [31:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_ready;                                                         // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire          rsp_demux_013_src1_endofpacket;                                                   // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_013_src1_valid;                                                         // rsp_demux_013:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_013_src1_startofpacket;                                                 // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [113:0] rsp_demux_013_src1_data;                                                          // rsp_demux_013:src1_data -> rsp_mux_001:sink0_data
	wire   [31:0] rsp_demux_013_src1_channel;                                                       // rsp_demux_013:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_013_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux_013:src1_ready
	wire          rsp_demux_013_src2_endofpacket;                                                   // rsp_demux_013:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_013_src2_valid;                                                         // rsp_demux_013:src2_valid -> rsp_mux_002:sink0_valid
	wire          rsp_demux_013_src2_startofpacket;                                                 // rsp_demux_013:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [113:0] rsp_demux_013_src2_data;                                                          // rsp_demux_013:src2_data -> rsp_mux_002:sink0_data
	wire   [31:0] rsp_demux_013_src2_channel;                                                       // rsp_demux_013:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_013_src2_ready;                                                         // rsp_mux_002:sink0_ready -> rsp_demux_013:src2_ready
	wire          rsp_demux_015_src0_endofpacket;                                                   // rsp_demux_015:src0_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_015_src0_valid;                                                         // rsp_demux_015:src0_valid -> rsp_mux_005:sink3_valid
	wire          rsp_demux_015_src0_startofpacket;                                                 // rsp_demux_015:src0_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire  [113:0] rsp_demux_015_src0_data;                                                          // rsp_demux_015:src0_data -> rsp_mux_005:sink3_data
	wire   [31:0] rsp_demux_015_src0_channel;                                                       // rsp_demux_015:src0_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_015_src0_ready;                                                         // rsp_mux_005:sink3_ready -> rsp_demux_015:src0_ready
	wire          rsp_demux_028_src0_endofpacket;                                                   // rsp_demux_028:src0_endofpacket -> rsp_mux_007:sink13_endofpacket
	wire          rsp_demux_028_src0_valid;                                                         // rsp_demux_028:src0_valid -> rsp_mux_007:sink13_valid
	wire          rsp_demux_028_src0_startofpacket;                                                 // rsp_demux_028:src0_startofpacket -> rsp_mux_007:sink13_startofpacket
	wire  [113:0] rsp_demux_028_src0_data;                                                          // rsp_demux_028:src0_data -> rsp_mux_007:sink13_data
	wire   [31:0] rsp_demux_028_src0_channel;                                                       // rsp_demux_028:src0_channel -> rsp_mux_007:sink13_channel
	wire          rsp_demux_028_src0_ready;                                                         // rsp_mux_007:sink13_ready -> rsp_demux_028:src0_ready
	wire          cmd_demux_004_src0_endofpacket;                                                   // cmd_demux_004:src0_endofpacket -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_004_src0_valid;                                                         // cmd_demux_004:src0_valid -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_004_src0_startofpacket;                                                 // cmd_demux_004:src0_startofpacket -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire   [86:0] cmd_demux_004_src0_data;                                                          // cmd_demux_004:src0_data -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_004_src0_channel;                                                       // cmd_demux_004:src0_channel -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_ready;                                                         // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire          pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;               // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid;                     // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_012:sink2_valid
	wire          pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;             // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire  [113:0] pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_data;                      // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_012:sink2_data
	wire          pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready;                     // cmd_mux_012:sink2_ready -> pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [31:0] pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel;                   // pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_012:sink2_channel
	wire          cmd_demux_005_src2_endofpacket;                                                   // cmd_demux_005:src2_endofpacket -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_005_src2_valid;                                                         // cmd_demux_005:src2_valid -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_valid
	wire          cmd_demux_005_src2_startofpacket;                                                 // cmd_demux_005:src2_startofpacket -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_005_src2_data;                                                          // cmd_demux_005:src2_data -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_005_src2_channel;                                                       // cmd_demux_005:src2_channel -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src2_ready;                                                         // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:in_ready -> cmd_demux_005:src2_ready
	wire          driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_endofpacket;   // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_valid;         // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_valid -> cmd_mux_014:sink0_valid
	wire          driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_startofpacket; // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire   [86:0] driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_data;          // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_data -> cmd_mux_014:sink0_data
	wire          driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_ready;         // cmd_mux_014:sink0_ready -> driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_ready
	wire   [31:0] driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_channel;       // driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter:out_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_007_src1_endofpacket;                                                   // cmd_demux_007:src1_endofpacket -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src1_valid;                                                         // cmd_demux_007:src1_valid -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src1_startofpacket;                                                 // cmd_demux_007:src1_startofpacket -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src1_data;                                                          // cmd_demux_007:src1_data -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src1_channel;                                                       // cmd_demux_007:src1_channel -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src1_ready;                                                         // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:in_ready -> cmd_demux_007:src1_ready
	wire          ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_endofpacket;                // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_valid;                      // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_valid -> cmd_mux_016:sink0_valid
	wire          ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_startofpacket;              // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_data;                       // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_data -> cmd_mux_016:sink0_data
	wire          ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_ready;                      // cmd_mux_016:sink0_ready -> ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_channel;                    // ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter:out_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_007_src2_endofpacket;                                                   // cmd_demux_007:src2_endofpacket -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src2_valid;                                                         // cmd_demux_007:src2_valid -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src2_startofpacket;                                                 // cmd_demux_007:src2_startofpacket -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src2_data;                                                          // cmd_demux_007:src2_data -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src2_channel;                                                       // cmd_demux_007:src2_channel -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src2_ready;                                                         // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:in_ready -> cmd_demux_007:src2_ready
	wire          ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_endofpacket;                 // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_valid;                       // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_valid -> cmd_mux_017:sink0_valid
	wire          ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_startofpacket;               // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_data;                        // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_data -> cmd_mux_017:sink0_data
	wire          ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_ready;                       // cmd_mux_017:sink0_ready -> ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_channel;                     // ao486_avalon_io_to_pc_dma_page_cmd_width_adapter:out_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_007_src3_endofpacket;                                                   // cmd_demux_007:src3_endofpacket -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src3_valid;                                                         // cmd_demux_007:src3_valid -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src3_startofpacket;                                                 // cmd_demux_007:src3_startofpacket -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src3_data;                                                          // cmd_demux_007:src3_data -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src3_channel;                                                       // cmd_demux_007:src3_channel -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src3_ready;                                                         // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:in_ready -> cmd_demux_007:src3_ready
	wire          ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_endofpacket;               // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_valid;                     // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_valid -> cmd_mux_018:sink0_valid
	wire          ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_startofpacket;             // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_data;                      // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_data -> cmd_mux_018:sink0_data
	wire          ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_ready;                     // cmd_mux_018:sink0_ready -> ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_channel;                   // ao486_avalon_io_to_pc_dma_master_cmd_width_adapter:out_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_007_src4_endofpacket;                                                   // cmd_demux_007:src4_endofpacket -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src4_valid;                                                         // cmd_demux_007:src4_valid -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src4_startofpacket;                                                 // cmd_demux_007:src4_startofpacket -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src4_data;                                                          // cmd_demux_007:src4_data -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src4_channel;                                                       // cmd_demux_007:src4_channel -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src4_ready;                                                         // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:in_ready -> cmd_demux_007:src4_ready
	wire          cmd_demux_007_src5_endofpacket;                                                   // cmd_demux_007:src5_endofpacket -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src5_valid;                                                         // cmd_demux_007:src5_valid -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src5_startofpacket;                                                 // cmd_demux_007:src5_startofpacket -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src5_data;                                                          // cmd_demux_007:src5_data -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src5_channel;                                                       // cmd_demux_007:src5_channel -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src5_ready;                                                         // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:in_ready -> cmd_demux_007:src5_ready
	wire          cmd_demux_007_src6_endofpacket;                                                   // cmd_demux_007:src6_endofpacket -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src6_valid;                                                         // cmd_demux_007:src6_valid -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src6_startofpacket;                                                 // cmd_demux_007:src6_startofpacket -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src6_data;                                                          // cmd_demux_007:src6_data -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src6_channel;                                                       // cmd_demux_007:src6_channel -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src6_ready;                                                         // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:in_ready -> cmd_demux_007:src6_ready
	wire          cmd_demux_007_src7_endofpacket;                                                   // cmd_demux_007:src7_endofpacket -> ao486_avalon_io_to_sound_io_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src7_valid;                                                         // cmd_demux_007:src7_valid -> ao486_avalon_io_to_sound_io_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src7_startofpacket;                                                 // cmd_demux_007:src7_startofpacket -> ao486_avalon_io_to_sound_io_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src7_data;                                                          // cmd_demux_007:src7_data -> ao486_avalon_io_to_sound_io_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src7_channel;                                                       // cmd_demux_007:src7_channel -> ao486_avalon_io_to_sound_io_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src7_ready;                                                         // ao486_avalon_io_to_sound_io_cmd_width_adapter:in_ready -> cmd_demux_007:src7_ready
	wire          ao486_avalon_io_to_sound_io_cmd_width_adapter_src_endofpacket;                    // ao486_avalon_io_to_sound_io_cmd_width_adapter:out_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          ao486_avalon_io_to_sound_io_cmd_width_adapter_src_valid;                          // ao486_avalon_io_to_sound_io_cmd_width_adapter:out_valid -> cmd_mux_022:sink0_valid
	wire          ao486_avalon_io_to_sound_io_cmd_width_adapter_src_startofpacket;                  // ao486_avalon_io_to_sound_io_cmd_width_adapter:out_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_sound_io_cmd_width_adapter_src_data;                           // ao486_avalon_io_to_sound_io_cmd_width_adapter:out_data -> cmd_mux_022:sink0_data
	wire          ao486_avalon_io_to_sound_io_cmd_width_adapter_src_ready;                          // cmd_mux_022:sink0_ready -> ao486_avalon_io_to_sound_io_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_sound_io_cmd_width_adapter_src_channel;                        // ao486_avalon_io_to_sound_io_cmd_width_adapter:out_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_007_src8_endofpacket;                                                   // cmd_demux_007:src8_endofpacket -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src8_valid;                                                         // cmd_demux_007:src8_valid -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src8_startofpacket;                                                 // cmd_demux_007:src8_startofpacket -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src8_data;                                                          // cmd_demux_007:src8_data -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src8_channel;                                                       // cmd_demux_007:src8_channel -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src8_ready;                                                         // ao486_avalon_io_to_sound_fm_cmd_width_adapter:in_ready -> cmd_demux_007:src8_ready
	wire          ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_endofpacket;                    // ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_valid;                          // ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_valid -> cmd_mux_023:sink0_valid
	wire          ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_startofpacket;                  // ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_data;                           // ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_data -> cmd_mux_023:sink0_data
	wire          ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_ready;                          // cmd_mux_023:sink0_ready -> ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_channel;                        // ao486_avalon_io_to_sound_fm_cmd_width_adapter:out_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_007_src9_endofpacket;                                                   // cmd_demux_007:src9_endofpacket -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src9_valid;                                                         // cmd_demux_007:src9_valid -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src9_startofpacket;                                                 // cmd_demux_007:src9_startofpacket -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src9_data;                                                          // cmd_demux_007:src9_data -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src9_channel;                                                       // cmd_demux_007:src9_channel -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src9_ready;                                                         // ao486_avalon_io_to_rtc_io_cmd_width_adapter:in_ready -> cmd_demux_007:src9_ready
	wire          ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_endofpacket;                      // ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_valid;                            // ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_valid -> cmd_mux_024:sink0_valid
	wire          ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_startofpacket;                    // ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_data;                             // ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_data -> cmd_mux_024:sink0_data
	wire          ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_ready;                            // cmd_mux_024:sink0_ready -> ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_channel;                          // ao486_avalon_io_to_rtc_io_cmd_width_adapter:out_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_007_src10_endofpacket;                                                  // cmd_demux_007:src10_endofpacket -> ao486_avalon_io_to_pit_io_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src10_valid;                                                        // cmd_demux_007:src10_valid -> ao486_avalon_io_to_pit_io_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src10_startofpacket;                                                // cmd_demux_007:src10_startofpacket -> ao486_avalon_io_to_pit_io_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src10_data;                                                         // cmd_demux_007:src10_data -> ao486_avalon_io_to_pit_io_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src10_channel;                                                      // cmd_demux_007:src10_channel -> ao486_avalon_io_to_pit_io_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src10_ready;                                                        // ao486_avalon_io_to_pit_io_cmd_width_adapter:in_ready -> cmd_demux_007:src10_ready
	wire          ao486_avalon_io_to_pit_io_cmd_width_adapter_src_endofpacket;                      // ao486_avalon_io_to_pit_io_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          ao486_avalon_io_to_pit_io_cmd_width_adapter_src_valid;                            // ao486_avalon_io_to_pit_io_cmd_width_adapter:out_valid -> cmd_mux_025:sink0_valid
	wire          ao486_avalon_io_to_pit_io_cmd_width_adapter_src_startofpacket;                    // ao486_avalon_io_to_pit_io_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pit_io_cmd_width_adapter_src_data;                             // ao486_avalon_io_to_pit_io_cmd_width_adapter:out_data -> cmd_mux_025:sink0_data
	wire          ao486_avalon_io_to_pit_io_cmd_width_adapter_src_ready;                            // cmd_mux_025:sink0_ready -> ao486_avalon_io_to_pit_io_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pit_io_cmd_width_adapter_src_channel;                          // ao486_avalon_io_to_pit_io_cmd_width_adapter:out_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_007_src11_endofpacket;                                                  // cmd_demux_007:src11_endofpacket -> ao486_avalon_io_to_pic_master_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src11_valid;                                                        // cmd_demux_007:src11_valid -> ao486_avalon_io_to_pic_master_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src11_startofpacket;                                                // cmd_demux_007:src11_startofpacket -> ao486_avalon_io_to_pic_master_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src11_data;                                                         // cmd_demux_007:src11_data -> ao486_avalon_io_to_pic_master_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src11_channel;                                                      // cmd_demux_007:src11_channel -> ao486_avalon_io_to_pic_master_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src11_ready;                                                        // ao486_avalon_io_to_pic_master_cmd_width_adapter:in_ready -> cmd_demux_007:src11_ready
	wire          ao486_avalon_io_to_pic_master_cmd_width_adapter_src_endofpacket;                  // ao486_avalon_io_to_pic_master_cmd_width_adapter:out_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          ao486_avalon_io_to_pic_master_cmd_width_adapter_src_valid;                        // ao486_avalon_io_to_pic_master_cmd_width_adapter:out_valid -> cmd_mux_026:sink0_valid
	wire          ao486_avalon_io_to_pic_master_cmd_width_adapter_src_startofpacket;                // ao486_avalon_io_to_pic_master_cmd_width_adapter:out_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pic_master_cmd_width_adapter_src_data;                         // ao486_avalon_io_to_pic_master_cmd_width_adapter:out_data -> cmd_mux_026:sink0_data
	wire          ao486_avalon_io_to_pic_master_cmd_width_adapter_src_ready;                        // cmd_mux_026:sink0_ready -> ao486_avalon_io_to_pic_master_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pic_master_cmd_width_adapter_src_channel;                      // ao486_avalon_io_to_pic_master_cmd_width_adapter:out_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_007_src12_endofpacket;                                                  // cmd_demux_007:src12_endofpacket -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src12_valid;                                                        // cmd_demux_007:src12_valid -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src12_startofpacket;                                                // cmd_demux_007:src12_startofpacket -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src12_data;                                                         // cmd_demux_007:src12_data -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src12_channel;                                                      // cmd_demux_007:src12_channel -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src12_ready;                                                        // ao486_avalon_io_to_pic_slave_cmd_width_adapter:in_ready -> cmd_demux_007:src12_ready
	wire          ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_endofpacket;                   // ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_valid;                         // ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_valid -> cmd_mux_027:sink0_valid
	wire          ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_startofpacket;                 // ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_data;                          // ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_data -> cmd_mux_027:sink0_data
	wire          ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_ready;                         // cmd_mux_027:sink0_ready -> ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_channel;                       // ao486_avalon_io_to_pic_slave_cmd_width_adapter:out_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_007_src14_endofpacket;                                                  // cmd_demux_007:src14_endofpacket -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src14_valid;                                                        // cmd_demux_007:src14_valid -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src14_startofpacket;                                                // cmd_demux_007:src14_startofpacket -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src14_data;                                                         // cmd_demux_007:src14_data -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src14_channel;                                                      // cmd_demux_007:src14_channel -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src14_ready;                                                        // ao486_avalon_io_to_floppy_io_cmd_width_adapter:in_ready -> cmd_demux_007:src14_ready
	wire          ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_endofpacket;                   // ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_valid;                         // ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_valid -> cmd_mux_029:sink0_valid
	wire          ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_startofpacket;                 // ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_data;                          // ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_data -> cmd_mux_029:sink0_data
	wire          ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_ready;                         // cmd_mux_029:sink0_ready -> ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_channel;                       // ao486_avalon_io_to_floppy_io_cmd_width_adapter:out_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_007_src15_endofpacket;                                                  // cmd_demux_007:src15_endofpacket -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src15_valid;                                                        // cmd_demux_007:src15_valid -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src15_startofpacket;                                                // cmd_demux_007:src15_startofpacket -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src15_data;                                                         // cmd_demux_007:src15_data -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src15_channel;                                                      // cmd_demux_007:src15_channel -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src15_ready;                                                        // ao486_avalon_io_to_ps2_io_cmd_width_adapter:in_ready -> cmd_demux_007:src15_ready
	wire          ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_endofpacket;                      // ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_valid;                            // ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_valid -> cmd_mux_030:sink0_valid
	wire          ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_startofpacket;                    // ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_data;                             // ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_data -> cmd_mux_030:sink0_data
	wire          ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_ready;                            // cmd_mux_030:sink0_ready -> ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_channel;                          // ao486_avalon_io_to_ps2_io_cmd_width_adapter:out_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_007_src16_endofpacket;                                                  // cmd_demux_007:src16_endofpacket -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src16_valid;                                                        // cmd_demux_007:src16_valid -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_valid
	wire          cmd_demux_007_src16_startofpacket;                                                // cmd_demux_007:src16_startofpacket -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_007_src16_data;                                                         // cmd_demux_007:src16_data -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_data
	wire   [31:0] cmd_demux_007_src16_channel;                                                      // cmd_demux_007:src16_channel -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src16_ready;                                                        // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:in_ready -> cmd_demux_007:src16_ready
	wire          ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_endofpacket;                  // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_valid;                        // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_valid -> cmd_mux_031:sink0_valid
	wire          ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_startofpacket;                // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire   [86:0] ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_data;                         // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_data -> cmd_mux_031:sink0_data
	wire          ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_ready;                        // cmd_mux_031:sink0_ready -> ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_channel;                      // ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter:out_channel -> cmd_mux_031:sink0_channel
	wire          rsp_demux_012_src2_endofpacket;                                                   // rsp_demux_012:src2_endofpacket -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_012_src2_valid;                                                         // rsp_demux_012:src2_valid -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_valid
	wire          rsp_demux_012_src2_startofpacket;                                                 // rsp_demux_012:src2_startofpacket -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_startofpacket
	wire  [113:0] rsp_demux_012_src2_data;                                                          // rsp_demux_012:src2_data -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_012_src2_channel;                                                       // rsp_demux_012:src2_channel -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src2_ready;                                                         // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:in_ready -> rsp_demux_012:src2_ready
	wire          sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket;               // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_valid;                     // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire          sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket;             // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire   [86:0] sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_data;                      // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_ready;                     // rsp_mux_004:sink0_ready -> sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_ready
	wire   [31:0] sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_channel;                   // sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_valid
	wire          rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src0_ready;                                                         // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:in_ready -> rsp_demux_014:src0_ready
	wire          floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_endofpacket;   // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_valid;         // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_valid -> rsp_mux_005:sink2_valid
	wire          floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_startofpacket; // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire  [113:0] floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_data;          // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_data -> rsp_mux_005:sink2_data
	wire          floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_ready;         // rsp_mux_005:sink2_ready -> floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_ready
	wire   [31:0] floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_channel;       // floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter:out_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_016_src0_endofpacket;                                                   // rsp_demux_016:src0_endofpacket -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_016_src0_valid;                                                         // rsp_demux_016:src0_valid -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_016_src0_startofpacket;                                                 // rsp_demux_016:src0_startofpacket -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_016_src0_data;                                                          // rsp_demux_016:src0_data -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_016_src0_channel;                                                       // rsp_demux_016:src0_channel -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_016_src0_ready;                                                         // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_016:src0_ready
	wire          pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid;                      // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink1_valid
	wire          pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;              // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire  [113:0] pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_data;                       // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink1_data
	wire          pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready;                      // rsp_mux_007:sink1_ready -> pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel;                    // pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_017_src0_endofpacket;                                                   // rsp_demux_017:src0_endofpacket -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_017_src0_valid;                                                         // rsp_demux_017:src0_valid -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_017_src0_startofpacket;                                                 // rsp_demux_017:src0_startofpacket -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_017_src0_data;                                                          // rsp_demux_017:src0_data -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_017_src0_channel;                                                       // rsp_demux_017:src0_channel -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_017_src0_ready;                                                         // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_017:src0_ready
	wire          pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                 // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink2_endofpacket
	wire          pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_valid;                       // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink2_valid
	wire          pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;               // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink2_startofpacket
	wire  [113:0] pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_data;                        // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink2_data
	wire          pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_ready;                       // rsp_mux_007:sink2_ready -> pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_channel;                     // pc_dma_page_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink2_channel
	wire          rsp_demux_018_src0_endofpacket;                                                   // rsp_demux_018:src0_endofpacket -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_018_src0_valid;                                                         // rsp_demux_018:src0_valid -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_018_src0_startofpacket;                                                 // rsp_demux_018:src0_startofpacket -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_018_src0_data;                                                          // rsp_demux_018:src0_data -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_018_src0_channel;                                                       // rsp_demux_018:src0_channel -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_018_src0_ready;                                                         // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_018:src0_ready
	wire          pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;               // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink3_endofpacket
	wire          pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_valid;                     // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink3_valid
	wire          pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;             // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink3_startofpacket
	wire  [113:0] pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_data;                      // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink3_data
	wire          pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_ready;                     // rsp_mux_007:sink3_ready -> pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_channel;                   // pc_dma_master_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink3_channel
	wire          rsp_demux_019_src0_endofpacket;                                                   // rsp_demux_019:src0_endofpacket -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_019_src0_valid;                                                         // rsp_demux_019:src0_valid -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_019_src0_startofpacket;                                                 // rsp_demux_019:src0_startofpacket -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_019_src0_data;                                                          // rsp_demux_019:src0_data -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_019_src0_channel;                                                       // rsp_demux_019:src0_channel -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_019_src0_ready;                                                         // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_019:src0_ready
	wire          rsp_demux_020_src0_endofpacket;                                                   // rsp_demux_020:src0_endofpacket -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_020_src0_valid;                                                         // rsp_demux_020:src0_valid -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_020_src0_startofpacket;                                                 // rsp_demux_020:src0_startofpacket -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_020_src0_data;                                                          // rsp_demux_020:src0_data -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_020_src0_channel;                                                       // rsp_demux_020:src0_channel -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_020_src0_ready;                                                         // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_020:src0_ready
	wire          rsp_demux_021_src0_endofpacket;                                                   // rsp_demux_021:src0_endofpacket -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_021_src0_valid;                                                         // rsp_demux_021:src0_valid -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_021_src0_startofpacket;                                                 // rsp_demux_021:src0_startofpacket -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_021_src0_data;                                                          // rsp_demux_021:src0_data -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_021_src0_channel;                                                       // rsp_demux_021:src0_channel -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_021_src0_ready;                                                         // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_021:src0_ready
	wire          rsp_demux_022_src0_endofpacket;                                                   // rsp_demux_022:src0_endofpacket -> sound_io_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_022_src0_valid;                                                         // rsp_demux_022:src0_valid -> sound_io_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_022_src0_startofpacket;                                                 // rsp_demux_022:src0_startofpacket -> sound_io_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_022_src0_data;                                                          // rsp_demux_022:src0_data -> sound_io_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_022_src0_channel;                                                       // rsp_demux_022:src0_channel -> sound_io_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_022_src0_ready;                                                         // sound_io_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_022:src0_ready
	wire          sound_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                    // sound_io_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink7_endofpacket
	wire          sound_io_to_ao486_avalon_io_rsp_width_adapter_src_valid;                          // sound_io_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink7_valid
	wire          sound_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                  // sound_io_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink7_startofpacket
	wire  [113:0] sound_io_to_ao486_avalon_io_rsp_width_adapter_src_data;                           // sound_io_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink7_data
	wire          sound_io_to_ao486_avalon_io_rsp_width_adapter_src_ready;                          // rsp_mux_007:sink7_ready -> sound_io_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] sound_io_to_ao486_avalon_io_rsp_width_adapter_src_channel;                        // sound_io_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink7_channel
	wire          rsp_demux_023_src0_endofpacket;                                                   // rsp_demux_023:src0_endofpacket -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_023_src0_valid;                                                         // rsp_demux_023:src0_valid -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_023_src0_startofpacket;                                                 // rsp_demux_023:src0_startofpacket -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_023_src0_data;                                                          // rsp_demux_023:src0_data -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_023_src0_channel;                                                       // rsp_demux_023:src0_channel -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src0_ready;                                                         // sound_fm_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_023:src0_ready
	wire          sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                    // sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink8_endofpacket
	wire          sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_valid;                          // sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink8_valid
	wire          sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                  // sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink8_startofpacket
	wire  [113:0] sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_data;                           // sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink8_data
	wire          sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_ready;                          // rsp_mux_007:sink8_ready -> sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_channel;                        // sound_fm_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink8_channel
	wire          rsp_demux_024_src0_endofpacket;                                                   // rsp_demux_024:src0_endofpacket -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_024_src0_valid;                                                         // rsp_demux_024:src0_valid -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_024_src0_startofpacket;                                                 // rsp_demux_024:src0_startofpacket -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_024_src0_data;                                                          // rsp_demux_024:src0_data -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_024_src0_channel;                                                       // rsp_demux_024:src0_channel -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_024_src0_ready;                                                         // rtc_io_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_024:src0_ready
	wire          rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                      // rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink9_endofpacket
	wire          rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_valid;                            // rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink9_valid
	wire          rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                    // rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink9_startofpacket
	wire  [113:0] rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_data;                             // rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink9_data
	wire          rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_ready;                            // rsp_mux_007:sink9_ready -> rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_channel;                          // rtc_io_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink9_channel
	wire          rsp_demux_025_src0_endofpacket;                                                   // rsp_demux_025:src0_endofpacket -> pit_io_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_025_src0_valid;                                                         // rsp_demux_025:src0_valid -> pit_io_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_025_src0_startofpacket;                                                 // rsp_demux_025:src0_startofpacket -> pit_io_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_025_src0_data;                                                          // rsp_demux_025:src0_data -> pit_io_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_025_src0_channel;                                                       // rsp_demux_025:src0_channel -> pit_io_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src0_ready;                                                         // pit_io_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_025:src0_ready
	wire          pit_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                      // pit_io_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink10_endofpacket
	wire          pit_io_to_ao486_avalon_io_rsp_width_adapter_src_valid;                            // pit_io_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink10_valid
	wire          pit_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                    // pit_io_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink10_startofpacket
	wire  [113:0] pit_io_to_ao486_avalon_io_rsp_width_adapter_src_data;                             // pit_io_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink10_data
	wire          pit_io_to_ao486_avalon_io_rsp_width_adapter_src_ready;                            // rsp_mux_007:sink10_ready -> pit_io_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pit_io_to_ao486_avalon_io_rsp_width_adapter_src_channel;                          // pit_io_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink10_channel
	wire          rsp_demux_026_src0_endofpacket;                                                   // rsp_demux_026:src0_endofpacket -> pic_master_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_026_src0_valid;                                                         // rsp_demux_026:src0_valid -> pic_master_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_026_src0_startofpacket;                                                 // rsp_demux_026:src0_startofpacket -> pic_master_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_026_src0_data;                                                          // rsp_demux_026:src0_data -> pic_master_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_026_src0_channel;                                                       // rsp_demux_026:src0_channel -> pic_master_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_026_src0_ready;                                                         // pic_master_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_026:src0_ready
	wire          pic_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                  // pic_master_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink11_endofpacket
	wire          pic_master_to_ao486_avalon_io_rsp_width_adapter_src_valid;                        // pic_master_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink11_valid
	wire          pic_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                // pic_master_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink11_startofpacket
	wire  [113:0] pic_master_to_ao486_avalon_io_rsp_width_adapter_src_data;                         // pic_master_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink11_data
	wire          pic_master_to_ao486_avalon_io_rsp_width_adapter_src_ready;                        // rsp_mux_007:sink11_ready -> pic_master_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pic_master_to_ao486_avalon_io_rsp_width_adapter_src_channel;                      // pic_master_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink11_channel
	wire          rsp_demux_027_src0_endofpacket;                                                   // rsp_demux_027:src0_endofpacket -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_027_src0_valid;                                                         // rsp_demux_027:src0_valid -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_027_src0_startofpacket;                                                 // rsp_demux_027:src0_startofpacket -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_027_src0_data;                                                          // rsp_demux_027:src0_data -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_027_src0_channel;                                                       // rsp_demux_027:src0_channel -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_027_src0_ready;                                                         // pic_slave_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_027:src0_ready
	wire          pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                   // pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink12_endofpacket
	wire          pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid;                         // pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink12_valid
	wire          pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                 // pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink12_startofpacket
	wire  [113:0] pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_data;                          // pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink12_data
	wire          pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready;                         // rsp_mux_007:sink12_ready -> pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel;                       // pic_slave_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink12_channel
	wire          rsp_demux_029_src0_endofpacket;                                                   // rsp_demux_029:src0_endofpacket -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_029_src0_valid;                                                         // rsp_demux_029:src0_valid -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_029_src0_startofpacket;                                                 // rsp_demux_029:src0_startofpacket -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_029_src0_data;                                                          // rsp_demux_029:src0_data -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_029_src0_channel;                                                       // rsp_demux_029:src0_channel -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_029_src0_ready;                                                         // floppy_io_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_029:src0_ready
	wire          floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                   // floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink14_endofpacket
	wire          floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_valid;                         // floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink14_valid
	wire          floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                 // floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink14_startofpacket
	wire  [113:0] floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_data;                          // floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink14_data
	wire          floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_ready;                         // rsp_mux_007:sink14_ready -> floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_channel;                       // floppy_io_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink14_channel
	wire          rsp_demux_030_src0_endofpacket;                                                   // rsp_demux_030:src0_endofpacket -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_030_src0_valid;                                                         // rsp_demux_030:src0_valid -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_030_src0_startofpacket;                                                 // rsp_demux_030:src0_startofpacket -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_030_src0_data;                                                          // rsp_demux_030:src0_data -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_030_src0_channel;                                                       // rsp_demux_030:src0_channel -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_030_src0_ready;                                                         // ps2_io_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_030:src0_ready
	wire          ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                      // ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink15_endofpacket
	wire          ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_valid;                            // ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink15_valid
	wire          ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                    // ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink15_startofpacket
	wire  [113:0] ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_data;                             // ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink15_data
	wire          ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_ready;                            // rsp_mux_007:sink15_ready -> ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_channel;                          // ps2_io_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink15_channel
	wire          rsp_demux_031_src0_endofpacket;                                                   // rsp_demux_031:src0_endofpacket -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_031_src0_valid;                                                         // rsp_demux_031:src0_valid -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_valid
	wire          rsp_demux_031_src0_startofpacket;                                                 // rsp_demux_031:src0_startofpacket -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_startofpacket
	wire   [86:0] rsp_demux_031_src0_data;                                                          // rsp_demux_031:src0_data -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_data
	wire   [31:0] rsp_demux_031_src0_channel;                                                       // rsp_demux_031:src0_channel -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_channel
	wire          rsp_demux_031_src0_ready;                                                         // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:in_ready -> rsp_demux_031:src0_ready
	wire          ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                  // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink16_endofpacket
	wire          ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_valid;                        // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_valid -> rsp_mux_007:sink16_valid
	wire          ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink16_startofpacket
	wire  [113:0] ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_data;                         // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_data -> rsp_mux_007:sink16_data
	wire          ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_ready;                        // rsp_mux_007:sink16_ready -> ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_channel;                      // ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter:out_channel -> rsp_mux_007:sink16_channel
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> crosser:in_valid
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> crosser:in_startofpacket
	wire  [113:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> crosser:in_data
	wire   [31:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> crosser:in_channel
	wire          cmd_demux_src3_ready;                                                             // crosser:in_ready -> cmd_demux:src3_ready
	wire          crosser_out_endofpacket;                                                          // crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          crosser_out_valid;                                                                // crosser:out_valid -> cmd_mux_003:sink0_valid
	wire          crosser_out_startofpacket;                                                        // crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [113:0] crosser_out_data;                                                                 // crosser:out_data -> cmd_mux_003:sink0_data
	wire   [31:0] crosser_out_channel;                                                              // crosser:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_out_ready;                                                                // cmd_mux_003:sink0_ready -> crosser:out_ready
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> crosser_001:in_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> crosser_001:in_valid
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [113:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> crosser_001:in_data
	wire   [31:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_003_src0_ready;                                                         // crosser_001:in_ready -> rsp_demux_003:src0_ready
	wire          crosser_001_out_endofpacket;                                                      // crosser_001:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          crosser_001_out_valid;                                                            // crosser_001:out_valid -> rsp_mux:sink3_valid
	wire          crosser_001_out_startofpacket;                                                    // crosser_001:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [113:0] crosser_001_out_data;                                                             // crosser_001:out_data -> rsp_mux:sink3_data
	wire   [31:0] crosser_001_out_channel;                                                          // crosser_001:out_channel -> rsp_mux:sink3_channel
	wire          crosser_001_out_ready;                                                            // rsp_mux:sink3_ready -> crosser_001:out_ready
	wire          ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_endofpacket;                    // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_endofpacket -> crosser_002:in_endofpacket
	wire          ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_valid;                          // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_valid -> crosser_002:in_valid
	wire          ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_startofpacket;                  // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_startofpacket -> crosser_002:in_startofpacket
	wire   [86:0] ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_data;                           // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_data -> crosser_002:in_data
	wire          ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_ready;                          // crosser_002:in_ready -> ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_channel;                        // ao486_avalon_io_to_vga_io_b_cmd_width_adapter:out_channel -> crosser_002:in_channel
	wire          crosser_002_out_endofpacket;                                                      // crosser_002:out_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          crosser_002_out_valid;                                                            // crosser_002:out_valid -> cmd_mux_019:sink0_valid
	wire          crosser_002_out_startofpacket;                                                    // crosser_002:out_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire   [86:0] crosser_002_out_data;                                                             // crosser_002:out_data -> cmd_mux_019:sink0_data
	wire   [31:0] crosser_002_out_channel;                                                          // crosser_002:out_channel -> cmd_mux_019:sink0_channel
	wire          crosser_002_out_ready;                                                            // cmd_mux_019:sink0_ready -> crosser_002:out_ready
	wire          ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_endofpacket;                    // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_endofpacket -> crosser_003:in_endofpacket
	wire          ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_valid;                          // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_valid -> crosser_003:in_valid
	wire          ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_startofpacket;                  // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_startofpacket -> crosser_003:in_startofpacket
	wire   [86:0] ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_data;                           // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_data -> crosser_003:in_data
	wire          ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_ready;                          // crosser_003:in_ready -> ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_channel;                        // ao486_avalon_io_to_vga_io_c_cmd_width_adapter:out_channel -> crosser_003:in_channel
	wire          crosser_003_out_endofpacket;                                                      // crosser_003:out_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          crosser_003_out_valid;                                                            // crosser_003:out_valid -> cmd_mux_020:sink0_valid
	wire          crosser_003_out_startofpacket;                                                    // crosser_003:out_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire   [86:0] crosser_003_out_data;                                                             // crosser_003:out_data -> cmd_mux_020:sink0_data
	wire   [31:0] crosser_003_out_channel;                                                          // crosser_003:out_channel -> cmd_mux_020:sink0_channel
	wire          crosser_003_out_ready;                                                            // cmd_mux_020:sink0_ready -> crosser_003:out_ready
	wire          ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_endofpacket;                    // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_endofpacket -> crosser_004:in_endofpacket
	wire          ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_valid;                          // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_valid -> crosser_004:in_valid
	wire          ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_startofpacket;                  // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_startofpacket -> crosser_004:in_startofpacket
	wire   [86:0] ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_data;                           // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_data -> crosser_004:in_data
	wire          ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_ready;                          // crosser_004:in_ready -> ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_ready
	wire   [31:0] ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_channel;                        // ao486_avalon_io_to_vga_io_d_cmd_width_adapter:out_channel -> crosser_004:in_channel
	wire          crosser_004_out_endofpacket;                                                      // crosser_004:out_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          crosser_004_out_valid;                                                            // crosser_004:out_valid -> cmd_mux_021:sink0_valid
	wire          crosser_004_out_startofpacket;                                                    // crosser_004:out_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire   [86:0] crosser_004_out_data;                                                             // crosser_004:out_data -> cmd_mux_021:sink0_data
	wire   [31:0] crosser_004_out_channel;                                                          // crosser_004:out_channel -> cmd_mux_021:sink0_channel
	wire          crosser_004_out_ready;                                                            // cmd_mux_021:sink0_ready -> crosser_004:out_ready
	wire          vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                    // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> crosser_005:in_endofpacket
	wire          vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_valid;                          // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_valid -> crosser_005:in_valid
	wire          vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                  // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> crosser_005:in_startofpacket
	wire  [113:0] vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_data;                           // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_data -> crosser_005:in_data
	wire          vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_ready;                          // crosser_005:in_ready -> vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_channel;                        // vga_io_b_to_ao486_avalon_io_rsp_width_adapter:out_channel -> crosser_005:in_channel
	wire          crosser_005_out_endofpacket;                                                      // crosser_005:out_endofpacket -> rsp_mux_007:sink4_endofpacket
	wire          crosser_005_out_valid;                                                            // crosser_005:out_valid -> rsp_mux_007:sink4_valid
	wire          crosser_005_out_startofpacket;                                                    // crosser_005:out_startofpacket -> rsp_mux_007:sink4_startofpacket
	wire  [113:0] crosser_005_out_data;                                                             // crosser_005:out_data -> rsp_mux_007:sink4_data
	wire   [31:0] crosser_005_out_channel;                                                          // crosser_005:out_channel -> rsp_mux_007:sink4_channel
	wire          crosser_005_out_ready;                                                            // rsp_mux_007:sink4_ready -> crosser_005:out_ready
	wire          vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                    // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> crosser_006:in_endofpacket
	wire          vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_valid;                          // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_valid -> crosser_006:in_valid
	wire          vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                  // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> crosser_006:in_startofpacket
	wire  [113:0] vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_data;                           // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_data -> crosser_006:in_data
	wire          vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_ready;                          // crosser_006:in_ready -> vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_channel;                        // vga_io_c_to_ao486_avalon_io_rsp_width_adapter:out_channel -> crosser_006:in_channel
	wire          crosser_006_out_endofpacket;                                                      // crosser_006:out_endofpacket -> rsp_mux_007:sink5_endofpacket
	wire          crosser_006_out_valid;                                                            // crosser_006:out_valid -> rsp_mux_007:sink5_valid
	wire          crosser_006_out_startofpacket;                                                    // crosser_006:out_startofpacket -> rsp_mux_007:sink5_startofpacket
	wire  [113:0] crosser_006_out_data;                                                             // crosser_006:out_data -> rsp_mux_007:sink5_data
	wire   [31:0] crosser_006_out_channel;                                                          // crosser_006:out_channel -> rsp_mux_007:sink5_channel
	wire          crosser_006_out_ready;                                                            // rsp_mux_007:sink5_ready -> crosser_006:out_ready
	wire          vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket;                    // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_endofpacket -> crosser_007:in_endofpacket
	wire          vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_valid;                          // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_valid -> crosser_007:in_valid
	wire          vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket;                  // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_startofpacket -> crosser_007:in_startofpacket
	wire  [113:0] vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_data;                           // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_data -> crosser_007:in_data
	wire          vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_ready;                          // crosser_007:in_ready -> vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_ready
	wire   [31:0] vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_channel;                        // vga_io_d_to_ao486_avalon_io_rsp_width_adapter:out_channel -> crosser_007:in_channel
	wire          crosser_007_out_endofpacket;                                                      // crosser_007:out_endofpacket -> rsp_mux_007:sink6_endofpacket
	wire          crosser_007_out_valid;                                                            // crosser_007:out_valid -> rsp_mux_007:sink6_valid
	wire          crosser_007_out_startofpacket;                                                    // crosser_007:out_startofpacket -> rsp_mux_007:sink6_startofpacket
	wire  [113:0] crosser_007_out_data;                                                             // crosser_007:out_data -> rsp_mux_007:sink6_data
	wire   [31:0] crosser_007_out_channel;                                                          // crosser_007:out_channel -> rsp_mux_007:sink6_channel
	wire          crosser_007_out_ready;                                                            // rsp_mux_007:sink6_ready -> crosser_007:out_ready
	wire   [31:0] driver_sd_avalon_master_0_limiter_cmd_valid_data;                                 // driver_sd_avalon_master_0_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire   [31:0] ao486_avalon_io_limiter_cmd_valid_data;                                           // ao486_avalon_io_limiter:cmd_src_valid -> cmd_demux_007:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_data_master_translator (
		.clk                      (clk_sys_clk_clk),                                                      //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_data_master_read),                                               //                          .read
		.av_readdata              (nios2_data_master_readdata),                                           //                          .readdata
		.av_write                 (nios2_data_master_write),                                              //                          .write
		.av_writedata             (nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_readdatavalid         (),                                                                     //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) floppy_avalon_master_translator (
		.clk                      (clk_sys_clk_clk),                                                         //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address              (floppy_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (floppy_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (floppy_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (floppy_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (floppy_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (floppy_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (floppy_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (floppy_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (floppy_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (floppy_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (floppy_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (floppy_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (floppy_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (floppy_avalon_master_read),                                               //                          .read
		.av_readdata              (floppy_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (floppy_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (floppy_avalon_master_write),                                              //                          .write
		.av_writedata             (floppy_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                    //               (terminated)
		.av_byteenable            (4'b1111),                                                                 //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.av_debugaccess           (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hdd_avalon_master_translator (
		.clk                      (clk_sys_clk_clk),                                                      //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (hdd_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (hdd_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (hdd_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (hdd_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (hdd_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (hdd_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (hdd_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (hdd_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (hdd_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (hdd_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (hdd_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (hdd_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (hdd_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (hdd_avalon_master_read),                                               //                          .read
		.av_readdata              (hdd_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (hdd_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (hdd_avalon_master_write),                                              //                          .write
		.av_writedata             (hdd_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                 //               (terminated)
		.av_byteenable            (4'b1111),                                                              //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pc_bus_avalon_sdram_master_translator (
		.clk                      (clk_sys_clk_clk),                                                               //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address              (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pc_bus_avalon_sdram_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pc_bus_avalon_sdram_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pc_bus_avalon_sdram_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (pc_bus_avalon_sdram_master_byteenable),                                         //                          .byteenable
		.av_read                  (pc_bus_avalon_sdram_master_read),                                               //                          .read
		.av_readdata              (pc_bus_avalon_sdram_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (pc_bus_avalon_sdram_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pc_bus_avalon_sdram_master_write),                                              //                          .write
		.av_writedata             (pc_bus_avalon_sdram_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                          //               (terminated)
		.av_begintransfer         (1'b0),                                                                          //               (terminated)
		.av_chipselect            (1'b0),                                                                          //               (terminated)
		.av_lock                  (1'b0),                                                                          //               (terminated)
		.av_debugaccess           (1'b0),                                                                          //               (terminated)
		.uav_clken                (),                                                                              //               (terminated)
		.av_clken                 (1'b1),                                                                          //               (terminated)
		.uav_response             (2'b00),                                                                         //               (terminated)
		.av_response              (),                                                                              //               (terminated)
		.uav_writeresponserequest (),                                                                              //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                          //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid    ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pc_dma_avalon_master_translator (
		.clk                      (clk_sys_clk_clk),                                                         //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address              (pc_dma_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pc_dma_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pc_dma_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pc_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pc_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pc_dma_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pc_dma_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pc_dma_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (pc_dma_avalon_master_read),                                               //                          .read
		.av_readdata              (pc_dma_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (pc_dma_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pc_dma_avalon_master_write),                                              //                          .write
		.av_writedata             (pc_dma_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                    //               (terminated)
		.av_byteenable            (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.av_debugaccess           (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) driver_sd_avalon_master_0_translator (
		.clk                      (clk_sys_clk_clk),                                                              //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address              (driver_sd_avalon_master_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (driver_sd_avalon_master_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (driver_sd_avalon_master_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (driver_sd_avalon_master_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (driver_sd_avalon_master_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (driver_sd_avalon_master_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (driver_sd_avalon_master_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (driver_sd_avalon_master_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (driver_sd_avalon_master_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (driver_sd_avalon_master_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (driver_sd_avalon_master_0_waitrequest),                                        //                          .waitrequest
		.av_read                  (driver_sd_avalon_master_0_read),                                               //                          .read
		.av_readdata              (driver_sd_avalon_master_0_readdata),                                           //                          .readdata
		.av_readdatavalid         (driver_sd_avalon_master_0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (driver_sd_avalon_master_0_write),                                              //                          .write
		.av_writedata             (driver_sd_avalon_master_0_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                         //               (terminated)
		.av_byteenable            (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                         //               (terminated)
		.av_begintransfer         (1'b0),                                                                         //               (terminated)
		.av_chipselect            (1'b0),                                                                         //               (terminated)
		.av_lock                  (1'b0),                                                                         //               (terminated)
		.av_debugaccess           (1'b0),                                                                         //               (terminated)
		.uav_clken                (),                                                                             //               (terminated)
		.av_clken                 (1'b1),                                                                         //               (terminated)
		.uav_response             (2'b00),                                                                        //               (terminated)
		.av_response              (),                                                                             //               (terminated)
		.uav_writeresponserequest (),                                                                             //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                         //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid    ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                      (clk_sys_clk_clk),                                                             //                       clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_readdatavalid         (),                                                                            //               (terminated)
		.av_write                 (1'b0),                                                                        //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ao486_avalon_io_translator (
		.clk                      (clk_sys_clk_clk),                                                    //                       clk.clk
		.reset                    (ao486_reset_sink_reset_bridge_in_reset_reset),                       //                     reset.reset
		.uav_address              (ao486_avalon_io_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (ao486_avalon_io_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (ao486_avalon_io_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (ao486_avalon_io_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (ao486_avalon_io_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (ao486_avalon_io_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (ao486_avalon_io_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (ao486_avalon_io_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (ao486_avalon_io_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (ao486_avalon_io_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (ao486_avalon_io_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (ao486_avalon_io_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (ao486_avalon_io_byteenable),                                         //                          .byteenable
		.av_read                  (ao486_avalon_io_read),                                               //                          .read
		.av_readdata              (ao486_avalon_io_readdata),                                           //                          .readdata
		.av_readdatavalid         (ao486_avalon_io_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (ao486_avalon_io_write),                                              //                          .write
		.av_writedata             (ao486_avalon_io_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.av_debugaccess           (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_jtag_debug_module_translator (
		.clk                      (clk_sys_clk_clk),                                //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (nios2_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (nios2_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (nios2_jtag_debug_module_write),                  //                         .write
		.av_read                  (nios2_jtag_debug_module_read),                   //                         .read
		.av_readdata              (nios2_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (nios2_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (nios2_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (nios2_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (nios2_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                               //              (terminated)
		.av_beginbursttransfer    (),                                               //              (terminated)
		.av_burstcount            (),                                               //              (terminated)
		.av_readdatavalid         (1'b0),                                           //              (terminated)
		.av_writebyteenable       (),                                               //              (terminated)
		.av_lock                  (),                                               //              (terminated)
		.av_chipselect            (),                                               //              (terminated)
		.av_clken                 (),                                               //              (terminated)
		.uav_clken                (1'b0),                                           //              (terminated)
		.av_outputenable          (),                                               //              (terminated)
		.uav_response             (),                                               //              (terminated)
		.av_response              (2'b00),                                          //              (terminated)
		.uav_writeresponserequest (1'b0),                                           //              (terminated)
		.uav_writeresponsevalid   (),                                               //              (terminated)
		.av_writeresponserequest  (),                                               //              (terminated)
		.av_writeresponsevalid    (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_for_nios2_s1_translator (
		.clk                      (clk_sys_clk_clk),                            //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (onchip_for_nios2_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_for_nios2_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_for_nios2_s1_agent_m0_read),          //                         .read
		.uav_write                (onchip_for_nios2_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_for_nios2_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_for_nios2_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_for_nios2_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_for_nios2_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_for_nios2_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_for_nios2_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_for_nios2_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_for_nios2_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (onchip_for_nios2_s1_write),                  //                         .write
		.av_readdata              (onchip_for_nios2_s1_readdata),               //                         .readdata
		.av_writedata             (onchip_for_nios2_s1_writedata),              //                         .writedata
		.av_byteenable            (onchip_for_nios2_s1_byteenable),             //                         .byteenable
		.av_chipselect            (onchip_for_nios2_s1_chipselect),             //                         .chipselect
		.av_clken                 (onchip_for_nios2_s1_clken),                  //                         .clken
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_bus_ctrl_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pc_bus_ctrl_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (pc_bus_ctrl_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (pc_bus_ctrl_agent_m0_read),                 //                         .read
		.uav_write                (pc_bus_ctrl_agent_m0_write),                //                         .write
		.uav_waitrequest          (pc_bus_ctrl_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (pc_bus_ctrl_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (pc_bus_ctrl_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (pc_bus_ctrl_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (pc_bus_ctrl_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (pc_bus_ctrl_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (pc_bus_ctrl_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (pc_bus_ctrl_address),                       //      avalon_anti_slave_0.address
		.av_write                 (pc_bus_ctrl_write),                         //                         .write
		.av_writedata             (pc_bus_ctrl_writedata),                     //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_sys_translator (
		.clk                      (clk_vga_clk_clk),                            //                      clk.clk
		.reset                    (vga_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (vga_sys_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (vga_sys_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (vga_sys_agent_m0_read),                      //                         .read
		.uav_write                (vga_sys_agent_m0_write),                     //                         .write
		.uav_waitrequest          (vga_sys_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (vga_sys_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (vga_sys_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (vga_sys_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (vga_sys_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (vga_sys_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (vga_sys_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (vga_sys_address),                            //      avalon_anti_slave_0.address
		.av_write                 (vga_sys_write),                              //                         .write
		.av_read                  (vga_sys_read),                               //                         .read
		.av_readdata              (vga_sys_readdata),                           //                         .readdata
		.av_writedata             (vga_sys_writedata),                          //                         .writedata
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_mgmt_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sound_mgmt_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sound_mgmt_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sound_mgmt_agent_m0_read),                  //                         .read
		.uav_write                (sound_mgmt_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sound_mgmt_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sound_mgmt_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sound_mgmt_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sound_mgmt_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sound_mgmt_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sound_mgmt_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sound_mgmt_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (sound_mgmt_address),                        //      avalon_anti_slave_0.address
		.av_write                 (sound_mgmt_write),                          //                         .write
		.av_writedata             (sound_mgmt_writedata),                      //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rtc_mgmt_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (rtc_mgmt_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (rtc_mgmt_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (rtc_mgmt_agent_m0_read),                    //                         .read
		.uav_write                (rtc_mgmt_agent_m0_write),                   //                         .write
		.uav_waitrequest          (rtc_mgmt_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (rtc_mgmt_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (rtc_mgmt_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (rtc_mgmt_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (rtc_mgmt_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (rtc_mgmt_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (rtc_mgmt_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (rtc_mgmt_address),                          //      avalon_anti_slave_0.address
		.av_write                 (rtc_mgmt_write),                            //                         .write
		.av_writedata             (rtc_mgmt_writedata),                        //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pit_mgmt_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pit_mgmt_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (pit_mgmt_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (pit_mgmt_agent_m0_read),                    //                         .read
		.uav_write                (pit_mgmt_agent_m0_write),                   //                         .write
		.uav_waitrequest          (pit_mgmt_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (pit_mgmt_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (pit_mgmt_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (pit_mgmt_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (pit_mgmt_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (pit_mgmt_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (pit_mgmt_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (pit_mgmt_address),                          //      avalon_anti_slave_0.address
		.av_write                 (pit_mgmt_write),                            //                         .write
		.av_writedata             (pit_mgmt_writedata),                        //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd_mgmt_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (hdd_mgmt_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (hdd_mgmt_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (hdd_mgmt_agent_m0_read),                    //                         .read
		.uav_write                (hdd_mgmt_agent_m0_write),                   //                         .write
		.uav_waitrequest          (hdd_mgmt_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (hdd_mgmt_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (hdd_mgmt_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (hdd_mgmt_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (hdd_mgmt_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (hdd_mgmt_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (hdd_mgmt_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (hdd_mgmt_address),                          //      avalon_anti_slave_0.address
		.av_write                 (hdd_mgmt_write),                            //                         .write
		.av_writedata             (hdd_mgmt_writedata),                        //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy_mgmt_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (floppy_mgmt_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (floppy_mgmt_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (floppy_mgmt_agent_m0_read),                 //                         .read
		.uav_write                (floppy_mgmt_agent_m0_write),                //                         .write
		.uav_waitrequest          (floppy_mgmt_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (floppy_mgmt_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (floppy_mgmt_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (floppy_mgmt_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (floppy_mgmt_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (floppy_mgmt_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (floppy_mgmt_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (floppy_mgmt_address),                       //      avalon_anti_slave_0.address
		.av_write                 (floppy_mgmt_write),                         //                         .write
		.av_writedata             (floppy_mgmt_writedata),                     //                         .writedata
		.av_read                  (),                                          //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),      //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_input_s1_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pio_input_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (pio_input_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (pio_input_s1_agent_m0_read),                //                         .read
		.uav_write                (pio_input_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (pio_input_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (pio_input_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (pio_input_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (pio_input_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (pio_input_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (pio_input_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (pio_input_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (pio_input_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (pio_input_s1_write),                        //                         .write
		.av_readdata              (pio_input_s1_readdata),                     //                         .readdata
		.av_writedata             (pio_input_s1_writedata),                    //                         .writedata
		.av_chipselect            (pio_input_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (clk_sys_clk_clk),                                    //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_output_s1_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pio_output_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (pio_output_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (pio_output_s1_agent_m0_read),               //                         .read
		.uav_write                (pio_output_s1_agent_m0_write),              //                         .write
		.uav_waitrequest          (pio_output_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (pio_output_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (pio_output_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (pio_output_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (pio_output_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (pio_output_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (pio_output_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address               (pio_output_s1_address),                     //      avalon_anti_slave_0.address
		.av_write                 (pio_output_s1_write),                       //                         .write
		.av_readdata              (pio_output_s1_readdata),                    //                         .readdata
		.av_writedata             (pio_output_s1_writedata),                   //                         .writedata
		.av_chipselect            (pio_output_s1_chipselect),                  //                         .chipselect
		.av_read                  (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (sdram_s1_agent_m0_read),                    //                         .read
		.uav_write                (sdram_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (sdram_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (sdram_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (sdram_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (sdram_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (sdram_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                            //                         .write
		.av_read                  (sdram_s1_read),                             //                         .read
		.av_readdata              (sdram_s1_readdata),                         //                         .readdata
		.av_writedata             (sdram_s1_writedata),                        //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                       //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                      //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                       //                         .chipselect
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) driver_sd_avalon_slave_0_translator (
		.clk                      (clk_sys_clk_clk),                                 //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address              (driver_sd_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (driver_sd_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (driver_sd_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (driver_sd_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (driver_sd_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (driver_sd_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (driver_sd_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (driver_sd_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (driver_sd_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (driver_sd_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (driver_sd_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (driver_sd_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (driver_sd_avalon_slave_0_write),                  //                         .write
		.av_read                  (driver_sd_avalon_slave_0_read),                   //                         .read
		.av_readdata              (driver_sd_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (driver_sd_avalon_slave_0_writedata),              //                         .writedata
		.av_begintransfer         (),                                                //              (terminated)
		.av_beginbursttransfer    (),                                                //              (terminated)
		.av_burstcount            (),                                                //              (terminated)
		.av_byteenable            (),                                                //              (terminated)
		.av_readdatavalid         (1'b0),                                            //              (terminated)
		.av_waitrequest           (1'b0),                                            //              (terminated)
		.av_writebyteenable       (),                                                //              (terminated)
		.av_lock                  (),                                                //              (terminated)
		.av_chipselect            (),                                                //              (terminated)
		.av_clken                 (),                                                //              (terminated)
		.uav_clken                (1'b0),                                            //              (terminated)
		.av_debugaccess           (),                                                //              (terminated)
		.av_outputenable          (),                                                //              (terminated)
		.uav_response             (),                                                //              (terminated)
		.av_response              (2'b00),                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                //              (terminated)
		.av_writeresponserequest  (),                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy_sd_slave_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (floppy_sd_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (floppy_sd_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (floppy_sd_slave_agent_m0_read),             //                         .read
		.uav_write                (floppy_sd_slave_agent_m0_write),            //                         .write
		.uav_waitrequest          (floppy_sd_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (floppy_sd_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (floppy_sd_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (floppy_sd_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (floppy_sd_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (floppy_sd_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (floppy_sd_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (floppy_sd_slave_address),                   //      avalon_anti_slave_0.address
		.av_write                 (floppy_sd_slave_write),                     //                         .write
		.av_read                  (floppy_sd_slave_read),                      //                         .read
		.av_readdata              (floppy_sd_slave_readdata),                  //                         .readdata
		.av_writedata             (floppy_sd_slave_writedata),                 //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd_sd_slave_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (hdd_sd_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (hdd_sd_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (hdd_sd_slave_agent_m0_read),                //                         .read
		.uav_write                (hdd_sd_slave_agent_m0_write),               //                         .write
		.uav_waitrequest          (hdd_sd_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (hdd_sd_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (hdd_sd_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (hdd_sd_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (hdd_sd_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (hdd_sd_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (hdd_sd_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (hdd_sd_slave_address),                      //      avalon_anti_slave_0.address
		.av_write                 (hdd_sd_slave_write),                        //                         .write
		.av_read                  (hdd_sd_slave_read),                         //                         .read
		.av_readdata              (hdd_sd_slave_readdata),                     //                         .readdata
		.av_writedata             (hdd_sd_slave_writedata),                    //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_slave_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pc_dma_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (pc_dma_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (pc_dma_slave_agent_m0_read),                //                         .read
		.uav_write                (pc_dma_slave_agent_m0_write),               //                         .write
		.uav_waitrequest          (pc_dma_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (pc_dma_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (pc_dma_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (pc_dma_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (pc_dma_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (pc_dma_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (pc_dma_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (pc_dma_slave_address),                      //      avalon_anti_slave_0.address
		.av_write                 (pc_dma_slave_write),                        //                         .write
		.av_read                  (pc_dma_slave_read),                         //                         .read
		.av_readdata              (pc_dma_slave_readdata),                     //                         .readdata
		.av_writedata             (pc_dma_slave_writedata),                    //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_page_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pc_dma_page_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (pc_dma_page_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (pc_dma_page_agent_m0_read),                 //                         .read
		.uav_write                (pc_dma_page_agent_m0_write),                //                         .write
		.uav_waitrequest          (pc_dma_page_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (pc_dma_page_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (pc_dma_page_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (pc_dma_page_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (pc_dma_page_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (pc_dma_page_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (pc_dma_page_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (pc_dma_page_address),                       //      avalon_anti_slave_0.address
		.av_write                 (pc_dma_page_write),                         //                         .write
		.av_read                  (pc_dma_page_read),                          //                         .read
		.av_readdata              (pc_dma_page_readdata),                      //                         .readdata
		.av_writedata             (pc_dma_page_writedata),                     //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_master_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pc_dma_master_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (pc_dma_master_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (pc_dma_master_agent_m0_read),               //                         .read
		.uav_write                (pc_dma_master_agent_m0_write),              //                         .write
		.uav_waitrequest          (pc_dma_master_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (pc_dma_master_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (pc_dma_master_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (pc_dma_master_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (pc_dma_master_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (pc_dma_master_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (pc_dma_master_agent_m0_debugaccess),        //                         .debugaccess
		.av_address               (pc_dma_master_address),                     //      avalon_anti_slave_0.address
		.av_write                 (pc_dma_master_write),                       //                         .write
		.av_read                  (pc_dma_master_read),                        //                         .read
		.av_readdata              (pc_dma_master_readdata),                    //                         .readdata
		.av_writedata             (pc_dma_master_writedata),                   //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_b_translator (
		.clk                      (clk_vga_clk_clk),                            //                      clk.clk
		.reset                    (vga_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (vga_io_b_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (vga_io_b_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (vga_io_b_agent_m0_read),                     //                         .read
		.uav_write                (vga_io_b_agent_m0_write),                    //                         .write
		.uav_waitrequest          (vga_io_b_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (vga_io_b_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (vga_io_b_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (vga_io_b_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (vga_io_b_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (vga_io_b_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (vga_io_b_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (vga_io_b_address),                           //      avalon_anti_slave_0.address
		.av_write                 (vga_io_b_write),                             //                         .write
		.av_read                  (vga_io_b_read),                              //                         .read
		.av_readdata              (vga_io_b_readdata),                          //                         .readdata
		.av_writedata             (vga_io_b_writedata),                         //                         .writedata
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_c_translator (
		.clk                      (clk_vga_clk_clk),                            //                      clk.clk
		.reset                    (vga_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (vga_io_c_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (vga_io_c_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (vga_io_c_agent_m0_read),                     //                         .read
		.uav_write                (vga_io_c_agent_m0_write),                    //                         .write
		.uav_waitrequest          (vga_io_c_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (vga_io_c_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (vga_io_c_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (vga_io_c_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (vga_io_c_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (vga_io_c_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (vga_io_c_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (vga_io_c_address),                           //      avalon_anti_slave_0.address
		.av_write                 (vga_io_c_write),                             //                         .write
		.av_read                  (vga_io_c_read),                              //                         .read
		.av_readdata              (vga_io_c_readdata),                          //                         .readdata
		.av_writedata             (vga_io_c_writedata),                         //                         .writedata
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_d_translator (
		.clk                      (clk_vga_clk_clk),                            //                      clk.clk
		.reset                    (vga_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (vga_io_d_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (vga_io_d_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (vga_io_d_agent_m0_read),                     //                         .read
		.uav_write                (vga_io_d_agent_m0_write),                    //                         .write
		.uav_waitrequest          (vga_io_d_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (vga_io_d_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (vga_io_d_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (vga_io_d_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (vga_io_d_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (vga_io_d_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (vga_io_d_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (vga_io_d_address),                           //      avalon_anti_slave_0.address
		.av_write                 (vga_io_d_write),                             //                         .write
		.av_read                  (vga_io_d_read),                              //                         .read
		.av_readdata              (vga_io_d_readdata),                          //                         .readdata
		.av_writedata             (vga_io_d_writedata),                         //                         .writedata
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sound_io_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (sound_io_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (sound_io_agent_m0_read),                    //                         .read
		.uav_write                (sound_io_agent_m0_write),                   //                         .write
		.uav_waitrequest          (sound_io_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (sound_io_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (sound_io_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (sound_io_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (sound_io_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (sound_io_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (sound_io_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (sound_io_address),                          //      avalon_anti_slave_0.address
		.av_write                 (sound_io_write),                            //                         .write
		.av_read                  (sound_io_read),                             //                         .read
		.av_readdata              (sound_io_readdata),                         //                         .readdata
		.av_writedata             (sound_io_writedata),                        //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_fm_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sound_fm_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (sound_fm_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (sound_fm_agent_m0_read),                    //                         .read
		.uav_write                (sound_fm_agent_m0_write),                   //                         .write
		.uav_waitrequest          (sound_fm_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (sound_fm_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (sound_fm_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (sound_fm_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (sound_fm_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (sound_fm_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (sound_fm_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (sound_fm_address),                          //      avalon_anti_slave_0.address
		.av_write                 (sound_fm_write),                            //                         .write
		.av_read                  (sound_fm_read),                             //                         .read
		.av_readdata              (sound_fm_readdata),                         //                         .readdata
		.av_writedata             (sound_fm_writedata),                        //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rtc_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (rtc_io_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (rtc_io_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (rtc_io_agent_m0_read),                      //                         .read
		.uav_write                (rtc_io_agent_m0_write),                     //                         .write
		.uav_waitrequest          (rtc_io_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (rtc_io_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (rtc_io_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (rtc_io_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (rtc_io_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (rtc_io_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (rtc_io_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (rtc_io_address),                            //      avalon_anti_slave_0.address
		.av_write                 (rtc_io_write),                              //                         .write
		.av_read                  (rtc_io_read),                               //                         .read
		.av_readdata              (rtc_io_readdata),                           //                         .readdata
		.av_writedata             (rtc_io_writedata),                          //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pit_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pit_io_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (pit_io_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (pit_io_agent_m0_read),                      //                         .read
		.uav_write                (pit_io_agent_m0_write),                     //                         .write
		.uav_waitrequest          (pit_io_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (pit_io_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (pit_io_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (pit_io_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (pit_io_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (pit_io_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (pit_io_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (pit_io_address),                            //      avalon_anti_slave_0.address
		.av_write                 (pit_io_write),                              //                         .write
		.av_read                  (pit_io_read),                               //                         .read
		.av_readdata              (pit_io_readdata),                           //                         .readdata
		.av_writedata             (pit_io_writedata),                          //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pic_master_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pic_master_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (pic_master_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (pic_master_agent_m0_read),                  //                         .read
		.uav_write                (pic_master_agent_m0_write),                 //                         .write
		.uav_waitrequest          (pic_master_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (pic_master_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (pic_master_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (pic_master_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (pic_master_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (pic_master_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (pic_master_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (pic_master_address),                        //      avalon_anti_slave_0.address
		.av_write                 (pic_master_write),                          //                         .write
		.av_read                  (pic_master_read),                           //                         .read
		.av_readdata              (pic_master_readdata),                       //                         .readdata
		.av_writedata             (pic_master_writedata),                      //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pic_slave_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pic_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (pic_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (pic_slave_agent_m0_read),                   //                         .read
		.uav_write                (pic_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest          (pic_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (pic_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (pic_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (pic_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (pic_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (pic_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (pic_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (pic_slave_address),                         //      avalon_anti_slave_0.address
		.av_write                 (pic_slave_write),                           //                         .write
		.av_read                  (pic_slave_read),                            //                         .read
		.av_readdata              (pic_slave_readdata),                        //                         .readdata
		.av_writedata             (pic_slave_writedata),                       //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (hdd_io_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (hdd_io_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (hdd_io_agent_m0_read),                      //                         .read
		.uav_write                (hdd_io_agent_m0_write),                     //                         .write
		.uav_waitrequest          (hdd_io_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (hdd_io_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (hdd_io_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (hdd_io_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (hdd_io_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (hdd_io_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (hdd_io_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (hdd_io_address),                            //      avalon_anti_slave_0.address
		.av_write                 (hdd_io_write),                              //                         .write
		.av_read                  (hdd_io_read),                               //                         .read
		.av_readdata              (hdd_io_readdata),                           //                         .readdata
		.av_writedata             (hdd_io_writedata),                          //                         .writedata
		.av_byteenable            (hdd_io_byteenable),                         //                         .byteenable
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (floppy_io_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (floppy_io_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (floppy_io_agent_m0_read),                   //                         .read
		.uav_write                (floppy_io_agent_m0_write),                  //                         .write
		.uav_waitrequest          (floppy_io_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (floppy_io_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (floppy_io_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (floppy_io_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (floppy_io_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (floppy_io_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (floppy_io_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (floppy_io_address),                         //      avalon_anti_slave_0.address
		.av_write                 (floppy_io_write),                           //                         .write
		.av_read                  (floppy_io_read),                            //                         .read
		.av_readdata              (floppy_io_readdata),                        //                         .readdata
		.av_writedata             (floppy_io_writedata),                       //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_io_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ps2_io_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (ps2_io_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (ps2_io_agent_m0_read),                      //                         .read
		.uav_write                (ps2_io_agent_m0_write),                     //                         .write
		.uav_waitrequest          (ps2_io_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (ps2_io_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (ps2_io_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (ps2_io_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (ps2_io_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (ps2_io_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (ps2_io_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (ps2_io_address),                            //      avalon_anti_slave_0.address
		.av_write                 (ps2_io_write),                              //                         .write
		.av_read                  (ps2_io_read),                               //                         .read
		.av_readdata              (ps2_io_readdata),                           //                         .readdata
		.av_writedata             (ps2_io_writedata),                          //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_sysctl_translator (
		.clk                      (clk_sys_clk_clk),                           //                      clk.clk
		.reset                    (nios2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ps2_sysctl_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (ps2_sysctl_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (ps2_sysctl_agent_m0_read),                  //                         .read
		.uav_write                (ps2_sysctl_agent_m0_write),                 //                         .write
		.uav_waitrequest          (ps2_sysctl_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (ps2_sysctl_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (ps2_sysctl_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (ps2_sysctl_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (ps2_sysctl_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (ps2_sysctl_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (ps2_sysctl_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (ps2_sysctl_address),                        //      avalon_anti_slave_0.address
		.av_write                 (ps2_sysctl_write),                          //                         .write
		.av_read                  (ps2_sysctl_read),                           //                         .read
		.av_readdata              (ps2_sysctl_readdata),                       //                         .readdata
		.av_writedata             (ps2_sysctl_writedata),                      //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                     (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                    //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                     //          .data
		.rp_channel              (rsp_mux_src_channel),                                                  //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                              //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                    //          .ready
		.av_response             (),                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) floppy_avalon_master_agent (
		.clk                     (clk_sys_clk_clk),                                                         //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address              (floppy_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (floppy_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (floppy_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (floppy_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (floppy_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (floppy_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (floppy_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (floppy_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (floppy_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (floppy_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (floppy_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (floppy_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (floppy_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (floppy_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (floppy_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (floppy_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                                   //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                                    //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                                 //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                             //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                                   //          .ready
		.av_response             (),                                                                        // (terminated)
		.av_writeresponserequest (1'b0),                                                                    // (terminated)
		.av_writeresponsevalid   ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd_avalon_master_agent (
		.clk                     (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (hdd_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (hdd_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (hdd_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (hdd_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (hdd_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (hdd_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (hdd_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (hdd_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (hdd_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (hdd_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (hdd_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (hdd_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (hdd_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (hdd_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (hdd_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (hdd_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_002_src_valid),                                                //        rp.valid
		.rp_data                 (rsp_mux_002_src_data),                                                 //          .data
		.rp_channel              (rsp_mux_002_src_channel),                                              //          .channel
		.rp_startofpacket        (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket          (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rp_ready                (rsp_mux_002_src_ready),                                                //          .ready
		.av_response             (),                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_bus_avalon_sdram_master_agent (
		.clk                     (clk_sys_clk_clk),                                                               //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pc_bus_avalon_sdram_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pc_bus_avalon_sdram_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pc_bus_avalon_sdram_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pc_bus_avalon_sdram_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pc_bus_avalon_sdram_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_003_src_valid),                                                         //        rp.valid
		.rp_data                 (rsp_mux_003_src_data),                                                          //          .data
		.rp_channel              (rsp_mux_003_src_channel),                                                       //          .channel
		.rp_startofpacket        (rsp_mux_003_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket          (rsp_mux_003_src_endofpacket),                                                   //          .endofpacket
		.rp_ready                (rsp_mux_003_src_ready),                                                         //          .ready
		.av_response             (),                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BEGIN_BURST           (62),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (7),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_dma_avalon_master_agent (
		.clk                     (clk_sys_clk_clk),                                                         //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address              (pc_dma_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pc_dma_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pc_dma_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pc_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pc_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pc_dma_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pc_dma_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pc_dma_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pc_dma_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pc_dma_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pc_dma_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_004_src_valid),                                                   //        rp.valid
		.rp_data                 (rsp_mux_004_src_data),                                                    //          .data
		.rp_channel              (rsp_mux_004_src_channel),                                                 //          .channel
		.rp_startofpacket        (rsp_mux_004_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket          (rsp_mux_004_src_endofpacket),                                             //          .endofpacket
		.rp_ready                (rsp_mux_004_src_ready),                                                   //          .ready
		.av_response             (),                                                                        // (terminated)
		.av_writeresponserequest (1'b0),                                                                    // (terminated)
		.av_writeresponsevalid   ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) driver_sd_avalon_master_0_agent (
		.clk                     (clk_sys_clk_clk),                                                              //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address              (driver_sd_avalon_master_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (driver_sd_avalon_master_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (driver_sd_avalon_master_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (driver_sd_avalon_master_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (driver_sd_avalon_master_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (driver_sd_avalon_master_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (driver_sd_avalon_master_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (driver_sd_avalon_master_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (driver_sd_avalon_master_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (driver_sd_avalon_master_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (driver_sd_avalon_master_0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (driver_sd_avalon_master_0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (driver_sd_avalon_master_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (driver_sd_avalon_master_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (driver_sd_avalon_master_0_agent_cp_ready),                                     //          .ready
		.rp_valid                (driver_sd_avalon_master_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (driver_sd_avalon_master_0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (driver_sd_avalon_master_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (driver_sd_avalon_master_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (driver_sd_avalon_master_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (driver_sd_avalon_master_0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                             // (terminated)
		.av_writeresponserequest (1'b0),                                                                         // (terminated)
		.av_writeresponsevalid   ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                     (clk_sys_clk_clk),                                                             //       clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_006_src_valid),                                                       //        rp.valid
		.rp_data                 (rsp_mux_006_src_data),                                                        //          .data
		.rp_channel              (rsp_mux_006_src_channel),                                                     //          .channel
		.rp_startofpacket        (rsp_mux_006_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket          (rsp_mux_006_src_endofpacket),                                                 //          .endofpacket
		.rp_ready                (rsp_mux_006_src_ready),                                                       //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ao486_avalon_io_agent (
		.clk                     (clk_sys_clk_clk),                                                    //       clk.clk
		.reset                   (ao486_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.av_address              (ao486_avalon_io_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (ao486_avalon_io_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (ao486_avalon_io_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (ao486_avalon_io_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (ao486_avalon_io_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (ao486_avalon_io_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (ao486_avalon_io_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (ao486_avalon_io_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (ao486_avalon_io_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (ao486_avalon_io_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (ao486_avalon_io_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (ao486_avalon_io_agent_cp_data),                                      //          .data
		.cp_startofpacket        (ao486_avalon_io_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (ao486_avalon_io_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (ao486_avalon_io_agent_cp_ready),                                     //          .ready
		.rp_valid                (ao486_avalon_io_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (ao486_avalon_io_limiter_rsp_src_data),                               //          .data
		.rp_channel              (ao486_avalon_io_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (ao486_avalon_io_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (ao486_avalon_io_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (ao486_avalon_io_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_jtag_debug_module_agent (
		.clk                     (clk_sys_clk_clk),                                          //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                      //                .channel
		.rf_sink_ready           (nios2_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponserequest (),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                          //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_for_nios2_s1_agent (
		.clk                     (clk_sys_clk_clk),                                      //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (onchip_for_nios2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_for_nios2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_for_nios2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_for_nios2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_for_nios2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_for_nios2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_for_nios2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_for_nios2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_for_nios2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_for_nios2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_for_nios2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_for_nios2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_for_nios2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_for_nios2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_for_nios2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_for_nios2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_for_nios2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_for_nios2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_for_nios2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_for_nios2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_for_nios2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_for_nios2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_for_nios2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_for_nios2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_for_nios2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_for_nios2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_for_nios2_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_for_nios2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_for_nios2_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_for_nios2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_for_nios2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_for_nios2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_for_nios2_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                      //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (onchip_for_nios2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_for_nios2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_for_nios2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_for_nios2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_for_nios2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_for_nios2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_for_nios2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_for_nios2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_for_nios2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_for_nios2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_bus_ctrl_agent (
		.clk                     (clk_sys_clk_clk),                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pc_bus_ctrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pc_bus_ctrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pc_bus_ctrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pc_bus_ctrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pc_bus_ctrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (pc_bus_ctrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pc_bus_ctrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pc_bus_ctrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (pc_bus_ctrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pc_bus_ctrl_agent_m0_writedata),               //                .writedata
		.m0_write                (pc_bus_ctrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (pc_bus_ctrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pc_bus_ctrl_agent_rp_ready),                   //                .ready
		.rp_valid                (pc_bus_ctrl_agent_rp_valid),                   //                .valid
		.rp_data                 (pc_bus_ctrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (pc_bus_ctrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                      //                .channel
		.rf_sink_ready           (pc_bus_ctrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pc_bus_ctrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pc_bus_ctrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pc_bus_ctrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pc_bus_ctrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pc_bus_ctrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pc_bus_ctrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pc_bus_ctrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pc_bus_ctrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pc_bus_ctrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pc_bus_ctrl_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pc_bus_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pc_bus_ctrl_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pc_bus_ctrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_bus_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pc_bus_ctrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_bus_ctrl_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                              //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pc_bus_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (pc_bus_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_bus_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_bus_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_bus_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_bus_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_bus_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_bus_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_bus_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_bus_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_sys_agent (
		.clk                     (clk_vga_clk_clk),                            //             clk.clk
		.reset                   (vga_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_sys_agent_m0_address),                   //              m0.address
		.m0_burstcount           (vga_sys_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (vga_sys_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (vga_sys_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (vga_sys_agent_m0_lock),                      //                .lock
		.m0_readdata             (vga_sys_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (vga_sys_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (vga_sys_agent_m0_read),                      //                .read
		.m0_waitrequest          (vga_sys_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (vga_sys_agent_m0_writedata),                 //                .writedata
		.m0_write                (vga_sys_agent_m0_write),                     //                .write
		.rp_endofpacket          (vga_sys_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (vga_sys_agent_rp_ready),                     //                .ready
		.rp_valid                (vga_sys_agent_rp_valid),                     //                .valid
		.rp_data                 (vga_sys_agent_rp_data),                      //                .data
		.rp_startofpacket        (vga_sys_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                    //                .channel
		.rf_sink_ready           (vga_sys_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (vga_sys_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (vga_sys_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (vga_sys_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (vga_sys_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (vga_sys_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (vga_sys_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (vga_sys_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (vga_sys_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (vga_sys_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (vga_sys_agent_rdata_fifo_out_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_sys_agent_rdata_fifo_out_valid),         //                .valid
		.rdata_fifo_sink_data    (vga_sys_agent_rdata_fifo_out_data),          //                .data
		.rdata_fifo_src_ready    (vga_sys_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_sys_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (vga_sys_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_sys_agent_rsp_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_sys_agent_rf_source_data),               //        in.data
		.in_valid          (vga_sys_agent_rf_source_valid),              //          .valid
		.in_ready          (vga_sys_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (vga_sys_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (vga_sys_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (vga_sys_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (vga_sys_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (vga_sys_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (vga_sys_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (vga_sys_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_sys_agent_rdata_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_sys_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (vga_sys_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (vga_sys_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (vga_sys_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (vga_sys_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (vga_sys_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sound_mgmt_agent (
		.clk                     (clk_sys_clk_clk),                             //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sound_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sound_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sound_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sound_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sound_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (sound_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sound_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sound_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (sound_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sound_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (sound_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (sound_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sound_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (sound_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (sound_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (sound_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_004_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                     //                .channel
		.rf_sink_ready           (sound_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sound_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sound_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sound_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sound_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sound_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sound_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sound_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sound_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sound_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sound_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sound_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sound_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sound_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sound_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_mgmt_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                             //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sound_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (sound_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (sound_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sound_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sound_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sound_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sound_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sound_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sound_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sound_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rtc_mgmt_agent (
		.clk                     (clk_sys_clk_clk),                           //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rtc_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rtc_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rtc_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rtc_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rtc_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (rtc_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rtc_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rtc_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (rtc_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rtc_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (rtc_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (rtc_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rtc_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (rtc_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (rtc_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (rtc_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                   //                .channel
		.rf_sink_ready           (rtc_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rtc_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rtc_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rtc_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rtc_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rtc_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rtc_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rtc_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rtc_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rtc_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (rtc_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rtc_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (rtc_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (rtc_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rtc_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rtc_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponserequest (),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rtc_mgmt_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rtc_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (rtc_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (rtc_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rtc_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rtc_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rtc_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rtc_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rtc_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rtc_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rtc_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pit_mgmt_agent (
		.clk                     (clk_sys_clk_clk),                           //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pit_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pit_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pit_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pit_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pit_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (pit_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pit_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pit_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (pit_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pit_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (pit_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (pit_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pit_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (pit_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (pit_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (pit_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_006_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                   //                .channel
		.rf_sink_ready           (pit_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pit_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pit_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pit_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pit_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pit_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pit_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pit_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pit_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pit_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pit_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pit_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pit_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pit_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pit_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pit_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponserequest (),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pit_mgmt_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pit_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (pit_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (pit_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pit_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pit_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pit_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pit_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pit_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pit_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pit_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd_mgmt_agent (
		.clk                     (clk_sys_clk_clk),                           //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hdd_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hdd_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hdd_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hdd_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (hdd_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hdd_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hdd_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (hdd_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hdd_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (hdd_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (hdd_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hdd_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (hdd_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (hdd_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (hdd_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_007_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                   //                .channel
		.rf_sink_ready           (hdd_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hdd_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hdd_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hdd_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hdd_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hdd_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hdd_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hdd_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hdd_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hdd_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hdd_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hdd_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hdd_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hdd_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hdd_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponserequest (),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd_mgmt_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (hdd_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (hdd_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hdd_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hdd_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hdd_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hdd_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hdd_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hdd_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hdd_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) floppy_mgmt_agent (
		.clk                     (clk_sys_clk_clk),                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (floppy_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (floppy_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (floppy_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (floppy_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (floppy_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (floppy_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (floppy_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (floppy_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (floppy_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (floppy_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (floppy_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (floppy_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (floppy_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (floppy_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (floppy_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (floppy_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_008_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                      //                .channel
		.rf_sink_ready           (floppy_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (floppy_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (floppy_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (floppy_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (floppy_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (floppy_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (floppy_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (floppy_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (floppy_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (floppy_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (floppy_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (floppy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (floppy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (floppy_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (floppy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy_mgmt_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                              //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (floppy_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (floppy_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (floppy_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (floppy_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (floppy_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (floppy_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (floppy_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (floppy_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (floppy_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (floppy_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_input_s1_agent (
		.clk                     (clk_sys_clk_clk),                               //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pio_input_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_input_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_input_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_input_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_input_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_input_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_input_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_input_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_input_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_input_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_input_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_input_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_input_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_input_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_input_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_input_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                       //                .channel
		.rf_sink_ready           (pio_input_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_input_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_input_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_input_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_input_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_input_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_input_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_input_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_input_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_input_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_input_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_input_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_input_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_input_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_input_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_input_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_input_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                               //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pio_input_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_input_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_input_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_input_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_input_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_input_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_input_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_input_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_input_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_input_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_sys_clk_clk),                                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                              //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_output_s1_agent (
		.clk                     (clk_sys_clk_clk),                                //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pio_output_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_output_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_output_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_output_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_output_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_output_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_output_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_output_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_output_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_output_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_output_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_output_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_output_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_output_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_output_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_output_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_011_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                        //                .channel
		.rf_sink_ready           (pio_output_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_output_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_output_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_output_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_output_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_output_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_output_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_output_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_output_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_output_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_output_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_output_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_output_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_output_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_output_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_output_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_output_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_output_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_output_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_output_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_output_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_output_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_output_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_output_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_output_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_output_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_output_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (clk_sys_clk_clk),                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) driver_sd_avalon_slave_0_agent (
		.clk                     (clk_sys_clk_clk),                                           //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (driver_sd_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (driver_sd_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (driver_sd_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (driver_sd_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (driver_sd_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (driver_sd_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (driver_sd_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (driver_sd_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (driver_sd_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (driver_sd_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (driver_sd_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (driver_sd_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (driver_sd_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (driver_sd_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (driver_sd_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (driver_sd_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                   //                .channel
		.rf_sink_ready           (driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (driver_sd_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (driver_sd_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (driver_sd_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (driver_sd_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (driver_sd_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (driver_sd_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (driver_sd_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (driver_sd_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) driver_sd_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (driver_sd_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (driver_sd_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (driver_sd_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (driver_sd_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (driver_sd_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (driver_sd_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) floppy_sd_slave_agent (
		.clk                     (clk_sys_clk_clk),                                     //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (floppy_sd_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (floppy_sd_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (floppy_sd_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (floppy_sd_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (floppy_sd_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (floppy_sd_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (floppy_sd_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (floppy_sd_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (floppy_sd_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (floppy_sd_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (floppy_sd_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (floppy_sd_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (floppy_sd_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (floppy_sd_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (floppy_sd_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (floppy_sd_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (floppy_sd_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (floppy_sd_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (floppy_sd_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (floppy_sd_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (floppy_sd_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (floppy_sd_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (floppy_sd_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (floppy_sd_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (floppy_sd_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (floppy_sd_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (floppy_sd_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (floppy_sd_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (floppy_sd_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (floppy_sd_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (floppy_sd_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (floppy_sd_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (floppy_sd_slave_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (floppy_sd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (floppy_sd_slave_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (floppy_sd_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy_sd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (floppy_sd_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy_sd_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                  //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (floppy_sd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (floppy_sd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (floppy_sd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (floppy_sd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (floppy_sd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (floppy_sd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (floppy_sd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (floppy_sd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (floppy_sd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (floppy_sd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd_sd_slave_agent (
		.clk                     (clk_sys_clk_clk),                               //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (hdd_sd_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hdd_sd_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hdd_sd_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hdd_sd_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hdd_sd_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hdd_sd_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hdd_sd_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hdd_sd_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hdd_sd_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hdd_sd_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hdd_sd_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hdd_sd_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hdd_sd_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hdd_sd_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hdd_sd_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hdd_sd_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_015_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                       //                .channel
		.rf_sink_ready           (hdd_sd_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hdd_sd_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hdd_sd_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hdd_sd_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hdd_sd_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hdd_sd_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hdd_sd_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hdd_sd_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hdd_sd_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hdd_sd_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hdd_sd_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hdd_sd_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hdd_sd_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hdd_sd_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd_sd_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hdd_sd_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd_sd_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                               //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (hdd_sd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hdd_sd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hdd_sd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hdd_sd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hdd_sd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hdd_sd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hdd_sd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hdd_sd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hdd_sd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hdd_sd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_dma_slave_agent (
		.clk                     (clk_sys_clk_clk),                                  //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (pc_dma_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pc_dma_slave_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pc_dma_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pc_dma_slave_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pc_dma_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                               //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pc_dma_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_dma_page_agent (
		.clk                     (clk_sys_clk_clk),                                 //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (pc_dma_page_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_page_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_page_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_page_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_page_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_page_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_page_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_page_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_page_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_page_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_page_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_page_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_page_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_page_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_page_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_page_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_page_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_page_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_page_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_page_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_page_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_page_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_page_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_page_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_page_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_page_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_page_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_page_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_page_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_page_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_page_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_page_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pc_dma_page_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pc_dma_page_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pc_dma_page_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pc_dma_page_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_page_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_page_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_page_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                              //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pc_dma_page_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_page_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_page_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_page_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_page_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_page_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_page_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_page_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_page_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_page_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_dma_master_agent (
		.clk                     (clk_sys_clk_clk),                                   //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pc_dma_master_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_master_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_master_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_master_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_master_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_master_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_master_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_master_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_master_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_master_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_master_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_master_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_master_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_master_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_master_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_master_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_master_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_master_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_master_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_master_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_master_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_master_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_master_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_master_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_master_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_master_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_master_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_master_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_master_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_master_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_master_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_master_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pc_dma_master_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pc_dma_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pc_dma_master_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pc_dma_master_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_master_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_master_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                                //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pc_dma_master_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_master_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_master_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_master_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_master_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_master_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_master_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_master_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_master_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_master_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_io_b_agent (
		.clk                     (clk_vga_clk_clk),                              //             clk.clk
		.reset                   (vga_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (vga_io_b_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_b_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_b_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_b_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_b_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_b_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_b_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_b_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_b_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_b_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_b_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_b_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_b_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_b_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_b_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_b_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_b_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_b_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_b_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_b_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_b_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_b_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_b_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_b_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_b_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_b_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_b_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_b_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_b_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_b_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_b_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_b_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (vga_io_b_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_io_b_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (vga_io_b_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (vga_io_b_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_b_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_b_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_b_agent_rsp_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_b_agent_rf_source_data),              //        in.data
		.in_valid          (vga_io_b_agent_rf_source_valid),             //          .valid
		.in_ready          (vga_io_b_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (vga_io_b_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (vga_io_b_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (vga_io_b_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (vga_io_b_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (vga_io_b_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (vga_io_b_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (vga_io_b_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_b_agent_rdata_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_b_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (vga_io_b_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (vga_io_b_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (vga_io_b_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (vga_io_b_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (vga_io_b_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_io_c_agent (
		.clk                     (clk_vga_clk_clk),                              //             clk.clk
		.reset                   (vga_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (vga_io_c_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_c_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_c_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_c_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_c_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_c_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_c_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_c_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_c_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_c_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_c_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_c_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_c_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_c_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_c_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_c_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_c_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_c_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_c_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_c_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_c_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_c_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_c_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_c_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_c_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_c_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_c_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_c_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_c_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_c_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_c_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_c_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (vga_io_c_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_io_c_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (vga_io_c_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (vga_io_c_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_c_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_c_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_c_agent_rsp_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_c_agent_rf_source_data),              //        in.data
		.in_valid          (vga_io_c_agent_rf_source_valid),             //          .valid
		.in_ready          (vga_io_c_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (vga_io_c_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (vga_io_c_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (vga_io_c_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (vga_io_c_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (vga_io_c_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (vga_io_c_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (vga_io_c_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_c_agent_rdata_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_c_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (vga_io_c_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (vga_io_c_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (vga_io_c_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (vga_io_c_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (vga_io_c_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_io_d_agent (
		.clk                     (clk_vga_clk_clk),                              //             clk.clk
		.reset                   (vga_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (vga_io_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_d_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_d_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_d_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_d_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_d_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_d_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_d_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_d_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (vga_io_d_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_io_d_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (vga_io_d_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (vga_io_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_d_agent_rsp_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_d_agent_rf_source_data),              //        in.data
		.in_valid          (vga_io_d_agent_rf_source_valid),             //          .valid
		.in_ready          (vga_io_d_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (vga_io_d_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (vga_io_d_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (vga_io_d_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (vga_io_d_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (vga_io_d_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (vga_io_d_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (vga_io_d_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_d_agent_rdata_fifo (
		.clk               (clk_vga_clk_clk),                            //       clk.clk
		.reset             (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_d_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (vga_io_d_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (vga_io_d_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (vga_io_d_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (vga_io_d_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (vga_io_d_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sound_io_agent (
		.clk                     (clk_sys_clk_clk),                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sound_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_io_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_io_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sound_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sound_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sound_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sound_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sound_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sound_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sound_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sound_io_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sound_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (sound_io_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (sound_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_io_agent_rf_source_data),             //        in.data
		.in_valid          (sound_io_agent_rf_source_valid),            //          .valid
		.in_ready          (sound_io_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sound_io_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sound_io_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sound_io_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sound_io_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sound_io_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sound_io_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sound_io_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sound_fm_agent (
		.clk                     (clk_sys_clk_clk),                              //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sound_fm_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_fm_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_fm_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_fm_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_fm_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_fm_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_fm_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_fm_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_fm_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_fm_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_fm_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_fm_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_fm_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_fm_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_fm_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_fm_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sound_fm_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sound_fm_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sound_fm_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sound_fm_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sound_fm_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sound_fm_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sound_fm_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_fm_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_fm_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_fm_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_fm_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_fm_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_fm_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_fm_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_fm_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_fm_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sound_fm_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sound_fm_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (sound_fm_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (sound_fm_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_fm_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_fm_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_fm_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_fm_agent_rf_source_data),             //        in.data
		.in_valid          (sound_fm_agent_rf_source_valid),            //          .valid
		.in_ready          (sound_fm_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sound_fm_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sound_fm_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sound_fm_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sound_fm_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sound_fm_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sound_fm_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sound_fm_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rtc_io_agent (
		.clk                     (clk_sys_clk_clk),                            //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (rtc_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (rtc_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (rtc_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (rtc_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (rtc_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (rtc_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (rtc_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (rtc_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (rtc_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (rtc_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (rtc_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (rtc_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (rtc_io_agent_rp_ready),                      //                .ready
		.rp_valid                (rtc_io_agent_rp_valid),                      //                .valid
		.rp_data                 (rtc_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (rtc_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (rtc_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (rtc_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (rtc_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (rtc_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (rtc_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (rtc_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (rtc_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (rtc_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (rtc_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (rtc_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (rtc_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (rtc_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (rtc_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (rtc_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (rtc_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (rtc_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (rtc_io_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rtc_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (rtc_io_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (rtc_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rtc_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (rtc_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rtc_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rtc_io_agent_rf_source_data),               //        in.data
		.in_valid          (rtc_io_agent_rf_source_valid),              //          .valid
		.in_ready          (rtc_io_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (rtc_io_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (rtc_io_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (rtc_io_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (rtc_io_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (rtc_io_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (rtc_io_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (rtc_io_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pit_io_agent (
		.clk                     (clk_sys_clk_clk),                            //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pit_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pit_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pit_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pit_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pit_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (pit_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pit_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pit_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (pit_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pit_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (pit_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (pit_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pit_io_agent_rp_ready),                      //                .ready
		.rp_valid                (pit_io_agent_rp_valid),                      //                .valid
		.rp_data                 (pit_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (pit_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pit_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pit_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pit_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pit_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pit_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pit_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pit_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pit_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pit_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pit_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pit_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pit_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pit_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pit_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pit_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pit_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pit_io_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pit_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pit_io_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pit_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pit_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pit_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pit_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pit_io_agent_rf_source_data),               //        in.data
		.in_valid          (pit_io_agent_rf_source_valid),              //          .valid
		.in_ready          (pit_io_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pit_io_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pit_io_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pit_io_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pit_io_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pit_io_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pit_io_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pit_io_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pic_master_agent (
		.clk                     (clk_sys_clk_clk),                                //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pic_master_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pic_master_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pic_master_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pic_master_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pic_master_agent_m0_lock),                       //                .lock
		.m0_readdata             (pic_master_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pic_master_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pic_master_agent_m0_read),                       //                .read
		.m0_waitrequest          (pic_master_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pic_master_agent_m0_writedata),                  //                .writedata
		.m0_write                (pic_master_agent_m0_write),                      //                .write
		.rp_endofpacket          (pic_master_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pic_master_agent_rp_ready),                      //                .ready
		.rp_valid                (pic_master_agent_rp_valid),                      //                .valid
		.rp_data                 (pic_master_agent_rp_data),                       //                .data
		.rp_startofpacket        (pic_master_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pic_master_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pic_master_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pic_master_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pic_master_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pic_master_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pic_master_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pic_master_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pic_master_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pic_master_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pic_master_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pic_master_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pic_master_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pic_master_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pic_master_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pic_master_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pic_master_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pic_master_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pic_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pic_master_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pic_master_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pic_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pic_master_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_master_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                             //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pic_master_agent_rf_source_data),             //        in.data
		.in_valid          (pic_master_agent_rf_source_valid),            //          .valid
		.in_ready          (pic_master_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pic_master_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pic_master_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pic_master_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pic_master_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pic_master_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pic_master_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pic_master_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pic_slave_agent (
		.clk                     (clk_sys_clk_clk),                               //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pic_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pic_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pic_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pic_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pic_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pic_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pic_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pic_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pic_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pic_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pic_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pic_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pic_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pic_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pic_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pic_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pic_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pic_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pic_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pic_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pic_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pic_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pic_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pic_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pic_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pic_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pic_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pic_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pic_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pic_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pic_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pic_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (pic_slave_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pic_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (pic_slave_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (pic_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pic_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pic_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_slave_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                            //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pic_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pic_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pic_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pic_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pic_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pic_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pic_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pic_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pic_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pic_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd_io_agent (
		.clk                     (clk_sys_clk_clk),                           //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd_io_agent_m0_address),                   //              m0.address
		.m0_burstcount           (hdd_io_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (hdd_io_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (hdd_io_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (hdd_io_agent_m0_lock),                      //                .lock
		.m0_readdata             (hdd_io_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (hdd_io_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (hdd_io_agent_m0_read),                      //                .read
		.m0_waitrequest          (hdd_io_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (hdd_io_agent_m0_writedata),                 //                .writedata
		.m0_write                (hdd_io_agent_m0_write),                     //                .write
		.rp_endofpacket          (hdd_io_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (hdd_io_agent_rp_ready),                     //                .ready
		.rp_valid                (hdd_io_agent_rp_valid),                     //                .valid
		.rp_data                 (hdd_io_agent_rp_data),                      //                .data
		.rp_startofpacket        (hdd_io_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_028_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                   //                .channel
		.rf_sink_ready           (hdd_io_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (hdd_io_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (hdd_io_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (hdd_io_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (hdd_io_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (hdd_io_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (hdd_io_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (hdd_io_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (hdd_io_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (hdd_io_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (hdd_io_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hdd_io_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (hdd_io_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (hdd_io_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd_io_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (hdd_io_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponserequest (),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd_io_agent_rf_source_data),               //        in.data
		.in_valid          (hdd_io_agent_rf_source_valid),              //          .valid
		.in_ready          (hdd_io_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (hdd_io_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (hdd_io_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (hdd_io_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (hdd_io_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (hdd_io_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (hdd_io_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (hdd_io_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) floppy_io_agent (
		.clk                     (clk_sys_clk_clk),                               //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (floppy_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (floppy_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (floppy_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (floppy_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (floppy_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (floppy_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (floppy_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (floppy_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (floppy_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (floppy_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (floppy_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (floppy_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (floppy_io_agent_rp_ready),                      //                .ready
		.rp_valid                (floppy_io_agent_rp_valid),                      //                .valid
		.rp_data                 (floppy_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (floppy_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (floppy_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (floppy_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (floppy_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (floppy_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (floppy_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (floppy_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (floppy_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (floppy_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (floppy_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (floppy_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (floppy_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (floppy_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (floppy_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (floppy_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (floppy_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (floppy_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (floppy_io_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (floppy_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (floppy_io_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (floppy_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (floppy_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                            //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (floppy_io_agent_rf_source_data),             //        in.data
		.in_valid          (floppy_io_agent_rf_source_valid),            //          .valid
		.in_ready          (floppy_io_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (floppy_io_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (floppy_io_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (floppy_io_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (floppy_io_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (floppy_io_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (floppy_io_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (floppy_io_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ps2_io_agent (
		.clk                     (clk_sys_clk_clk),                            //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ps2_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ps2_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ps2_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ps2_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ps2_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (ps2_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ps2_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ps2_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (ps2_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ps2_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (ps2_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (ps2_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ps2_io_agent_rp_ready),                      //                .ready
		.rp_valid                (ps2_io_agent_rp_valid),                      //                .valid
		.rp_data                 (ps2_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (ps2_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ps2_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ps2_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ps2_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ps2_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ps2_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ps2_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ps2_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ps2_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ps2_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ps2_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ps2_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ps2_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ps2_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ps2_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ps2_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ps2_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (ps2_io_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ps2_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (ps2_io_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (ps2_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ps2_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_io_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                           //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_io_agent_rf_source_data),               //        in.data
		.in_valid          (ps2_io_agent_rf_source_valid),              //          .valid
		.in_ready          (ps2_io_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (ps2_io_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (ps2_io_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (ps2_io_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (ps2_io_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (ps2_io_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (ps2_io_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (ps2_io_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (62),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_ORI_BURST_SIZE_H      (86),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ps2_sysctl_agent (
		.clk                     (clk_sys_clk_clk),                                //             clk.clk
		.reset                   (nios2_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (ps2_sysctl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ps2_sysctl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ps2_sysctl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ps2_sysctl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ps2_sysctl_agent_m0_lock),                       //                .lock
		.m0_readdata             (ps2_sysctl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ps2_sysctl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ps2_sysctl_agent_m0_read),                       //                .read
		.m0_waitrequest          (ps2_sysctl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ps2_sysctl_agent_m0_writedata),                  //                .writedata
		.m0_write                (ps2_sysctl_agent_m0_write),                      //                .write
		.rp_endofpacket          (ps2_sysctl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ps2_sysctl_agent_rp_ready),                      //                .ready
		.rp_valid                (ps2_sysctl_agent_rp_valid),                      //                .valid
		.rp_data                 (ps2_sysctl_agent_rp_data),                       //                .data
		.rp_startofpacket        (ps2_sysctl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ps2_sysctl_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ps2_sysctl_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ps2_sysctl_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ps2_sysctl_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ps2_sysctl_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ps2_sysctl_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ps2_sysctl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ps2_sysctl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ps2_sysctl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ps2_sysctl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ps2_sysctl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ps2_sysctl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ps2_sysctl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ps2_sysctl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ps2_sysctl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ps2_sysctl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (ps2_sysctl_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ps2_sysctl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (ps2_sysctl_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (ps2_sysctl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_sysctl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ps2_sysctl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_sysctl_agent_rsp_fifo (
		.clk               (clk_sys_clk_clk),                             //       clk.clk
		.reset             (nios2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ps2_sysctl_agent_rf_source_data),             //        in.data
		.in_valid          (ps2_sysctl_agent_rf_source_valid),            //          .valid
		.in_ready          (ps2_sysctl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ps2_sysctl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ps2_sysctl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ps2_sysctl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ps2_sysctl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ps2_sysctl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ps2_sysctl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ps2_sysctl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (nios2_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                          //       src.ready
		.src_valid          (router_src_valid),                          //          .valid
		.src_data           (router_src_data),                           //          .data
		.src_channel        (router_src_channel),                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (floppy_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (floppy_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (floppy_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (floppy_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (floppy_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                             //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_001_src_ready),                        //       src.ready
		.src_valid          (router_001_src_valid),                        //          .valid
		.src_data           (router_001_src_data),                         //          .data
		.src_channel        (router_001_src_channel),                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (hdd_avalon_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (hdd_avalon_master_agent_cp_valid),          //          .valid
		.sink_data          (hdd_avalon_master_agent_cp_data),           //          .data
		.sink_startofpacket (hdd_avalon_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (hdd_avalon_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                      //       src.ready
		.src_valid          (router_002_src_valid),                      //          .valid
		.src_data           (router_002_src_data),                       //          .data
		.src_channel        (router_002_src_channel),                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (pc_bus_avalon_sdram_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pc_bus_avalon_sdram_master_agent_cp_valid),         //          .valid
		.sink_data          (pc_bus_avalon_sdram_master_agent_cp_data),          //          .data
		.sink_startofpacket (pc_bus_avalon_sdram_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_bus_avalon_sdram_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                   //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (pc_dma_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pc_dma_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (pc_dma_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (pc_dma_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_dma_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                             //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_004_src_ready),                        //       src.ready
		.src_valid          (router_004_src_valid),                        //          .valid
		.src_data           (router_004_src_data),                         //          .data
		.src_channel        (router_004_src_channel),                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (driver_sd_avalon_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (driver_sd_avalon_master_0_agent_cp_valid),         //          .valid
		.sink_data          (driver_sd_avalon_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (driver_sd_avalon_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (driver_sd_avalon_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                  //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                 //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (ao486_avalon_io_agent_cp_ready),               //      sink.ready
		.sink_valid         (ao486_avalon_io_agent_cp_valid),               //          .valid
		.sink_data          (ao486_avalon_io_agent_cp_data),                //          .data
		.sink_startofpacket (ao486_avalon_io_agent_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ao486_avalon_io_agent_cp_endofpacket),         //          .endofpacket
		.clk                (clk_sys_clk_clk),                              //       clk.clk
		.reset              (ao486_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (nios2_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (onchip_for_nios2_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_for_nios2_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_for_nios2_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_for_nios2_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_for_nios2_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                            //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                       //       src.ready
		.src_valid          (router_009_src_valid),                       //          .valid
		.src_data           (router_009_src_data),                        //          .data
		.src_channel        (router_009_src_channel),                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (pc_bus_ctrl_agent_rp_ready),                //      sink.ready
		.sink_valid         (pc_bus_ctrl_agent_rp_valid),                //          .valid
		.sink_data          (pc_bus_ctrl_agent_rp_data),                 //          .data
		.sink_startofpacket (pc_bus_ctrl_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pc_bus_ctrl_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                      //       src.ready
		.src_valid          (router_010_src_valid),                      //          .valid
		.src_data           (router_010_src_data),                       //          .data
		.src_channel        (router_010_src_channel),                    //          .channel
		.src_startofpacket  (router_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (vga_sys_agent_rp_ready),                     //      sink.ready
		.sink_valid         (vga_sys_agent_rp_valid),                     //          .valid
		.sink_data          (vga_sys_agent_rp_data),                      //          .data
		.sink_startofpacket (vga_sys_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (vga_sys_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                       //       src.ready
		.src_valid          (router_011_src_valid),                       //          .valid
		.src_data           (router_011_src_data),                        //          .data
		.src_channel        (router_011_src_channel),                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_012 (
		.sink_ready         (sound_mgmt_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sound_mgmt_agent_rp_valid),                 //          .valid
		.sink_data          (sound_mgmt_agent_rp_data),                  //          .data
		.sink_startofpacket (sound_mgmt_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sound_mgmt_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                      //       src.ready
		.src_valid          (router_012_src_valid),                      //          .valid
		.src_data           (router_012_src_data),                       //          .data
		.src_channel        (router_012_src_channel),                    //          .channel
		.src_startofpacket  (router_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_013 (
		.sink_ready         (rtc_mgmt_agent_rp_ready),                   //      sink.ready
		.sink_valid         (rtc_mgmt_agent_rp_valid),                   //          .valid
		.sink_data          (rtc_mgmt_agent_rp_data),                    //          .data
		.sink_startofpacket (rtc_mgmt_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (rtc_mgmt_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                      //       src.ready
		.src_valid          (router_013_src_valid),                      //          .valid
		.src_data           (router_013_src_data),                       //          .data
		.src_channel        (router_013_src_channel),                    //          .channel
		.src_startofpacket  (router_013_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_014 (
		.sink_ready         (pit_mgmt_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pit_mgmt_agent_rp_valid),                   //          .valid
		.sink_data          (pit_mgmt_agent_rp_data),                    //          .data
		.sink_startofpacket (pit_mgmt_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pit_mgmt_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                      //       src.ready
		.src_valid          (router_014_src_valid),                      //          .valid
		.src_data           (router_014_src_data),                       //          .data
		.src_channel        (router_014_src_channel),                    //          .channel
		.src_startofpacket  (router_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_015 (
		.sink_ready         (hdd_mgmt_agent_rp_ready),                   //      sink.ready
		.sink_valid         (hdd_mgmt_agent_rp_valid),                   //          .valid
		.sink_data          (hdd_mgmt_agent_rp_data),                    //          .data
		.sink_startofpacket (hdd_mgmt_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (hdd_mgmt_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                      //       src.ready
		.src_valid          (router_015_src_valid),                      //          .valid
		.src_data           (router_015_src_data),                       //          .data
		.src_channel        (router_015_src_channel),                    //          .channel
		.src_startofpacket  (router_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_016 (
		.sink_ready         (floppy_mgmt_agent_rp_ready),                //      sink.ready
		.sink_valid         (floppy_mgmt_agent_rp_valid),                //          .valid
		.sink_data          (floppy_mgmt_agent_rp_data),                 //          .data
		.sink_startofpacket (floppy_mgmt_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (floppy_mgmt_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                      //       src.ready
		.src_valid          (router_016_src_valid),                      //          .valid
		.src_data           (router_016_src_data),                       //          .data
		.src_channel        (router_016_src_channel),                    //          .channel
		.src_startofpacket  (router_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_017 (
		.sink_ready         (pio_input_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (pio_input_s1_agent_rp_valid),               //          .valid
		.sink_data          (pio_input_s1_agent_rp_data),                //          .data
		.sink_startofpacket (pio_input_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pio_input_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                      //       src.ready
		.src_valid          (router_017_src_valid),                      //          .valid
		.src_data           (router_017_src_data),                       //          .data
		.src_channel        (router_017_src_channel),                    //          .channel
		.src_startofpacket  (router_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                    //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_018_src_ready),                               //       src.ready
		.src_valid          (router_018_src_valid),                               //          .valid
		.src_data           (router_018_src_data),                                //          .data
		.src_channel        (router_018_src_channel),                             //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_019 (
		.sink_ready         (pio_output_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_output_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_output_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_output_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_output_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                      //       src.ready
		.src_valid          (router_019_src_valid),                      //          .valid
		.src_data           (router_019_src_data),                       //          .data
		.src_channel        (router_019_src_channel),                    //          .channel
		.src_startofpacket  (router_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (sdram_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                   //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                      //       src.ready
		.src_valid          (router_020_src_valid),                      //          .valid
		.src_data           (router_020_src_data),                       //          .data
		.src_channel        (router_020_src_channel),                    //          .channel
		.src_startofpacket  (router_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (driver_sd_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (driver_sd_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (driver_sd_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (driver_sd_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (driver_sd_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_sys_clk_clk),                                 //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_021_src_ready),                            //       src.ready
		.src_valid          (router_021_src_valid),                            //          .valid
		.src_data           (router_021_src_data),                             //          .data
		.src_channel        (router_021_src_channel),                          //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                       //          .endofpacket
	);

	system_mm_interconnect_0_router_022 router_022 (
		.sink_ready         (floppy_sd_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (floppy_sd_slave_agent_rp_valid),            //          .valid
		.sink_data          (floppy_sd_slave_agent_rp_data),             //          .data
		.sink_startofpacket (floppy_sd_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (floppy_sd_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                      //       src.ready
		.src_valid          (router_022_src_valid),                      //          .valid
		.src_data           (router_022_src_data),                       //          .data
		.src_channel        (router_022_src_channel),                    //          .channel
		.src_startofpacket  (router_022_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_023 router_023 (
		.sink_ready         (hdd_sd_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (hdd_sd_slave_agent_rp_valid),               //          .valid
		.sink_data          (hdd_sd_slave_agent_rp_data),                //          .data
		.sink_startofpacket (hdd_sd_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (hdd_sd_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                      //       src.ready
		.src_valid          (router_023_src_valid),                      //          .valid
		.src_data           (router_023_src_data),                       //          .data
		.src_channel        (router_023_src_channel),                    //          .channel
		.src_startofpacket  (router_023_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_024 (
		.sink_ready         (pc_dma_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (pc_dma_slave_agent_rp_valid),               //          .valid
		.sink_data          (pc_dma_slave_agent_rp_data),                //          .data
		.sink_startofpacket (pc_dma_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pc_dma_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                      //       src.ready
		.src_valid          (router_024_src_valid),                      //          .valid
		.src_data           (router_024_src_data),                       //          .data
		.src_channel        (router_024_src_channel),                    //          .channel
		.src_startofpacket  (router_024_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_025 (
		.sink_ready         (pc_dma_page_agent_rp_ready),                //      sink.ready
		.sink_valid         (pc_dma_page_agent_rp_valid),                //          .valid
		.sink_data          (pc_dma_page_agent_rp_data),                 //          .data
		.sink_startofpacket (pc_dma_page_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pc_dma_page_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                      //       src.ready
		.src_valid          (router_025_src_valid),                      //          .valid
		.src_data           (router_025_src_data),                       //          .data
		.src_channel        (router_025_src_channel),                    //          .channel
		.src_startofpacket  (router_025_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_026 (
		.sink_ready         (pc_dma_master_agent_rp_ready),              //      sink.ready
		.sink_valid         (pc_dma_master_agent_rp_valid),              //          .valid
		.sink_data          (pc_dma_master_agent_rp_data),               //          .data
		.sink_startofpacket (pc_dma_master_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pc_dma_master_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                      //       src.ready
		.src_valid          (router_026_src_valid),                      //          .valid
		.src_data           (router_026_src_data),                       //          .data
		.src_channel        (router_026_src_channel),                    //          .channel
		.src_startofpacket  (router_026_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_027 router_027 (
		.sink_ready         (vga_io_b_agent_rp_ready),                    //      sink.ready
		.sink_valid         (vga_io_b_agent_rp_valid),                    //          .valid
		.sink_data          (vga_io_b_agent_rp_data),                     //          .data
		.sink_startofpacket (vga_io_b_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (vga_io_b_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                       //       src.ready
		.src_valid          (router_027_src_valid),                       //          .valid
		.src_data           (router_027_src_data),                        //          .data
		.src_channel        (router_027_src_channel),                     //          .channel
		.src_startofpacket  (router_027_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_router_027 router_028 (
		.sink_ready         (vga_io_c_agent_rp_ready),                    //      sink.ready
		.sink_valid         (vga_io_c_agent_rp_valid),                    //          .valid
		.sink_data          (vga_io_c_agent_rp_data),                     //          .data
		.sink_startofpacket (vga_io_c_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (vga_io_c_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                       //       src.ready
		.src_valid          (router_028_src_valid),                       //          .valid
		.src_data           (router_028_src_data),                        //          .data
		.src_channel        (router_028_src_channel),                     //          .channel
		.src_startofpacket  (router_028_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_router_027 router_029 (
		.sink_ready         (vga_io_d_agent_rp_ready),                    //      sink.ready
		.sink_valid         (vga_io_d_agent_rp_valid),                    //          .valid
		.sink_data          (vga_io_d_agent_rp_data),                     //          .data
		.sink_startofpacket (vga_io_d_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (vga_io_d_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                       //       src.ready
		.src_valid          (router_029_src_valid),                       //          .valid
		.src_data           (router_029_src_data),                        //          .data
		.src_channel        (router_029_src_channel),                     //          .channel
		.src_startofpacket  (router_029_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_030 (
		.sink_ready         (sound_io_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sound_io_agent_rp_valid),                   //          .valid
		.sink_data          (sound_io_agent_rp_data),                    //          .data
		.sink_startofpacket (sound_io_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sound_io_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                      //       src.ready
		.src_valid          (router_030_src_valid),                      //          .valid
		.src_data           (router_030_src_data),                       //          .data
		.src_channel        (router_030_src_channel),                    //          .channel
		.src_startofpacket  (router_030_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_031 (
		.sink_ready         (sound_fm_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sound_fm_agent_rp_valid),                   //          .valid
		.sink_data          (sound_fm_agent_rp_data),                    //          .data
		.sink_startofpacket (sound_fm_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sound_fm_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                      //       src.ready
		.src_valid          (router_031_src_valid),                      //          .valid
		.src_data           (router_031_src_data),                       //          .data
		.src_channel        (router_031_src_channel),                    //          .channel
		.src_startofpacket  (router_031_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_032 (
		.sink_ready         (rtc_io_agent_rp_ready),                     //      sink.ready
		.sink_valid         (rtc_io_agent_rp_valid),                     //          .valid
		.sink_data          (rtc_io_agent_rp_data),                      //          .data
		.sink_startofpacket (rtc_io_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (rtc_io_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                      //       src.ready
		.src_valid          (router_032_src_valid),                      //          .valid
		.src_data           (router_032_src_data),                       //          .data
		.src_channel        (router_032_src_channel),                    //          .channel
		.src_startofpacket  (router_032_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_033 (
		.sink_ready         (pit_io_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pit_io_agent_rp_valid),                     //          .valid
		.sink_data          (pit_io_agent_rp_data),                      //          .data
		.sink_startofpacket (pit_io_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pit_io_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                      //       src.ready
		.src_valid          (router_033_src_valid),                      //          .valid
		.src_data           (router_033_src_data),                       //          .data
		.src_channel        (router_033_src_channel),                    //          .channel
		.src_startofpacket  (router_033_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_034 (
		.sink_ready         (pic_master_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pic_master_agent_rp_valid),                 //          .valid
		.sink_data          (pic_master_agent_rp_data),                  //          .data
		.sink_startofpacket (pic_master_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pic_master_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                      //       src.ready
		.src_valid          (router_034_src_valid),                      //          .valid
		.src_data           (router_034_src_data),                       //          .data
		.src_channel        (router_034_src_channel),                    //          .channel
		.src_startofpacket  (router_034_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_035 (
		.sink_ready         (pic_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pic_slave_agent_rp_valid),                  //          .valid
		.sink_data          (pic_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (pic_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pic_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                      //       src.ready
		.src_valid          (router_035_src_valid),                      //          .valid
		.src_data           (router_035_src_data),                       //          .data
		.src_channel        (router_035_src_channel),                    //          .channel
		.src_startofpacket  (router_035_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_036 router_036 (
		.sink_ready         (hdd_io_agent_rp_ready),                     //      sink.ready
		.sink_valid         (hdd_io_agent_rp_valid),                     //          .valid
		.sink_data          (hdd_io_agent_rp_data),                      //          .data
		.sink_startofpacket (hdd_io_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hdd_io_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                      //       src.ready
		.src_valid          (router_036_src_valid),                      //          .valid
		.src_data           (router_036_src_data),                       //          .data
		.src_channel        (router_036_src_channel),                    //          .channel
		.src_startofpacket  (router_036_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_037 (
		.sink_ready         (floppy_io_agent_rp_ready),                  //      sink.ready
		.sink_valid         (floppy_io_agent_rp_valid),                  //          .valid
		.sink_data          (floppy_io_agent_rp_data),                   //          .data
		.sink_startofpacket (floppy_io_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (floppy_io_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                      //       src.ready
		.src_valid          (router_037_src_valid),                      //          .valid
		.src_data           (router_037_src_data),                       //          .data
		.src_channel        (router_037_src_channel),                    //          .channel
		.src_startofpacket  (router_037_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_038 (
		.sink_ready         (ps2_io_agent_rp_ready),                     //      sink.ready
		.sink_valid         (ps2_io_agent_rp_valid),                     //          .valid
		.sink_data          (ps2_io_agent_rp_data),                      //          .data
		.sink_startofpacket (ps2_io_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (ps2_io_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                      //       src.ready
		.src_valid          (router_038_src_valid),                      //          .valid
		.src_data           (router_038_src_data),                       //          .data
		.src_channel        (router_038_src_channel),                    //          .channel
		.src_startofpacket  (router_038_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_039 (
		.sink_ready         (ps2_sysctl_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ps2_sysctl_agent_rp_valid),                 //          .valid
		.sink_data          (ps2_sysctl_agent_rp_data),                  //          .data
		.sink_startofpacket (ps2_sysctl_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ps2_sysctl_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                      //       src.ready
		.src_valid          (router_039_src_valid),                      //          .valid
		.src_data           (router_039_src_data),                       //          .data
		.src_channel        (router_039_src_channel),                    //          .channel
		.src_startofpacket  (router_039_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.VALID_WIDTH               (32),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) driver_sd_avalon_master_0_limiter (
		.clk                    (clk_sys_clk_clk),                                         //       clk.clk
		.reset                  (nios2_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                    //          .valid
		.cmd_sink_data          (router_005_src_data),                                     //          .data
		.cmd_sink_channel       (router_005_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (driver_sd_avalon_master_0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (driver_sd_avalon_master_0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (driver_sd_avalon_master_0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (driver_sd_avalon_master_0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (driver_sd_avalon_master_0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (driver_sd_avalon_master_0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (driver_sd_avalon_master_0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (driver_sd_avalon_master_0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (driver_sd_avalon_master_0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (driver_sd_avalon_master_0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (driver_sd_avalon_master_0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (driver_sd_avalon_master_0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.VALID_WIDTH               (32),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) ao486_avalon_io_limiter (
		.clk                    (clk_sys_clk_clk),                               //       clk.clk
		.reset                  (ao486_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                          //          .valid
		.cmd_sink_data          (router_007_src_data),                           //          .data
		.cmd_sink_channel       (router_007_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (ao486_avalon_io_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (ao486_avalon_io_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (ao486_avalon_io_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (ao486_avalon_io_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (ao486_avalon_io_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (ao486_avalon_io_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (ao486_avalon_io_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (ao486_avalon_io_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (ao486_avalon_io_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (ao486_avalon_io_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (ao486_avalon_io_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (ao486_avalon_io_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_sys_clk_clk),                              //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                         //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                        //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) floppy_sd_slave_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                     //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                               //          .ready
		.source0_valid         (floppy_sd_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (floppy_sd_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (floppy_sd_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (floppy_sd_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (floppy_sd_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (floppy_sd_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_slave_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                  //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                             //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                            //          .ready
		.source0_valid         (pc_dma_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_page_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                 //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                            //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                           //          .ready
		.source0_valid         (pc_dma_page_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_page_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_page_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_page_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_page_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_page_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_master_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                   //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                              //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                             //          .ready
		.source0_valid         (pc_dma_master_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_master_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_master_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_master_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_master_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_master_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_b_burst_adapter (
		.clk                   (clk_vga_clk_clk),                              //       cr0.clk
		.reset                 (vga_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                         //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                        //          .ready
		.source0_valid         (vga_io_b_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_b_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_b_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_b_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_b_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_b_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_c_burst_adapter (
		.clk                   (clk_vga_clk_clk),                              //       cr0.clk
		.reset                 (vga_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                         //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                        //          .ready
		.source0_valid         (vga_io_c_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_c_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_c_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_c_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_c_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_c_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_d_burst_adapter (
		.clk                   (clk_vga_clk_clk),                              //       cr0.clk
		.reset                 (vga_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                         //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                        //          .ready
		.source0_valid         (vga_io_d_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_d_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_d_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_d_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_d_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_d_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sound_io_burst_adapter (
		.clk                   (clk_sys_clk_clk),                              //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                         //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                        //          .ready
		.source0_valid         (sound_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sound_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (sound_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sound_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sound_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sound_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sound_fm_burst_adapter (
		.clk                   (clk_sys_clk_clk),                              //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                         //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                        //          .ready
		.source0_valid         (sound_fm_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sound_fm_burst_adapter_source0_data),          //          .data
		.source0_channel       (sound_fm_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sound_fm_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sound_fm_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sound_fm_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) rtc_io_burst_adapter (
		.clk                   (clk_sys_clk_clk),                            //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                       //          .data
		.sink0_channel         (cmd_mux_024_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                      //          .ready
		.source0_valid         (rtc_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (rtc_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (rtc_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (rtc_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (rtc_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (rtc_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pit_io_burst_adapter (
		.clk                   (clk_sys_clk_clk),                            //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                       //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                      //          .ready
		.source0_valid         (pit_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pit_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (pit_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pit_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pit_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pit_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pic_master_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                           //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                          //          .ready
		.source0_valid         (pic_master_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pic_master_burst_adapter_source0_data),          //          .data
		.source0_channel       (pic_master_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pic_master_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pic_master_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pic_master_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pic_slave_burst_adapter (
		.clk                   (clk_sys_clk_clk),                               //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                          //          .data
		.sink0_channel         (cmd_mux_027_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                         //          .ready
		.source0_valid         (pic_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pic_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pic_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pic_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pic_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pic_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) floppy_io_burst_adapter (
		.clk                   (clk_sys_clk_clk),                               //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                          //          .data
		.sink0_channel         (cmd_mux_029_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                         //          .ready
		.source0_valid         (floppy_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (floppy_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (floppy_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (floppy_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (floppy_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (floppy_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ps2_io_burst_adapter (
		.clk                   (clk_sys_clk_clk),                            //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                       //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                      //          .ready
		.source0_valid         (ps2_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ps2_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (ps2_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ps2_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ps2_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ps2_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ps2_sysctl_burst_adapter (
		.clk                   (clk_sys_clk_clk),                                //       cr0.clk
		.reset                 (nios2_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_031_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_031_src_data),                           //          .data
		.sink0_channel         (cmd_mux_031_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_031_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_031_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_031_src_ready),                          //          .ready
		.source0_valid         (ps2_sysctl_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ps2_sysctl_burst_adapter_source0_data),          //          .data
		.source0_channel       (ps2_sysctl_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ps2_sysctl_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ps2_sysctl_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ps2_sysctl_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                          //      sink.ready
		.sink_channel        (router_src_channel),                        //          .channel
		.sink_data           (router_src_data),                           //          .data
		.sink_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                    //          .endofpacket
		.sink_valid          (router_src_valid),                          //          .valid
		.src0_ready          (cmd_demux_src0_ready),                      //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                      //          .valid
		.src0_data           (cmd_demux_src0_data),                       //          .data
		.src0_channel        (cmd_demux_src0_channel),                    //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                      //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                      //          .valid
		.src1_data           (cmd_demux_src1_data),                       //          .data
		.src1_channel        (cmd_demux_src1_channel),                    //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                      //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                      //          .valid
		.src2_data           (cmd_demux_src2_data),                       //          .data
		.src2_channel        (cmd_demux_src2_channel),                    //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                      //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                      //          .valid
		.src3_data           (cmd_demux_src3_data),                       //          .data
		.src3_channel        (cmd_demux_src3_channel),                    //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                      //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                      //          .valid
		.src4_data           (cmd_demux_src4_data),                       //          .data
		.src4_channel        (cmd_demux_src4_channel),                    //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),              //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                      //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                      //          .valid
		.src5_data           (cmd_demux_src5_data),                       //          .data
		.src5_channel        (cmd_demux_src5_channel),                    //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),              //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                      //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                      //          .valid
		.src6_data           (cmd_demux_src6_data),                       //          .data
		.src6_channel        (cmd_demux_src6_channel),                    //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),              //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                      //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                      //          .valid
		.src7_data           (cmd_demux_src7_data),                       //          .data
		.src7_channel        (cmd_demux_src7_channel),                    //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),              //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                      //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                      //          .valid
		.src8_data           (cmd_demux_src8_data),                       //          .data
		.src8_channel        (cmd_demux_src8_channel),                    //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),              //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                      //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                      //          .valid
		.src9_data           (cmd_demux_src9_data),                       //          .data
		.src9_channel        (cmd_demux_src9_channel),                    //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),              //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                     //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                     //          .valid
		.src10_data          (cmd_demux_src10_data),                      //          .data
		.src10_channel       (cmd_demux_src10_channel),                   //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),             //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),               //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                     //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                     //          .valid
		.src11_data          (cmd_demux_src11_data),                      //          .data
		.src11_channel       (cmd_demux_src11_channel),                   //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),             //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),               //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                     //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                     //          .valid
		.src12_data          (cmd_demux_src12_data),                      //          .data
		.src12_channel       (cmd_demux_src12_channel),                   //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),             //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),               //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                     //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                     //          .valid
		.src13_data          (cmd_demux_src13_data),                      //          .data
		.src13_channel       (cmd_demux_src13_channel),                   //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),             //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                      //      sink.ready
		.sink_channel       (router_001_src_channel),                    //          .channel
		.sink_data          (router_001_src_data),                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_001_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_001_src0_data),                   //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                      //      sink.ready
		.sink_channel       (router_002_src_channel),                    //          .channel
		.sink_data          (router_002_src_data),                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_002_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_002_src0_data),                   //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_003 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                      //      sink.ready
		.sink_channel       (router_003_src_channel),                    //          .channel
		.sink_data          (router_003_src_data),                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_003_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_003_src0_data),                   //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                      //      sink.ready
		.sink_channel       (router_004_src_channel),                    //          .channel
		.sink_data          (router_004_src_data),                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_004_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_004_src0_data),                   //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (clk_sys_clk_clk),                                         //        clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (driver_sd_avalon_master_0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (driver_sd_avalon_master_0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (driver_sd_avalon_master_0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (driver_sd_avalon_master_0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (driver_sd_avalon_master_0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (driver_sd_avalon_master_0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_005_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_005_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_005_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket)                           //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_006 cmd_demux_006 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                      //      sink.ready
		.sink_channel       (router_006_src_channel),                    //          .channel
		.sink_data          (router_006_src_data),                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_006_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_006_src0_data),                   //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),            //          .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                  //      src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                  //          .valid
		.src1_data          (cmd_demux_006_src1_data),                   //          .data
		.src1_channel       (cmd_demux_006_src1_channel),                //          .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_007 cmd_demux_007 (
		.clk                 (clk_sys_clk_clk),                               //        clk.clk
		.reset               (ao486_reset_sink_reset_bridge_in_reset_reset),  //  clk_reset.reset
		.sink_ready          (ao486_avalon_io_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (ao486_avalon_io_limiter_cmd_src_channel),       //           .channel
		.sink_data           (ao486_avalon_io_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (ao486_avalon_io_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (ao486_avalon_io_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (ao486_avalon_io_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_007_src0_ready),                      //       src0.ready
		.src0_valid          (cmd_demux_007_src0_valid),                      //           .valid
		.src0_data           (cmd_demux_007_src0_data),                       //           .data
		.src0_channel        (cmd_demux_007_src0_channel),                    //           .channel
		.src0_startofpacket  (cmd_demux_007_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket    (cmd_demux_007_src0_endofpacket),                //           .endofpacket
		.src1_ready          (cmd_demux_007_src1_ready),                      //       src1.ready
		.src1_valid          (cmd_demux_007_src1_valid),                      //           .valid
		.src1_data           (cmd_demux_007_src1_data),                       //           .data
		.src1_channel        (cmd_demux_007_src1_channel),                    //           .channel
		.src1_startofpacket  (cmd_demux_007_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket    (cmd_demux_007_src1_endofpacket),                //           .endofpacket
		.src2_ready          (cmd_demux_007_src2_ready),                      //       src2.ready
		.src2_valid          (cmd_demux_007_src2_valid),                      //           .valid
		.src2_data           (cmd_demux_007_src2_data),                       //           .data
		.src2_channel        (cmd_demux_007_src2_channel),                    //           .channel
		.src2_startofpacket  (cmd_demux_007_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket    (cmd_demux_007_src2_endofpacket),                //           .endofpacket
		.src3_ready          (cmd_demux_007_src3_ready),                      //       src3.ready
		.src3_valid          (cmd_demux_007_src3_valid),                      //           .valid
		.src3_data           (cmd_demux_007_src3_data),                       //           .data
		.src3_channel        (cmd_demux_007_src3_channel),                    //           .channel
		.src3_startofpacket  (cmd_demux_007_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket    (cmd_demux_007_src3_endofpacket),                //           .endofpacket
		.src4_ready          (cmd_demux_007_src4_ready),                      //       src4.ready
		.src4_valid          (cmd_demux_007_src4_valid),                      //           .valid
		.src4_data           (cmd_demux_007_src4_data),                       //           .data
		.src4_channel        (cmd_demux_007_src4_channel),                    //           .channel
		.src4_startofpacket  (cmd_demux_007_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket    (cmd_demux_007_src4_endofpacket),                //           .endofpacket
		.src5_ready          (cmd_demux_007_src5_ready),                      //       src5.ready
		.src5_valid          (cmd_demux_007_src5_valid),                      //           .valid
		.src5_data           (cmd_demux_007_src5_data),                       //           .data
		.src5_channel        (cmd_demux_007_src5_channel),                    //           .channel
		.src5_startofpacket  (cmd_demux_007_src5_startofpacket),              //           .startofpacket
		.src5_endofpacket    (cmd_demux_007_src5_endofpacket),                //           .endofpacket
		.src6_ready          (cmd_demux_007_src6_ready),                      //       src6.ready
		.src6_valid          (cmd_demux_007_src6_valid),                      //           .valid
		.src6_data           (cmd_demux_007_src6_data),                       //           .data
		.src6_channel        (cmd_demux_007_src6_channel),                    //           .channel
		.src6_startofpacket  (cmd_demux_007_src6_startofpacket),              //           .startofpacket
		.src6_endofpacket    (cmd_demux_007_src6_endofpacket),                //           .endofpacket
		.src7_ready          (cmd_demux_007_src7_ready),                      //       src7.ready
		.src7_valid          (cmd_demux_007_src7_valid),                      //           .valid
		.src7_data           (cmd_demux_007_src7_data),                       //           .data
		.src7_channel        (cmd_demux_007_src7_channel),                    //           .channel
		.src7_startofpacket  (cmd_demux_007_src7_startofpacket),              //           .startofpacket
		.src7_endofpacket    (cmd_demux_007_src7_endofpacket),                //           .endofpacket
		.src8_ready          (cmd_demux_007_src8_ready),                      //       src8.ready
		.src8_valid          (cmd_demux_007_src8_valid),                      //           .valid
		.src8_data           (cmd_demux_007_src8_data),                       //           .data
		.src8_channel        (cmd_demux_007_src8_channel),                    //           .channel
		.src8_startofpacket  (cmd_demux_007_src8_startofpacket),              //           .startofpacket
		.src8_endofpacket    (cmd_demux_007_src8_endofpacket),                //           .endofpacket
		.src9_ready          (cmd_demux_007_src9_ready),                      //       src9.ready
		.src9_valid          (cmd_demux_007_src9_valid),                      //           .valid
		.src9_data           (cmd_demux_007_src9_data),                       //           .data
		.src9_channel        (cmd_demux_007_src9_channel),                    //           .channel
		.src9_startofpacket  (cmd_demux_007_src9_startofpacket),              //           .startofpacket
		.src9_endofpacket    (cmd_demux_007_src9_endofpacket),                //           .endofpacket
		.src10_ready         (cmd_demux_007_src10_ready),                     //      src10.ready
		.src10_valid         (cmd_demux_007_src10_valid),                     //           .valid
		.src10_data          (cmd_demux_007_src10_data),                      //           .data
		.src10_channel       (cmd_demux_007_src10_channel),                   //           .channel
		.src10_startofpacket (cmd_demux_007_src10_startofpacket),             //           .startofpacket
		.src10_endofpacket   (cmd_demux_007_src10_endofpacket),               //           .endofpacket
		.src11_ready         (cmd_demux_007_src11_ready),                     //      src11.ready
		.src11_valid         (cmd_demux_007_src11_valid),                     //           .valid
		.src11_data          (cmd_demux_007_src11_data),                      //           .data
		.src11_channel       (cmd_demux_007_src11_channel),                   //           .channel
		.src11_startofpacket (cmd_demux_007_src11_startofpacket),             //           .startofpacket
		.src11_endofpacket   (cmd_demux_007_src11_endofpacket),               //           .endofpacket
		.src12_ready         (cmd_demux_007_src12_ready),                     //      src12.ready
		.src12_valid         (cmd_demux_007_src12_valid),                     //           .valid
		.src12_data          (cmd_demux_007_src12_data),                      //           .data
		.src12_channel       (cmd_demux_007_src12_channel),                   //           .channel
		.src12_startofpacket (cmd_demux_007_src12_startofpacket),             //           .startofpacket
		.src12_endofpacket   (cmd_demux_007_src12_endofpacket),               //           .endofpacket
		.src13_ready         (cmd_demux_007_src13_ready),                     //      src13.ready
		.src13_valid         (cmd_demux_007_src13_valid),                     //           .valid
		.src13_data          (cmd_demux_007_src13_data),                      //           .data
		.src13_channel       (cmd_demux_007_src13_channel),                   //           .channel
		.src13_startofpacket (cmd_demux_007_src13_startofpacket),             //           .startofpacket
		.src13_endofpacket   (cmd_demux_007_src13_endofpacket),               //           .endofpacket
		.src14_ready         (cmd_demux_007_src14_ready),                     //      src14.ready
		.src14_valid         (cmd_demux_007_src14_valid),                     //           .valid
		.src14_data          (cmd_demux_007_src14_data),                      //           .data
		.src14_channel       (cmd_demux_007_src14_channel),                   //           .channel
		.src14_startofpacket (cmd_demux_007_src14_startofpacket),             //           .startofpacket
		.src14_endofpacket   (cmd_demux_007_src14_endofpacket),               //           .endofpacket
		.src15_ready         (cmd_demux_007_src15_ready),                     //      src15.ready
		.src15_valid         (cmd_demux_007_src15_valid),                     //           .valid
		.src15_data          (cmd_demux_007_src15_data),                      //           .data
		.src15_channel       (cmd_demux_007_src15_channel),                   //           .channel
		.src15_startofpacket (cmd_demux_007_src15_startofpacket),             //           .startofpacket
		.src15_endofpacket   (cmd_demux_007_src15_endofpacket),               //           .endofpacket
		.src16_ready         (cmd_demux_007_src16_ready),                     //      src16.ready
		.src16_valid         (cmd_demux_007_src16_valid),                     //           .valid
		.src16_data          (cmd_demux_007_src16_data),                      //           .data
		.src16_channel       (cmd_demux_007_src16_channel),                   //           .channel
		.src16_startofpacket (cmd_demux_007_src16_startofpacket),             //           .startofpacket
		.src16_endofpacket   (cmd_demux_007_src16_endofpacket)                //           .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                         //          .valid
		.src_data            (cmd_mux_src_data),                          //          .data
		.src_channel         (cmd_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_006_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_006_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_006_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_006_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_006_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                     //          .valid
		.src_data            (cmd_mux_001_src_data),                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_005_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_005_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_005_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_005_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_005_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src0_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_006_src1_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_006_src1_valid),                  //          .valid
		.sink2_channel       (cmd_demux_006_src1_channel),                //          .channel
		.sink2_data          (cmd_demux_006_src1_data),                   //          .data
		.sink2_startofpacket (cmd_demux_006_src1_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_006_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                     //          .valid
		.src_data            (cmd_mux_002_src_data),                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                    //          .channel
		.sink0_data          (cmd_demux_src2_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_vga_clk_clk),                            //       clk.clk
		.reset               (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                      //          .valid
		.src_data            (cmd_mux_003_src_data),                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_out_ready),                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                          //          .valid
		.sink0_channel       (crosser_out_channel),                        //          .channel
		.sink0_data          (crosser_out_data),                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                     //          .valid
		.src_data            (cmd_mux_004_src_data),                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                     //          .valid
		.src_data            (cmd_mux_005_src_data),                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                    //          .channel
		.sink0_data          (cmd_demux_src5_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                     //          .valid
		.src_data            (cmd_mux_006_src_data),                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                    //          .channel
		.sink0_data          (cmd_demux_src6_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                     //          .valid
		.src_data            (cmd_mux_007_src_data),                      //          .data
		.src_channel         (cmd_mux_007_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                    //          .channel
		.sink0_data          (cmd_demux_src7_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                     //          .valid
		.src_data            (cmd_mux_008_src_data),                      //          .data
		.src_channel         (cmd_mux_008_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                    //          .channel
		.sink0_data          (cmd_demux_src8_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                     //          .valid
		.src_data            (cmd_mux_009_src_data),                      //          .data
		.src_channel         (cmd_mux_009_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                    //          .channel
		.sink0_data          (cmd_demux_src9_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                     //          .valid
		.src_data            (cmd_mux_010_src_data),                      //          .data
		.src_channel         (cmd_mux_010_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                   //          .channel
		.sink0_data          (cmd_demux_src10_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_007_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_007_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_007_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_007_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_007_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_007_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_011 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                     //          .valid
		.src_data            (cmd_mux_011_src_data),                      //          .data
		.src_channel         (cmd_mux_011_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                   //          .channel
		.sink0_data          (cmd_demux_src11_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_012 cmd_mux_012 (
		.clk                 (clk_sys_clk_clk),                                                      //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                //          .valid
		.src_data            (cmd_mux_012_src_data),                                                 //          .data
		.src_channel         (cmd_mux_012_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                                //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                                //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                              //          .channel
		.sink0_data          (cmd_demux_src12_data),                                                 //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                                          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                                             //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                                             //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                                           //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                                              //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),                                       //          .endofpacket
		.sink2_ready         (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (cmd_demux_005_src1_ready),                                             //     sink3.ready
		.sink3_valid         (cmd_demux_005_src1_valid),                                             //          .valid
		.sink3_channel       (cmd_demux_005_src1_channel),                                           //          .channel
		.sink3_data          (cmd_demux_005_src1_data),                                              //          .data
		.sink3_startofpacket (cmd_demux_005_src1_startofpacket),                                     //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src1_endofpacket)                                        //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                     //          .valid
		.src_data            (cmd_mux_013_src_data),                      //          .data
		.src_channel         (cmd_mux_013_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                   //          .channel
		.sink0_data          (cmd_demux_src13_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_014 (
		.clk                 (clk_sys_clk_clk),                                                                  //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                                            //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                                            //          .valid
		.src_data            (cmd_mux_014_src_data),                                                             //          .data
		.src_channel         (cmd_mux_014_src_channel),                                                          //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                                      //          .endofpacket
		.sink0_ready         (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_015 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                     //          .valid
		.src_data            (cmd_mux_015_src_data),                      //          .data
		.src_channel         (cmd_mux_015_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_005_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_005_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_005_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_005_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_005_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src3_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_016 (
		.clk                 (clk_sys_clk_clk),                                                     //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                               //          .valid
		.src_data            (cmd_mux_016_src_data),                                                //          .data
		.src_channel         (cmd_mux_016_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_017 (
		.clk                 (clk_sys_clk_clk),                                                    //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                              //          .valid
		.src_data            (cmd_mux_017_src_data),                                               //          .data
		.src_channel         (cmd_mux_017_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_018 (
		.clk                 (clk_sys_clk_clk),                                                      //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                                //          .valid
		.src_data            (cmd_mux_018_src_data),                                                 //          .data
		.src_channel         (cmd_mux_018_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_019 cmd_mux_019 (
		.clk                 (clk_vga_clk_clk),                            //       clk.clk
		.reset               (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                      //          .valid
		.src_data            (cmd_mux_019_src_data),                       //          .data
		.src_channel         (cmd_mux_019_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                      //          .valid
		.sink0_channel       (crosser_002_out_channel),                    //          .channel
		.sink0_data          (crosser_002_out_data),                       //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_019 cmd_mux_020 (
		.clk                 (clk_vga_clk_clk),                            //       clk.clk
		.reset               (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                      //          .valid
		.src_data            (cmd_mux_020_src_data),                       //          .data
		.src_channel         (cmd_mux_020_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                      //          .valid
		.sink0_channel       (crosser_003_out_channel),                    //          .channel
		.sink0_data          (crosser_003_out_data),                       //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_019 cmd_mux_021 (
		.clk                 (clk_vga_clk_clk),                            //       clk.clk
		.reset               (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                      //          .valid
		.src_data            (cmd_mux_021_src_data),                       //          .data
		.src_channel         (cmd_mux_021_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                      //          .valid
		.sink0_channel       (crosser_004_out_channel),                    //          .channel
		.sink0_data          (crosser_004_out_data),                       //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_022 (
		.clk                 (clk_sys_clk_clk),                                                 //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                           //          .valid
		.src_data            (cmd_mux_022_src_data),                                            //          .data
		.src_channel         (cmd_mux_022_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_023 (
		.clk                 (clk_sys_clk_clk),                                                 //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                           //          .valid
		.src_data            (cmd_mux_023_src_data),                                            //          .data
		.src_channel         (cmd_mux_023_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_024 (
		.clk                 (clk_sys_clk_clk),                                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                         //          .valid
		.src_data            (cmd_mux_024_src_data),                                          //          .data
		.src_channel         (cmd_mux_024_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_025 (
		.clk                 (clk_sys_clk_clk),                                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                         //          .valid
		.src_data            (cmd_mux_025_src_data),                                          //          .data
		.src_channel         (cmd_mux_025_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_026 (
		.clk                 (clk_sys_clk_clk),                                                   //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                             //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                             //          .valid
		.src_data            (cmd_mux_026_src_data),                                              //          .data
		.src_channel         (cmd_mux_026_src_channel),                                           //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_027 (
		.clk                 (clk_sys_clk_clk),                                                  //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                            //          .valid
		.src_data            (cmd_mux_027_src_data),                                             //          .data
		.src_channel         (cmd_mux_027_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_002 cmd_mux_028 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                     //          .valid
		.src_data            (cmd_mux_028_src_data),                      //          .data
		.src_channel         (cmd_mux_028_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_007_src13_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_007_src13_valid),                 //          .valid
		.sink0_channel       (cmd_demux_007_src13_channel),               //          .channel
		.sink0_data          (cmd_demux_007_src13_data),                  //          .data
		.sink0_startofpacket (cmd_demux_007_src13_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src13_endofpacket)            //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_029 (
		.clk                 (clk_sys_clk_clk),                                                  //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                            //          .valid
		.src_data            (cmd_mux_029_src_data),                                             //          .data
		.src_channel         (cmd_mux_029_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_030 (
		.clk                 (clk_sys_clk_clk),                                               //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                         //          .valid
		.src_data            (cmd_mux_030_src_data),                                          //          .data
		.src_channel         (cmd_mux_030_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_014 cmd_mux_031 (
		.clk                 (clk_sys_clk_clk),                                                   //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                                             //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                                             //          .valid
		.src_data            (cmd_mux_031_src_data),                                              //          .data
		.src_channel         (cmd_mux_031_src_channel),                                           //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_006 rsp_demux (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                      //      sink.ready
		.sink_channel       (router_008_src_channel),                    //          .channel
		.sink_data          (router_008_src_data),                       //          .data
		.sink_startofpacket (router_008_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_008_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_src0_data),                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_src1_data),                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                      //      sink.ready
		.sink_channel       (router_009_src_channel),                    //          .channel
		.sink_data          (router_009_src_data),                       //          .data
		.sink_startofpacket (router_009_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_009_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_001_src2_data),                   //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                      //      sink.ready
		.sink_channel       (router_010_src_channel),                    //          .channel
		.sink_data          (router_010_src_data),                       //          .data
		.sink_startofpacket (router_010_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_010_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)              //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_004 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                      //      sink.ready
		.sink_channel       (router_012_src_channel),                    //          .channel
		.sink_data          (router_012_src_data),                       //          .data
		.sink_startofpacket (router_012_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_012_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_005 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                      //      sink.ready
		.sink_channel       (router_013_src_channel),                    //          .channel
		.sink_data          (router_013_src_data),                       //          .data
		.sink_startofpacket (router_013_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_013_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_006 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                      //      sink.ready
		.sink_channel       (router_014_src_channel),                    //          .channel
		.sink_data          (router_014_src_data),                       //          .data
		.sink_startofpacket (router_014_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_014_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_007 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                      //      sink.ready
		.sink_channel       (router_015_src_channel),                    //          .channel
		.sink_data          (router_015_src_data),                       //          .data
		.sink_startofpacket (router_015_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_015_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_007_src0_data),                   //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_008 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                      //      sink.ready
		.sink_channel       (router_016_src_channel),                    //          .channel
		.sink_data          (router_016_src_data),                       //          .data
		.sink_startofpacket (router_016_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_016_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_008_src0_data),                   //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_009 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                      //      sink.ready
		.sink_channel       (router_017_src_channel),                    //          .channel
		.sink_data          (router_017_src_data),                       //          .data
		.sink_startofpacket (router_017_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_017_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_009_src0_data),                   //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_006 rsp_demux_010 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                      //      sink.ready
		.sink_channel       (router_018_src_channel),                    //          .channel
		.sink_data          (router_018_src_data),                       //          .data
		.sink_startofpacket (router_018_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_018_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_010_src0_data),                   //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_010_src1_data),                   //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_011 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                      //      sink.ready
		.sink_channel       (router_019_src_channel),                    //          .channel
		.sink_data          (router_019_src_data),                       //          .data
		.sink_startofpacket (router_019_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_019_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_011_src0_data),                   //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                      //      sink.ready
		.sink_channel       (router_020_src_channel),                    //          .channel
		.sink_data          (router_020_src_data),                       //          .data
		.sink_startofpacket (router_020_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_020_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_012_src0_data),                   //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_012_src1_data),                   //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_012_src2_data),                   //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket),            //          .endofpacket
		.src3_ready         (rsp_demux_012_src3_ready),                  //      src3.ready
		.src3_valid         (rsp_demux_012_src3_valid),                  //          .valid
		.src3_data          (rsp_demux_012_src3_data),                   //          .data
		.src3_channel       (rsp_demux_012_src3_channel),                //          .channel
		.src3_startofpacket (rsp_demux_012_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (rsp_demux_012_src3_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_013 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                      //      sink.ready
		.sink_channel       (router_021_src_channel),                    //          .channel
		.sink_data          (router_021_src_data),                       //          .data
		.sink_startofpacket (router_021_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_021_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_013_src0_data),                   //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_013_src1_data),                   //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_013_src2_data),                   //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_014 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                      //      sink.ready
		.sink_channel       (router_022_src_channel),                    //          .channel
		.sink_data          (router_022_src_data),                       //          .data
		.sink_startofpacket (router_022_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_022_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_014_src0_data),                   //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_015 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                      //      sink.ready
		.sink_channel       (router_023_src_channel),                    //          .channel
		.sink_data          (router_023_src_data),                       //          .data
		.sink_startofpacket (router_023_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_023_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_015_src0_data),                   //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_016 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                      //      sink.ready
		.sink_channel       (router_024_src_channel),                    //          .channel
		.sink_data          (router_024_src_data),                       //          .data
		.sink_startofpacket (router_024_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_024_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_016_src0_data),                   //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_017 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                      //      sink.ready
		.sink_channel       (router_025_src_channel),                    //          .channel
		.sink_data          (router_025_src_data),                       //          .data
		.sink_startofpacket (router_025_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_025_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_017_src0_data),                   //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_018 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                      //      sink.ready
		.sink_channel       (router_026_src_channel),                    //          .channel
		.sink_data          (router_026_src_data),                       //          .data
		.sink_startofpacket (router_026_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_026_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_018_src0_data),                   //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_019 rsp_demux_019 (
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                       //      sink.ready
		.sink_channel       (router_027_src_channel),                     //          .channel
		.sink_data          (router_027_src_data),                        //          .data
		.sink_startofpacket (router_027_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_027_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_019_src0_data),                    //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)              //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_019 rsp_demux_020 (
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                       //      sink.ready
		.sink_channel       (router_028_src_channel),                     //          .channel
		.sink_data          (router_028_src_data),                        //          .data
		.sink_startofpacket (router_028_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_028_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_020_src0_data),                    //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)              //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_019 rsp_demux_021 (
		.clk                (clk_vga_clk_clk),                            //       clk.clk
		.reset              (vga_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                       //      sink.ready
		.sink_channel       (router_029_src_channel),                     //          .channel
		.sink_data          (router_029_src_data),                        //          .data
		.sink_startofpacket (router_029_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_029_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_021_src0_data),                    //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)              //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_022 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                      //      sink.ready
		.sink_channel       (router_030_src_channel),                    //          .channel
		.sink_data          (router_030_src_data),                       //          .data
		.sink_startofpacket (router_030_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_030_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_022_src0_data),                   //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_023 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                      //      sink.ready
		.sink_channel       (router_031_src_channel),                    //          .channel
		.sink_data          (router_031_src_data),                       //          .data
		.sink_startofpacket (router_031_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_031_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_023_src0_data),                   //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_024 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                      //      sink.ready
		.sink_channel       (router_032_src_channel),                    //          .channel
		.sink_data          (router_032_src_data),                       //          .data
		.sink_startofpacket (router_032_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_032_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_024_src0_data),                   //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_025 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                      //      sink.ready
		.sink_channel       (router_033_src_channel),                    //          .channel
		.sink_data          (router_033_src_data),                       //          .data
		.sink_startofpacket (router_033_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_033_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_025_src0_data),                   //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_026 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                      //      sink.ready
		.sink_channel       (router_034_src_channel),                    //          .channel
		.sink_data          (router_034_src_data),                       //          .data
		.sink_startofpacket (router_034_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_034_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_026_src0_data),                   //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_027 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                      //      sink.ready
		.sink_channel       (router_035_src_channel),                    //          .channel
		.sink_data          (router_035_src_data),                       //          .data
		.sink_startofpacket (router_035_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_035_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_027_src0_data),                   //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 rsp_demux_028 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                      //      sink.ready
		.sink_channel       (router_036_src_channel),                    //          .channel
		.sink_data          (router_036_src_data),                       //          .data
		.sink_startofpacket (router_036_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_036_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_028_src0_data),                   //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_029 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                      //      sink.ready
		.sink_channel       (router_037_src_channel),                    //          .channel
		.sink_data          (router_037_src_data),                       //          .data
		.sink_startofpacket (router_037_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_037_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_029_src0_data),                   //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_030 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                      //      sink.ready
		.sink_channel       (router_038_src_channel),                    //          .channel
		.sink_data          (router_038_src_data),                       //          .data
		.sink_startofpacket (router_038_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_038_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_030_src0_data),                   //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_004 rsp_demux_031 (
		.clk                (clk_sys_clk_clk),                           //       clk.clk
		.reset              (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                      //      sink.ready
		.sink_channel       (router_039_src_channel),                    //          .channel
		.sink_data          (router_039_src_data),                       //          .data
		.sink_startofpacket (router_039_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_039_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_031_src0_data),                   //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_sys_clk_clk),                           //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                         //       src.ready
		.src_valid            (rsp_mux_src_valid),                         //          .valid
		.src_data             (rsp_mux_src_data),                          //          .data
		.src_channel          (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                    //          .channel
		.sink0_data           (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                  //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                   //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                  //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                   //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready          (crosser_001_out_ready),                     //     sink3.ready
		.sink3_valid          (crosser_001_out_valid),                     //          .valid
		.sink3_channel        (crosser_001_out_channel),                   //          .channel
		.sink3_data           (crosser_001_out_data),                      //          .data
		.sink3_startofpacket  (crosser_001_out_startofpacket),             //          .startofpacket
		.sink3_endofpacket    (crosser_001_out_endofpacket),               //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                  //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                   //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                  //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                   //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),            //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                  //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                  //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                   //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),            //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                  //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                  //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                   //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),          //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),            //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                  //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                  //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                   //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),          //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),            //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                  //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                  //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                   //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),          //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),            //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                  //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                   //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),            //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                  //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                   //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),            //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                  //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                  //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                   //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),          //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),            //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                  //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                  //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                   //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),          //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_mux_001_src_data),                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_013_src1_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_013_src1_valid),                  //          .valid
		.sink0_channel       (rsp_demux_013_src1_channel),                //          .channel
		.sink0_data          (rsp_demux_013_src1_data),                   //          .data
		.sink0_startofpacket (rsp_demux_013_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_013_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                     //          .valid
		.src_data            (rsp_mux_002_src_data),                      //          .data
		.src_channel         (rsp_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_013_src2_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_013_src2_valid),                  //          .valid
		.sink0_channel       (rsp_demux_013_src2_channel),                //          .channel
		.sink0_data          (rsp_demux_013_src2_data),                   //          .data
		.sink0_startofpacket (rsp_demux_013_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_013_src2_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_003 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                     //          .valid
		.src_data            (rsp_mux_003_src_data),                      //          .data
		.src_channel         (rsp_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_012_src1_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_012_src1_valid),                  //          .valid
		.sink0_channel       (rsp_demux_012_src1_channel),                //          .channel
		.sink0_data          (rsp_demux_012_src1_data),                   //          .data
		.sink0_startofpacket (rsp_demux_012_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                 (clk_sys_clk_clk),                                                      //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                //          .valid
		.src_data            (rsp_mux_004_src_data),                                                 //          .data
		.src_channel         (rsp_mux_004_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_005 rsp_mux_005 (
		.clk                 (clk_sys_clk_clk),                                                                  //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                                            //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                                            //          .valid
		.src_data            (rsp_mux_005_src_data),                                                             //          .data
		.src_channel         (rsp_mux_005_src_channel),                                                          //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                                                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                                                         //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                                                       //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                                                          //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),                                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                                                   //          .endofpacket
		.sink1_ready         (rsp_demux_012_src3_ready),                                                         //     sink1.ready
		.sink1_valid         (rsp_demux_012_src3_valid),                                                         //          .valid
		.sink1_channel       (rsp_demux_012_src3_channel),                                                       //          .channel
		.sink1_data          (rsp_demux_012_src3_data),                                                          //          .data
		.sink1_startofpacket (rsp_demux_012_src3_startofpacket),                                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src3_endofpacket),                                                   //          .endofpacket
		.sink2_ready         (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel       (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data          (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (rsp_demux_015_src0_ready),                                                         //     sink3.ready
		.sink3_valid         (rsp_demux_015_src0_valid),                                                         //          .valid
		.sink3_channel       (rsp_demux_015_src0_channel),                                                       //          .channel
		.sink3_data          (rsp_demux_015_src0_data),                                                          //          .data
		.sink3_startofpacket (rsp_demux_015_src0_startofpacket),                                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_015_src0_endofpacket)                                                    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_006 rsp_mux_006 (
		.clk                 (clk_sys_clk_clk),                           //       clk.clk
		.reset               (nios2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                     //          .valid
		.src_data            (rsp_mux_006_src_data),                      //          .data
		.src_channel         (rsp_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src2_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src2_valid),                  //          .valid
		.sink1_channel       (rsp_demux_001_src2_channel),                //          .channel
		.sink1_data          (rsp_demux_001_src2_data),                   //          .data
		.sink1_startofpacket (rsp_demux_001_src2_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src2_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_007 rsp_mux_007 (
		.clk                  (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready            (rsp_mux_007_src_ready),                                                //       src.ready
		.src_valid            (rsp_mux_007_src_valid),                                                //          .valid
		.src_data             (rsp_mux_007_src_data),                                                 //          .data
		.src_channel          (rsp_mux_007_src_channel),                                              //          .channel
		.src_startofpacket    (rsp_mux_007_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket      (rsp_mux_007_src_endofpacket),                                          //          .endofpacket
		.sink0_ready          (rsp_demux_010_src1_ready),                                             //     sink0.ready
		.sink0_valid          (rsp_demux_010_src1_valid),                                             //          .valid
		.sink0_channel        (rsp_demux_010_src1_channel),                                           //          .channel
		.sink0_data           (rsp_demux_010_src1_data),                                              //          .data
		.sink0_startofpacket  (rsp_demux_010_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_010_src1_endofpacket),                                       //          .endofpacket
		.sink1_ready          (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready),          //     sink1.ready
		.sink1_valid          (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid),          //          .valid
		.sink1_channel        (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel),        //          .channel
		.sink1_data           (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_data),           //          .data
		.sink1_startofpacket  (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink1_endofpacket    (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink2_ready          (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid          (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_valid),           //          .valid
		.sink2_channel        (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_channel),         //          .channel
		.sink2_data           (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_data),            //          .data
		.sink2_startofpacket  (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket    (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready          (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid          (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel        (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data           (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket  (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket    (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready          (crosser_005_out_ready),                                                //     sink4.ready
		.sink4_valid          (crosser_005_out_valid),                                                //          .valid
		.sink4_channel        (crosser_005_out_channel),                                              //          .channel
		.sink4_data           (crosser_005_out_data),                                                 //          .data
		.sink4_startofpacket  (crosser_005_out_startofpacket),                                        //          .startofpacket
		.sink4_endofpacket    (crosser_005_out_endofpacket),                                          //          .endofpacket
		.sink5_ready          (crosser_006_out_ready),                                                //     sink5.ready
		.sink5_valid          (crosser_006_out_valid),                                                //          .valid
		.sink5_channel        (crosser_006_out_channel),                                              //          .channel
		.sink5_data           (crosser_006_out_data),                                                 //          .data
		.sink5_startofpacket  (crosser_006_out_startofpacket),                                        //          .startofpacket
		.sink5_endofpacket    (crosser_006_out_endofpacket),                                          //          .endofpacket
		.sink6_ready          (crosser_007_out_ready),                                                //     sink6.ready
		.sink6_valid          (crosser_007_out_valid),                                                //          .valid
		.sink6_channel        (crosser_007_out_channel),                                              //          .channel
		.sink6_data           (crosser_007_out_data),                                                 //          .data
		.sink6_startofpacket  (crosser_007_out_startofpacket),                                        //          .startofpacket
		.sink6_endofpacket    (crosser_007_out_endofpacket),                                          //          .endofpacket
		.sink7_ready          (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),              //     sink7.ready
		.sink7_valid          (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),              //          .valid
		.sink7_channel        (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),            //          .channel
		.sink7_data           (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_data),               //          .data
		.sink7_startofpacket  (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink7_endofpacket    (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink8_ready          (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_ready),              //     sink8.ready
		.sink8_valid          (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_valid),              //          .valid
		.sink8_channel        (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_channel),            //          .channel
		.sink8_data           (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_data),               //          .data
		.sink8_startofpacket  (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink8_endofpacket    (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink9_ready          (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),                //     sink9.ready
		.sink9_valid          (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),                //          .valid
		.sink9_channel        (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),              //          .channel
		.sink9_data           (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_data),                 //          .data
		.sink9_startofpacket  (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),          //          .endofpacket
		.sink10_ready         (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),                //    sink10.ready
		.sink10_valid         (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),                //          .valid
		.sink10_channel       (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),              //          .channel
		.sink10_data          (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_data),                 //          .data
		.sink10_startofpacket (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),          //          .endofpacket
		.sink11_ready         (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_ready),            //    sink11.ready
		.sink11_valid         (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_valid),            //          .valid
		.sink11_channel       (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_channel),          //          .channel
		.sink11_data          (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_data),             //          .data
		.sink11_startofpacket (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink11_endofpacket   (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink12_ready         (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready),             //    sink12.ready
		.sink12_valid         (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid),             //          .valid
		.sink12_channel       (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel),           //          .channel
		.sink12_data          (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_data),              //          .data
		.sink12_startofpacket (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink12_endofpacket   (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink13_ready         (rsp_demux_028_src0_ready),                                             //    sink13.ready
		.sink13_valid         (rsp_demux_028_src0_valid),                                             //          .valid
		.sink13_channel       (rsp_demux_028_src0_channel),                                           //          .channel
		.sink13_data          (rsp_demux_028_src0_data),                                              //          .data
		.sink13_startofpacket (rsp_demux_028_src0_startofpacket),                                     //          .startofpacket
		.sink13_endofpacket   (rsp_demux_028_src0_endofpacket),                                       //          .endofpacket
		.sink14_ready         (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),             //    sink14.ready
		.sink14_valid         (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),             //          .valid
		.sink14_channel       (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),           //          .channel
		.sink14_data          (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_data),              //          .data
		.sink14_startofpacket (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink14_endofpacket   (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink15_ready         (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),                //    sink15.ready
		.sink15_valid         (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),                //          .valid
		.sink15_channel       (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),              //          .channel
		.sink15_data          (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_data),                 //          .data
		.sink15_startofpacket (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),          //          .endofpacket
		.sink16_ready         (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_ready),            //    sink16.ready
		.sink16_valid         (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_valid),            //          .valid
		.sink16_channel       (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_channel),          //          .channel
		.sink16_data          (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_data),             //          .data
		.sink16_startofpacket (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink16_endofpacket   (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket)       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                             //          .ready
		.in_data              (cmd_demux_004_src0_data),                                              //          .data
		.out_endofpacket      (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_avalon_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                                  //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_005_src2_valid),                                                         //      sink.valid
		.in_channel           (cmd_demux_005_src2_channel),                                                       //          .channel
		.in_startofpacket     (cmd_demux_005_src2_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src2_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_demux_005_src2_ready),                                                         //          .ready
		.in_data              (cmd_demux_005_src2_data),                                                          //          .data
		.out_endofpacket      (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (driver_sd_avalon_master_0_to_floppy_sd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                     //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_007_src1_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_007_src1_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_007_src1_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src1_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_007_src1_ready),                                            //          .ready
		.in_data              (cmd_demux_007_src1_data),                                             //          .data
		.out_endofpacket      (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pc_dma_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pc_dma_page_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                    //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_007_src2_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_007_src2_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_007_src2_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src2_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_007_src2_ready),                                           //          .ready
		.in_data              (cmd_demux_007_src2_data),                                            //          .data
		.out_endofpacket      (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pc_dma_page_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pc_dma_master_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_007_src3_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_007_src3_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_007_src3_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src3_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_007_src3_ready),                                             //          .ready
		.in_data              (cmd_demux_007_src3_data),                                              //          .data
		.out_endofpacket      (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pc_dma_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_vga_io_b_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_007_src4_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src4_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src4_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src4_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src4_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src4_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_vga_io_c_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_007_src5_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src5_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src5_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src5_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src5_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src5_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_vga_io_d_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_007_src6_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src6_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src6_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src6_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src6_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src6_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_sound_io_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_007_src7_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src7_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src7_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src7_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src7_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src7_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_sound_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_sound_fm_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_007_src8_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src8_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src8_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src8_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src8_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src8_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_sound_fm_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_rtc_io_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_007_src9_valid),                                      //      sink.valid
		.in_channel           (cmd_demux_007_src9_channel),                                    //          .channel
		.in_startofpacket     (cmd_demux_007_src9_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src9_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_demux_007_src9_ready),                                      //          .ready
		.in_data              (cmd_demux_007_src9_data),                                       //          .data
		.out_endofpacket      (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_rtc_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pit_io_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_007_src10_valid),                                     //      sink.valid
		.in_channel           (cmd_demux_007_src10_channel),                                   //          .channel
		.in_startofpacket     (cmd_demux_007_src10_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src10_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_demux_007_src10_ready),                                     //          .ready
		.in_data              (cmd_demux_007_src10_data),                                      //          .data
		.out_endofpacket      (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pit_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pic_master_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                   //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_007_src11_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_007_src11_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_007_src11_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src11_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_007_src11_ready),                                         //          .ready
		.in_data              (cmd_demux_007_src11_data),                                          //          .data
		.out_endofpacket      (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pic_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_pic_slave_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                  //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (cmd_demux_007_src12_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src12_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src12_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src12_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src12_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src12_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_pic_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_floppy_io_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                  //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (cmd_demux_007_src14_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_007_src14_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_007_src14_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src14_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_007_src14_ready),                                        //          .ready
		.in_data              (cmd_demux_007_src14_data),                                         //          .data
		.out_endofpacket      (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_floppy_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_ps2_io_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_007_src15_valid),                                     //      sink.valid
		.in_channel           (cmd_demux_007_src15_channel),                                   //          .channel
		.in_startofpacket     (cmd_demux_007_src15_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src15_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_demux_007_src15_ready),                                     //          .ready
		.in_data              (cmd_demux_007_src15_data),                                      //          .data
		.out_endofpacket      (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_ps2_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                   //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_007_src16_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_007_src16_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_007_src16_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src16_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_007_src16_ready),                                         //          .ready
		.in_data              (cmd_demux_007_src16_data),                                          //          .data
		.out_endofpacket      (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ao486_avalon_io_to_ps2_sysctl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_012_src2_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_012_src2_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_012_src2_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src2_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_012_src2_ready),                                             //          .ready
		.in_data              (rsp_demux_012_src2_data),                                              //          .data
		.out_endofpacket      (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                                  //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (rsp_demux_014_src0_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_014_src0_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_014_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_014_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_014_src0_ready),                                                         //          .ready
		.in_data              (rsp_demux_014_src0_data),                                                          //          .data
		.out_endofpacket      (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (floppy_sd_slave_to_driver_sd_avalon_master_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                     //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_demux_016_src0_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_016_src0_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_016_src0_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_016_src0_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_016_src0_ready),                                            //          .ready
		.in_data              (rsp_demux_016_src0_data),                                             //          .data
		.out_endofpacket      (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_page_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                    //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_017_src0_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_017_src0_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_017_src0_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_017_src0_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_017_src0_ready),                                           //          .ready
		.in_data              (rsp_demux_017_src0_data),                                            //          .data
		.out_endofpacket      (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_page_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_master_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                      //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_018_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_018_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_018_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_018_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_018_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_018_src0_data),                                              //          .data
		.out_endofpacket      (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_b_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_vga_clk_clk),                                                 //       clk.clk
		.reset                (vga_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_019_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_019_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_019_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_019_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_019_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_019_src0_data),                                         //          .data
		.out_endofpacket      (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_c_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_vga_clk_clk),                                                 //       clk.clk
		.reset                (vga_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_020_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_020_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_020_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_020_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_020_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_020_src0_data),                                         //          .data
		.out_endofpacket      (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_d_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_vga_clk_clk),                                                 //       clk.clk
		.reset                (vga_reset_sink_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_021_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_021_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_021_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_021_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_021_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_021_src0_data),                                         //          .data
		.out_endofpacket      (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_io_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_022_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_022_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_022_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_022_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_022_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_022_src0_data),                                         //          .data
		.out_endofpacket      (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_fm_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                 //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_023_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_023_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_023_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_023_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_023_src0_data),                                         //          .data
		.out_endofpacket      (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_fm_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rtc_io_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (rsp_demux_024_src0_valid),                                      //      sink.valid
		.in_channel           (rsp_demux_024_src0_channel),                                    //          .channel
		.in_startofpacket     (rsp_demux_024_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_demux_024_src0_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_demux_024_src0_ready),                                      //          .ready
		.in_data              (rsp_demux_024_src0_data),                                       //          .data
		.out_endofpacket      (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (rtc_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pit_io_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (rsp_demux_025_src0_valid),                                      //      sink.valid
		.in_channel           (rsp_demux_025_src0_channel),                                    //          .channel
		.in_startofpacket     (rsp_demux_025_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src0_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_demux_025_src0_ready),                                      //          .ready
		.in_data              (rsp_demux_025_src0_data),                                       //          .data
		.out_endofpacket      (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pit_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_master_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                   //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_026_src0_valid),                                          //      sink.valid
		.in_channel           (rsp_demux_026_src0_channel),                                        //          .channel
		.in_startofpacket     (rsp_demux_026_src0_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_026_src0_endofpacket),                                    //          .endofpacket
		.in_ready             (rsp_demux_026_src0_ready),                                          //          .ready
		.in_data              (rsp_demux_026_src0_data),                                           //          .data
		.out_endofpacket      (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_master_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_slave_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                  //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_027_src0_valid),                                         //      sink.valid
		.in_channel           (rsp_demux_027_src0_channel),                                       //          .channel
		.in_startofpacket     (rsp_demux_027_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_027_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_demux_027_src0_ready),                                         //          .ready
		.in_data              (rsp_demux_027_src0_data),                                          //          .data
		.out_endofpacket      (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_slave_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) floppy_io_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                  //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_029_src0_valid),                                         //      sink.valid
		.in_channel           (rsp_demux_029_src0_channel),                                       //          .channel
		.in_startofpacket     (rsp_demux_029_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_029_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_demux_029_src0_ready),                                         //          .ready
		.in_data              (rsp_demux_029_src0_data),                                          //          .data
		.out_endofpacket      (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (floppy_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_io_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                               //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (rsp_demux_030_src0_valid),                                      //      sink.valid
		.in_channel           (rsp_demux_030_src0_channel),                                    //          .channel
		.in_startofpacket     (rsp_demux_030_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_demux_030_src0_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_demux_030_src0_ready),                                      //          .ready
		.in_data              (rsp_demux_030_src0_data),                                       //          .data
		.out_endofpacket      (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ps2_io_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter (
		.clk                  (clk_sys_clk_clk),                                                   //       clk.clk
		.reset                (nios2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_031_src0_valid),                                          //      sink.valid
		.in_channel           (rsp_demux_031_src0_channel),                                        //          .channel
		.in_startofpacket     (rsp_demux_031_src0_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_031_src0_endofpacket),                                    //          .endofpacket
		.in_ready             (rsp_demux_031_src0_ready),                                          //          .ready
		.in_data              (rsp_demux_031_src0_data),                                           //          .data
		.out_endofpacket      (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ps2_sysctl_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_sys_clk_clk),                            //        in_clk.clk
		.in_reset          (nios2_reset_n_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (clk_vga_clk_clk),                            //       out_clk.clk
		.out_reset         (vga_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                       //            in.ready
		.in_valid          (cmd_demux_src3_valid),                       //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),               //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                 //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                     //              .channel
		.in_data           (cmd_demux_src3_data),                        //              .data
		.out_ready         (crosser_out_ready),                          //           out.ready
		.out_valid         (crosser_out_valid),                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_out_channel),                        //              .channel
		.out_data          (crosser_out_data),                           //              .data
		.in_empty          (1'b0),                                       //   (terminated)
		.in_error          (1'b0),                                       //   (terminated)
		.out_empty         (),                                           //   (terminated)
		.out_error         ()                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_vga_clk_clk),                            //        in_clk.clk
		.in_reset          (vga_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_sys_clk_clk),                            //       out_clk.clk
		.out_reset         (nios2_reset_n_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                   //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                   //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),           //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),             //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                 //              .channel
		.in_data           (rsp_demux_003_src0_data),                    //              .data
		.out_ready         (crosser_001_out_ready),                      //           out.ready
		.out_valid         (crosser_001_out_valid),                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                    //              .channel
		.out_data          (crosser_001_out_data),                       //              .data
		.in_empty          (1'b0),                                       //   (terminated)
		.in_error          (1'b0),                                       //   (terminated)
		.out_empty         (),                                           //   (terminated)
		.out_error         ()                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_sys_clk_clk),                                                 //        in_clk.clk
		.in_reset          (ao486_reset_sink_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (clk_vga_clk_clk),                                                 //       out_clk.clk
		.out_reset         (vga_reset_sink_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (ao486_avalon_io_to_vga_io_b_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_002_out_ready),                                           //           out.ready
		.out_valid         (crosser_002_out_valid),                                           //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                         //              .channel
		.out_data          (crosser_002_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_sys_clk_clk),                                                 //        in_clk.clk
		.in_reset          (ao486_reset_sink_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (clk_vga_clk_clk),                                                 //       out_clk.clk
		.out_reset         (vga_reset_sink_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (ao486_avalon_io_to_vga_io_c_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_003_out_ready),                                           //           out.ready
		.out_valid         (crosser_003_out_valid),                                           //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                         //              .channel
		.out_data          (crosser_003_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_sys_clk_clk),                                                 //        in_clk.clk
		.in_reset          (ao486_reset_sink_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (clk_vga_clk_clk),                                                 //       out_clk.clk
		.out_reset         (vga_reset_sink_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (ao486_avalon_io_to_vga_io_d_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_004_out_ready),                                           //           out.ready
		.out_valid         (crosser_004_out_valid),                                           //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                         //              .channel
		.out_data          (crosser_004_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_vga_clk_clk),                                                 //        in_clk.clk
		.in_reset          (vga_reset_sink_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_sys_clk_clk),                                                 //       out_clk.clk
		.out_reset         (ao486_reset_sink_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (vga_io_b_to_ao486_avalon_io_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_005_out_ready),                                           //           out.ready
		.out_valid         (crosser_005_out_valid),                                           //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                         //              .channel
		.out_data          (crosser_005_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_vga_clk_clk),                                                 //        in_clk.clk
		.in_reset          (vga_reset_sink_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_sys_clk_clk),                                                 //       out_clk.clk
		.out_reset         (ao486_reset_sink_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (vga_io_c_to_ao486_avalon_io_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_006_out_ready),                                           //           out.ready
		.out_valid         (crosser_006_out_valid),                                           //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                         //              .channel
		.out_data          (crosser_006_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (32),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_vga_clk_clk),                                                 //        in_clk.clk
		.in_reset          (vga_reset_sink_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_sys_clk_clk),                                                 //       out_clk.clk
		.out_reset         (ao486_reset_sink_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (vga_io_d_to_ao486_avalon_io_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_007_out_ready),                                           //           out.ready
		.out_valid         (crosser_007_out_valid),                                           //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                         //              .channel
		.out_data          (crosser_007_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

endmodule
