// system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2021.03.08.12:40:53

`timescale 1 ps / 1 ps
module system_mm_interconnect_2 (
		input  wire        clk_sys_clk_clk,                               //                             clk_sys_clk.clk
		input  wire        ao486_reset_sink_reset_bridge_in_reset_reset,  //  ao486_reset_sink_reset_bridge_in_reset.reset
		input  wire        pc_bus_reset_sink_reset_bridge_in_reset_reset, // pc_bus_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0] ao486_avalon_memory_address,                   //                     ao486_avalon_memory.address
		output wire        ao486_avalon_memory_waitrequest,               //                                        .waitrequest
		input  wire [2:0]  ao486_avalon_memory_burstcount,                //                                        .burstcount
		input  wire [3:0]  ao486_avalon_memory_byteenable,                //                                        .byteenable
		input  wire        ao486_avalon_memory_read,                      //                                        .read
		output wire [31:0] ao486_avalon_memory_readdata,                  //                                        .readdata
		output wire        ao486_avalon_memory_readdatavalid,             //                                        .readdatavalid
		input  wire        ao486_avalon_memory_write,                     //                                        .write
		input  wire [31:0] ao486_avalon_memory_writedata,                 //                                        .writedata
		output wire [29:0] pc_bus_mem_address,                            //                              pc_bus_mem.address
		output wire        pc_bus_mem_write,                              //                                        .write
		output wire        pc_bus_mem_read,                               //                                        .read
		input  wire [31:0] pc_bus_mem_readdata,                           //                                        .readdata
		output wire [31:0] pc_bus_mem_writedata,                          //                                        .writedata
		output wire [2:0]  pc_bus_mem_burstcount,                         //                                        .burstcount
		output wire [3:0]  pc_bus_mem_byteenable,                         //                                        .byteenable
		input  wire        pc_bus_mem_readdatavalid,                      //                                        .readdatavalid
		input  wire        pc_bus_mem_waitrequest                         //                                        .waitrequest
	);

	wire         ao486_avalon_memory_translator_avalon_universal_master_0_waitrequest;   // pc_bus_mem_translator:uav_waitrequest -> ao486_avalon_memory_translator:uav_waitrequest
	wire   [4:0] ao486_avalon_memory_translator_avalon_universal_master_0_burstcount;    // ao486_avalon_memory_translator:uav_burstcount -> pc_bus_mem_translator:uav_burstcount
	wire  [31:0] ao486_avalon_memory_translator_avalon_universal_master_0_writedata;     // ao486_avalon_memory_translator:uav_writedata -> pc_bus_mem_translator:uav_writedata
	wire  [31:0] ao486_avalon_memory_translator_avalon_universal_master_0_address;       // ao486_avalon_memory_translator:uav_address -> pc_bus_mem_translator:uav_address
	wire         ao486_avalon_memory_translator_avalon_universal_master_0_lock;          // ao486_avalon_memory_translator:uav_lock -> pc_bus_mem_translator:uav_lock
	wire         ao486_avalon_memory_translator_avalon_universal_master_0_write;         // ao486_avalon_memory_translator:uav_write -> pc_bus_mem_translator:uav_write
	wire         ao486_avalon_memory_translator_avalon_universal_master_0_read;          // ao486_avalon_memory_translator:uav_read -> pc_bus_mem_translator:uav_read
	wire  [31:0] ao486_avalon_memory_translator_avalon_universal_master_0_readdata;      // pc_bus_mem_translator:uav_readdata -> ao486_avalon_memory_translator:uav_readdata
	wire         ao486_avalon_memory_translator_avalon_universal_master_0_debugaccess;   // ao486_avalon_memory_translator:uav_debugaccess -> pc_bus_mem_translator:uav_debugaccess
	wire   [3:0] ao486_avalon_memory_translator_avalon_universal_master_0_byteenable;    // ao486_avalon_memory_translator:uav_byteenable -> pc_bus_mem_translator:uav_byteenable
	wire         ao486_avalon_memory_translator_avalon_universal_master_0_readdatavalid; // pc_bus_mem_translator:uav_readdatavalid -> ao486_avalon_memory_translator:uav_readdatavalid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (1),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ao486_avalon_memory_translator (
		.clk                      (clk_sys_clk_clk),                                                        //                       clk.clk
		.reset                    (ao486_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address              (ao486_avalon_memory_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (ao486_avalon_memory_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (ao486_avalon_memory_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (ao486_avalon_memory_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (ao486_avalon_memory_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (ao486_avalon_memory_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (ao486_avalon_memory_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (ao486_avalon_memory_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (ao486_avalon_memory_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (ao486_avalon_memory_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (ao486_avalon_memory_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (ao486_avalon_memory_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (ao486_avalon_memory_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (ao486_avalon_memory_burstcount),                                         //                          .burstcount
		.av_byteenable            (ao486_avalon_memory_byteenable),                                         //                          .byteenable
		.av_read                  (ao486_avalon_memory_read),                                               //                          .read
		.av_readdata              (ao486_avalon_memory_readdata),                                           //                          .readdata
		.av_readdatavalid         (ao486_avalon_memory_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (ao486_avalon_memory_write),                                              //                          .write
		.av_writedata             (ao486_avalon_memory_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                   //               (terminated)
		.av_begintransfer         (1'b0),                                                                   //               (terminated)
		.av_chipselect            (1'b0),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                                   //               (terminated)
		.av_debugaccess           (1'b0),                                                                   //               (terminated)
		.uav_clken                (),                                                                       //               (terminated)
		.av_clken                 (1'b1),                                                                   //               (terminated)
		.uav_response             (2'b00),                                                                  //               (terminated)
		.av_response              (),                                                                       //               (terminated)
		.uav_writeresponserequest (),                                                                       //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                   //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid    ()                                                                        //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_bus_mem_translator (
		.clk                      (clk_sys_clk_clk),                                                        //                      clk.clk
		.reset                    (pc_bus_reset_sink_reset_bridge_in_reset_reset),                          //                    reset.reset
		.uav_address              (ao486_avalon_memory_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (ao486_avalon_memory_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read                 (ao486_avalon_memory_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write                (ao486_avalon_memory_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest          (ao486_avalon_memory_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (ao486_avalon_memory_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (ao486_avalon_memory_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata             (ao486_avalon_memory_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata            (ao486_avalon_memory_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock                 (ao486_avalon_memory_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess          (ao486_avalon_memory_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address               (pc_bus_mem_address),                                                     //      avalon_anti_slave_0.address
		.av_write                 (pc_bus_mem_write),                                                       //                         .write
		.av_read                  (pc_bus_mem_read),                                                        //                         .read
		.av_readdata              (pc_bus_mem_readdata),                                                    //                         .readdata
		.av_writedata             (pc_bus_mem_writedata),                                                   //                         .writedata
		.av_burstcount            (pc_bus_mem_burstcount),                                                  //                         .burstcount
		.av_byteenable            (pc_bus_mem_byteenable),                                                  //                         .byteenable
		.av_readdatavalid         (pc_bus_mem_readdatavalid),                                               //                         .readdatavalid
		.av_waitrequest           (pc_bus_mem_waitrequest),                                                 //                         .waitrequest
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_chipselect            (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

endmodule
